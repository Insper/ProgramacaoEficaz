{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programa\u00e7\u00e3o Eficaz","text":"<p>Boas vindas ao curso de Programa\u00e7\u00e3o Eficaz 2025/1</p> <p>Professor</p> <ul> <li>M\u00e1rcio F. Stabile Jr. (marciofsj@insper.edu.br)</li> </ul> <p>Professora Auxiliar</p> <ul> <li>Licia Sales Costa Lima (liciascl@insper.edu.br)</li> </ul> <p>Ninja</p> <ul> <li>Ricardo Luz Carvalho (ricardolc2@al.insper.edu.br)</li> </ul> <p>Aulas:</p> <ul> <li>TER 07:30 - 09:30</li> <li>SEX 09:45 - 11:45</li> </ul> <p>Atendimento:</p> <ul> <li>TER 09:45 - 11:15 (M\u00e1rcio)</li> </ul> <p>Algumas Datas</p> <ul> <li>09/02: Entrega do ELI5</li> <li>22/02: Entrega do Projeto 1</li> <li>22/02: Entrega da APS1</li> </ul>"},{"location":"avaliacao/","title":"Avalia\u00e7\u00e3o Professor","text":""},{"location":"avaliacao/#avaliacao-barbara-agena","title":"Avalia\u00e7\u00e3o Barbara Agena","text":"<ul> <li>Link para avalia\u00e7\u00e3o: https://insper.avaliar.org/ </li> <li>C\u00f3digo da avalia\u00e7\u00e3o: 76062</li> <li>Chave: 027308 </li> </ul>"},{"location":"avaliacao/#avaliacao-manoela-campos","title":"Avalia\u00e7\u00e3o Manoela Campos","text":"<ul> <li>Link para avalia\u00e7\u00e3o: https://insper.avaliar.org/ </li> <li>C\u00f3digo da avalia\u00e7\u00e3o: 77056</li> <li>Chave: 716384</li> </ul>"},{"location":"notas/","title":"C\u00e1lculo da m\u00e9dia","text":"<p>A m\u00e9dia \u00e9 composta por 3 partes: \\(Atividades\\) (atividades obrigat\u00f3rias pontuais), \\(Projetos\\) e \\(Avalia\u00e7\u00f5es\\):</p> \\[M\u00e9dia = \\frac{10\\cdot Atividades + 50\\cdot Projetos + 40\\cdot Avalia\u00e7\u00f5es}{100}\\] <p>Caso \\(Atividades &lt; 5\\), \\(Projetos &lt; 5\\) ou \\(Avalia\u00e7\u00f5es &lt; 5\\):</p> \\[M\u00e9dia = \\min({Atividades, Projetos, Avalia\u00e7\u00f5es})\\]"},{"location":"notas/#conversao","title":"Convers\u00e3o","text":"<p>Para fins de c\u00e1lculo a seguinte convers\u00e3o ser\u00e1 utilizada (note a diferen\u00e7a no valor do conceito D):</p> Conceito Nota A+ 10 A 9 B+ 8 B 7 C+ 6 C 5 D 3 I 0"},{"location":"notas/#atividades","title":"Atividades","text":"<p>As atividades obrigat\u00f3rias s\u00e3o requisitos para a aprova\u00e7\u00e3o. Para uma atividade ser considerada entregue, o aluno deve obter um conceito m\u00ednimo de C. Se esse conceito n\u00e3o for obtido (o que inclui o caso de entrega com atraso), o aluno poder\u00e1 realizar uma nova entrega ap\u00f3s o prazo, mas o conceito da atividade fica limitado a C.</p>"},{"location":"notas/#projetos","title":"Projetos","text":"<p>Teremos 3 projetos ao longo do semestre. A m\u00e9dia de \\(Projetos\\) ser\u00e1 calculada a partir da seguinte f\u00f3rmula:</p> \\[Projetos = \\frac{40\\cdot Projeto1 + 30\\cdot Projeto2 + 30\\cdot Projeto3}{100}\\]"},{"location":"notas/#avaliacoes","title":"Avalia\u00e7\u00f5es","text":"<p>Teremos 2 avalia\u00e7\u00f5es ao longo do semestre. A m\u00e9dia de avalia\u00e7\u00f5es ser\u00e1 calculada como:</p> \\[Avalia\u00e7\u00f5es = \\frac{40\\cdot AI + 60\\cdot AF}{100}\\]"},{"location":"aulas/01-getit/","title":"01 - Get-it","text":"<p>Este handout est\u00e1 dividido em 4 partes. Voc\u00ea pode acess\u00e1-las nos links abaixo:</p> <ul> <li>Parte 0: Antes de come\u00e7ar</li> <li>Parte 1: Criando o servidor</li> <li>Parte 2: Respondendo com p\u00e1ginas HTML</li> <li>Parte 3: Separando algumas responsabilidades</li> <li>Parte 4: Fazendo um formul\u00e1rio de cria\u00e7\u00e3o de anota\u00e7\u00e3o</li> </ul>"},{"location":"aulas/heroku/","title":"Deploy da Aplica\u00e7\u00e3o","text":"<p>At\u00e9 agora voc\u00ea desenvolveu as suas aplica\u00e7\u00f5es e testou o servidor localmente. Neste handout vamos aprender como publicar a nossa aplica\u00e7\u00e3o para que qualquer pessoa com acesso \u00e0 internet possa acess\u00e1-la. Existem diversas op\u00e7\u00f5es de hospedagem dispon\u00edveis. Alguns exemplos s\u00e3o a Amazon AWS, DigitalOcean, PythonAnywhere, Linode, ...</p> <p>Cada um tem suas vantagens e desvantagens. Em Programa\u00e7\u00e3o Eficaz n\u00f3s utilizaremos o Heroku pela facilidade de deploy de aplica\u00e7\u00f5es Python e por possuir uma conta gratuita para projetos pequenos. Se voc\u00ea preferir (ou quiser testar) qualquer outra op\u00e7\u00e3o, fique \u00e0 vontade para utiliz\u00e1-la.</p>"},{"location":"aulas/heroku/#primeiros-passos","title":"Primeiros passos","text":"<p>Para come\u00e7ar o processo de deploy, crie uma conta no Heroku.</p> <p>Instale a interface de linha de comando (CLI) do Heroku: Heroku CLI.</p> <p>Fa\u00e7a o login na sua conta do Heroku pelo terminal com o comando (voc\u00ea ser\u00e1 redirecionado para a p\u00e1gina do Heroku para completar o login):</p> <pre><code>heroku login\n</code></pre> <p>Agora voc\u00ea pode criar uma aplica\u00e7\u00e3o utilizando o comando (a documenta\u00e7\u00e3o dos comandos est\u00e1 dispon\u00edvel aqui):</p> <pre><code>heroku create\n</code></pre> <p>Esse comando vai criar uma aplica\u00e7\u00e3o com nome aleat\u00f3rio e vai imprimir no terminal algo parecido com isso:</p> <pre><code>Creating app... done, \u2b22 still-cove-69163\nhttps://still-cove-69163.herokuapp.com/ | https://git.heroku.com/still-cove-69163.git\n</code></pre> <p>No exemplo acima, a aplica\u00e7\u00e3o se chama <code>still-cove-69163</code>. Guarde o nome da sua aplica\u00e7\u00e3o.</p> Criando uma aplica\u00e7\u00e3o com nome espec\u00edfico <p>Voc\u00ea pode escolher o nome da sua aplica\u00e7\u00e3o com o comando <code>heroku create nome-da-aplicacao</code>, mas ele precisa ser \u00fanico em todo o Heroku, ou seja, ningu\u00e9m pode ter criado um projeto com o mesmo nome.</p> <p>Entre na pasta do seu projeto pelo terminal.</p> <p>Importante</p> <p>Seu projeto deve estar no git. Se n\u00e3o estiver, crie um reposit\u00f3rio antes de seguir para os pr\u00f3ximos passos deste handout.</p> <p>Quando for criar o reposit\u00f3rio, adicione um arquivo chamado <code>.gitignore</code> com o seguinte conte\u00fado:</p> <pre><code>env/\n*.egg-info\n*.pot\n*.py[co]\n.tox/\n__pycache__\nMANIFEST\ndist/\ndocs/_build/\ndocs/locale/\nnode_modules/\ntests/coverage_html/\ntests/.coverage\nbuild/\ntests/report/\n</code></pre> <p>Importante 2</p> <p>O projeto Django deve estar na raiz do reposit\u00f3rio github. <pre><code>&gt; REPOSIT\u00d3RIO GIT\n    &gt; getit\n    &gt; notes\n    manage.py\n    Procfile\n    requirements.txt\n</code></pre></p> <p>O deploy da aplica\u00e7\u00e3o \u00e9 iniciado automaticamente a partir de atualiza\u00e7\u00f5es em um reposit\u00f3rio git do Heroku. Para configurar esse reposit\u00f3rio no seu projeto, utilize o comando (importante 1: execute este comando na pasta raiz do seu projeto; importante 2: troque o <code>still-cove-69163</code> pelo nome do seu app gerado pelo Heroku):</p> <pre><code>heroku git:remote -a still-cove-69163\n</code></pre> <p>Para confirmar se est\u00e1 tudo certo, utilize o comando:</p> <pre><code>git remote -v\n</code></pre> <p>Ele deve listar (al\u00e9m de outros) os seguintes reposit\u00f3rios (claro, com o nome do seu app):</p> <pre><code>heroku  https://git.heroku.com/still-cove-69163.git (fetch)\nheroku  https://git.heroku.com/still-cove-69163.git (push)\n</code></pre>"},{"location":"aulas/heroku/#preparando-o-projeto","title":"Preparando o projeto","text":"<p>At\u00e9 o momento, n\u00f3s utilizamos o <code>python manage.py runserver</code> para executar o nosso servidor localmente. Esse comando \u00e9 apropriado apenas para testes no ambiente de desenvolvimento. Ele n\u00e3o \u00e9 otimizado para uma aplica\u00e7\u00e3o real. Para isso precisamos de um servidor de Web Server Gateway Interface (WSGI), que basicamente \u00e9 um intermedi\u00e1rio entre as requisi\u00e7\u00f5es que chegam no servidor e o c\u00f3digo Python. No nosso projeto n\u00f3s utilizaremos o Gunicorn (Green Unicorn). Voc\u00ea pode instal\u00e1-lo com (importante: lembre-se de ativar o ambiente virtual):</p> <pre><code>pip install gunicorn\n</code></pre> <p>Para testar sua aplica\u00e7\u00e3o com o Gunicorn, voc\u00ea pode executar o comando:</p> <pre><code>gunicorn getit.wsgi\n</code></pre> <p>O arquivo <code>wsgi.py</code></p> <p>O comando acima executou o Gunicorn com o arquivo de configura\u00e7\u00e3o <code>getit/wsgi.py</code>. Normalmente n\u00e3o \u00e9 necess\u00e1rio alterar esse arquivo, ent\u00e3o n\u00e3o vamos entrar em detalhes. O que voc\u00ea precisa saber \u00e9 que todo projeto Django possui um arquivo <code>wsgi.py</code> dentro da pasta do projeto.</p> <p>Agora vamos definir o arquivo de configura\u00e7\u00e3o do Heroku. Crie um arquivo chamado <code>Procfile</code> (o nome do arquivo n\u00e3o deve ter extens\u00e3o nenhuma - cuidado se for criar o arquivo em algum editor de texto, pois alguns colocam o <code>.txt</code> automaticamente) na raiz do projeto com o seguinte conte\u00fado:</p> <pre><code>release: python manage.py migrate\nweb: gunicorn getit.wsgi\n</code></pre> <p>A primeira linha faz com que o comando de migra\u00e7\u00e3o do Django seja executado quando o servidor for carregado. A segunda linha especifica como a aplica\u00e7\u00e3o deve ser executada.</p>"},{"location":"aulas/heroku/#configurando-os-arquivos-estaticos","title":"Configurando os arquivos est\u00e1ticos","text":"<p>Praticamente toda aplica\u00e7\u00e3o web possui arquivos est\u00e1ticos. Desde o primeiro servidor que implementamos foi necess\u00e1rio que o servidor fosse capaz de responder com o conte\u00fado desses arquivos. Entretanto, passar pela camada do Python para devolver um arquivo est\u00e1tico n\u00e3o \u00e9 uma boa estrat\u00e9gia para uma aplica\u00e7\u00e3o no mundo real. Arquivos est\u00e1ticos podem ser servidos de maneira muito mais eficiente. Por esse motivo, o Django serve arquivos est\u00e1ticos apenas em ambientes de teste/desenvolvimento, mas n\u00e3o em produ\u00e7\u00e3o.</p> <p>Para que a nossa aplica\u00e7\u00e3o funcione com todos os arquivos est\u00e1ticos ser\u00e1 necess\u00e1rio adicionarmos mais algumas depend\u00eancias e alterarmos algumas configura\u00e7\u00f5es. Comece instalando o WhiteNoise:</p> <pre><code>pip install whitenoise\n</code></pre> <p>O WhiteNoise \u00e9 respons\u00e1vel por servir arquivos est\u00e1ticos no Django de forma eficiente. Ele precisa ser adicionado \u00e0s configura\u00e7\u00f5es do Django. Abra o arquivo <code>getit/settings.py</code> e procure pela lista <code>MIDDLEWARE</code> e adicione o seguinte conte\u00fado logo depois de <code>'django.middleware.security.SecurityMiddleware',</code>:</p> <pre><code>'whitenoise.middleware.WhiteNoiseMiddleware',\n</code></pre> <p>Nesse mesmo arquivo, procure por <code>STATIC_URL = '/static/'</code> e adicione a seguinte linha logo em seguida:</p> <pre><code>STATIC_ROOT = BASE_DIR / 'staticfiles'\n</code></pre> <p>A primeira modifica\u00e7\u00e3o faz com que o WhiteNoise seja utilizado pelo Django. A constante <code>STATIC_ROOT</code> define onde o Django deve colocar os arquivos est\u00e1ticos que ser\u00e3o servidos em produ\u00e7\u00e3o (por isso voc\u00ea n\u00e3o precisou dele at\u00e9 agora).</p>"},{"location":"aulas/heroku/#outras-modificacoes-nas-configuracoes","title":"Outras modifica\u00e7\u00f5es nas configura\u00e7\u00f5es","text":"<p>Aproveite que est\u00e1 com o <code>settings.py</code> aberto e modifique o valor da constante <code>DEBUG</code> para <code>False</code>. Al\u00e9m disso, procure pela lista <code>ALLOWED_HOSTS</code>. Ela deve ser uma lista vazia. Por quest\u00f5es de seguran\u00e7a, o servidor Django aceita apenas requisi\u00e7\u00f5es vindas de dom\u00ednios previamente identificados. Para isso, descubra qual \u00e9 o dom\u00ednio do seu app Heroku. A URL do app ser\u00e1 parecida com essa: <code>https://still-cove-69163.herokuapp.com/</code> (lembrando que <code>still-cove-69163</code> \u00e9 o nome da minha aplica\u00e7\u00e3o, ent\u00e3o voc\u00ea ter\u00e1 que trocar o come\u00e7o pelo nome gerado para a sua aplica\u00e7\u00e3o). Adicione o dom\u00ednio (o que est\u00e1 entre o <code>https://</code> e a \u00faltima <code>/</code>) na lista <code>ALLOWED_HOSTS</code>:</p> <pre><code>ALLOWED_HOSTS = ['still-cove-69163.herokuapp.com', 'localhost', '127.0.0.1']\n</code></pre> <p>Note que tamb\u00e9m adicionamos o <code>'localhost'</code> e o <code>'127.0.0.1'</code>. Eles ser\u00e3o necess\u00e1rios para voc\u00ea testar a aplica\u00e7\u00e3o no seu computador.</p>"},{"location":"aulas/heroku/#criando-o-arquivo-requirementstxt","title":"Criando o arquivo <code>requirements.txt</code>","text":"<p>Cada projeto Python possui depend\u00eancias diferentes. Quando outra pessoa (ou voc\u00ea mesmo em outro computador) vai executar o seu projeto \u00e9 necess\u00e1rio executar uma s\u00e9rie de <code>pip install</code> com cada uma das depend\u00eancias. Para simplificar esse processo podemos criar o arquivo <code>requirements.txt</code>. Com esse arquivo basta executar <code>pip install -r requirements.txt</code> para instalar todas as depend\u00eancias do projeto. O Heroku tamb\u00e9m utiliza esse mesmo arquivo para configurar o seu projeto no servidor deles. O <code>requirements.txt</code> \u00e9 basicamente um arquivo texto com a lista das depend\u00eancias. Ele pode ser criado com o comando:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Importante</p> <p>Note que voc\u00ea dever\u00e1 executar o comando <code>pip install -r requirements.txt</code> com o ambiente virtual ativado. Ap\u00f3s rodar o comando verifique o arquivo <code>requirements.txt</code> que foi criado. Este arquivo deve possuir no m\u00e1ximo 10 linhas. Se esse arquivo possuir muito mais linhas \u00e9 poss\u00edvel que voc\u00ea n\u00e3o rodou com ambiente virtual ativo.</p>"},{"location":"aulas/heroku/#fazendo-o-deploy","title":"Fazendo o deploy","text":"<p>Agora estamos prontos para fazer o deploy! Fa\u00e7a um commit com todas essas modifica\u00e7\u00f5es e depois fa\u00e7a o push com o comando a seguir:</p> <pre><code>git push heroku master\n</code></pre> <p>Se o comando acima n\u00e3o funcionar</p> <p>Tente rodar o comando: <pre><code>git push heroku main\n</code></pre></p> <p>Esse processo \u00e9 um pouco demorado, pois o Heroku vai baixar o c\u00f3digo da sua aplica\u00e7\u00e3o, aplicar as configura\u00e7\u00f5es e executar o servidor. Depois disso existem duas possibilidades:</p> <ol> <li>Voc\u00ea estava usando o SQLite e agora sua aplica\u00e7\u00e3o est\u00e1 dispon\u00edvel no Heroku! Basta acessar o endere\u00e7o do seu app.</li> <li>Voc\u00ea estava usando o Postgres e ocorreu um erro parecido com esse:   <pre><code>remote: django.db.utils.OperationalError: could not connect to server: Connection refused\nremote:   Is the server running on host \"localhost\" (127.0.0.1) and accepting\nremote:   TCP/IP connections on port 5432?\n</code></pre></li> </ol> <p>Aplica\u00e7\u00f5es utilizando o SQLite</p> <p>Apesar de ser mais f\u00e1cil utilizar o SQLite, o Heroku pode apagar e subir uma nova inst\u00e2ncia da m\u00e1quina que roda o seu servidor a qualquer momento. Quando ele faz isso, o arquivo do banco de dados \u00e9 recriado e assim os seus dados s\u00e3o perdidos. Por esse motivo, o SQLite n\u00e3o deve ser utilizado em aplica\u00e7\u00f5es reais no Heroku.</p>"},{"location":"aulas/heroku/#aplicacoes-com-postgres","title":"Aplica\u00e7\u00f5es com Postgres","text":"<p>Agora que voc\u00ea fez o primeiro deploy (por mais que tenha ocorrido um erro) o Heroku identificou que voc\u00ea est\u00e1 publicando uma aplica\u00e7\u00e3o Django. Assim, ele j\u00e1 disponibiliza uma inst\u00e2ncia do Postgres para voc\u00ea! Acesse a sua aplica\u00e7\u00e3o no dashboard do Heroku e o Postgres deve aparecer nos add-ons instalados:</p> <p></p> <p>Uma op\u00e7\u00e3o \u00e9 acessar os dados de configura\u00e7\u00e3o desse banco e alterar manualmente o dicion\u00e1rio <code>DATABASES</code> nas configura\u00e7\u00f5es. Entretanto, isso faria com que o seu c\u00f3digo parasse de funcionar em desenvolvimento (no seu computador). Por isso, vamos utilizar o <code>dj-database-url</code>:</p> <pre><code>pip install dj-database-url\n</code></pre> <p>Sempre que voc\u00ea adiciona (ou remove) uma depend\u00eancia \u00e9 necess\u00e1rio atualizar o <code>requirements.txt</code>:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Adicione o <code>import</code> no <code>getit/settings.py</code>:</p> <pre><code>import dj_database_url\n</code></pre> <p>Depois substitua o dicion\u00e1rio <code>DATABASES</code> por (assumindo que voc\u00ea utilizou a configura\u00e7\u00e3o do Postgres apresentada no handout anterior - caso contr\u00e1rio, adapte a URL):</p> <pre><code>DATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://localhost/getit?user=getituser&amp;password=getitsenha',\n        conn_max_age=600,\n        ssl_require=not DEBUG\n    )\n}\n</code></pre> <p>Fa\u00e7a um novo commit e d\u00ea o push em <code>heroku master</code> novamente. Acesse sua aplica\u00e7\u00e3o para verificar que est\u00e1 tudo funcionando.</p> <p>Parab\u00e9ns, voc\u00ea acaba de publicar sua aplica\u00e7\u00e3o Django no Heroku e j\u00e1 pode compartilhar com todos os amigos e familiares!</p> <p></p>"},{"location":"aulas/heroku/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Deploying to Heroku Server | Django (3.0) Crash Course Tutorials (pt 23): https://www.youtube.com/watch?v=kBwhtEIXGII</li> <li>Deploy a Django App to Heroku: https://www.youtube.com/watch?v=GMbVzl_aLxM</li> <li>Heroku Postgres - connecting with Django: https://devcenter.heroku.com/articles/heroku-postgresql#connecting-with-django</li> <li>Heroku - Django migrations: https://help.heroku.com/GDQ74SU2/django-migrations</li> <li>Heroku - Working with Django: https://devcenter.heroku.com/categories/working-with-django</li> </ul>"},{"location":"aulas/0-persistencia/instalacao-mysql/","title":"MySQL Workbench: Instala\u00e7\u00e3o","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"aulas/0-persistencia/instalacao-mysql/#aviso","title":"AVISO:","text":"<p>Este guia serve para ajudar voc\u00eas a baixar e configurar o ambiente utilizado ao longo do semestre para MySQL. Para quest\u00f5es te\u00f3ricas relacionadas a Bancos de Dados Relacionais, consulte o outro material.</p> <p>Neste semestre do curso, utilizaremos o MySQL como banco de dados relacional para nossos estudos. Este guia serve para ajud\u00e1-los a baixar o MySQL Workbench e o Aiven, que ser\u00e1 nosso banco de dados em nuvem.</p> <p>Podemos iniciar tanto pelo Aiven quanto pelo MySQL Workbench; escolha por onde desejar come\u00e7ar.</p> <p>O tutorial est\u00e1 sendo feito em um Fedora Linux, podendo ser levemente diferente de acordo com o seu sistema operacional. Atenha-se a pequenos detalhes.</p>"},{"location":"aulas/0-persistencia/instalacao-mysql/#mysql-workbench","title":"MySQL Workbench","text":"<p>MySQL Workbench \u00e9 a plataforma de UI que utilizaremos para queries durante o semestre. O processo de instala\u00e7\u00e3o pode variar dependendo do seu sistema operacional, mas est\u00e1 todo documentado e guiado no site.</p> <ul> <li>Acesse o site oficial do MySQL Workbench (https://www.mysql.com/products/workbench/)</li> <li>Ao acessar o site, clique em \u201cDownload Now\u201d. Voc\u00ea ser\u00e1 redirecionado para uma p\u00e1gina de download.</li> <li> <p>Escolha o sistema operacional do seu computador e a vers\u00e3o correspondente, e baixe o respectivo pacote (em caso de d\u00favida, geralmente \u00e9 o primeiro):</p> <p></p> <p>IMPORTANTE: Usu\u00e1rios de Windows notar\u00e3o uma tela levemente diferente, oferecendo o MySQL Installer. Este pode ser utilizado, mas recomendo baixar primeiro o arquivo MSI Installer, oferecido logo abaixo.</p> </li> <li> <p>Ao clicar em Download, o site ir\u00e1 pedir para voc\u00ea realizar um login. Esta etapa \u00e9 desnecess\u00e1ria; basta clicar em \u201cNo, just start my download\u201d e ele ir\u00e1 baixar o arquivo.</p> <p></p> </li> <li> <p>Tendo o arquivo baixado, siga os passos de instala\u00e7\u00e3o defaults de seu sistema operacional:</p> <ul> <li>Windows: Execute o arquivo como administrador e siga os passsos</li> <li>Linux (Ubuntu): $ sudo apt-get install Downloads/nome do arquivo.rpm</li> <li>Linux (Fedora): $ sudo dnf install Downloads/nome do arquivo.rpm</li> </ul> </li> </ul> <p>Ap\u00f3s isso, o programa deve estar baixado em seu computador e funcionando normalmente. Tente abrir e ir\u00e1 se deparar com a tela inicial:</p> <p></p>"},{"location":"aulas/0-persistencia/instalacao-mysql/#aiven","title":"Aiven","text":"<p>Aiven ser\u00e1 a plataforma que utilizaremos para hospedar nosso banco de dados MySQL. Todos os passos de cria\u00e7\u00e3o de conta aqui demonstrados utilizam um e-mail tempor\u00e1rio descart\u00e1vel para o tutorial.</p> <p>UTILIZE SEU EMAIL E N\u00c3O PERCA O SEU BANCO DE DADOS</p> <ul> <li> <p>Acesse o site oficial do Aiven e crie sua conta (https://console.aiven.io/signup) ou fa\u00e7a login com seu GitHub.</p> <p></p> </li> <li> <p>Ap\u00f3s criar sua conta, prossiga para fazer login na plataforma. No seu primeiro login, ela pedir\u00e1 para selecionar se sua conta \u00e9 Pessoal ou Empresarial. Selecione Pessoal.</p> <p></p> </li> <li> <p>Ap\u00f3s essa etapa, voc\u00ea ser\u00e1 direcionado para um painel com v\u00e1rios servi\u00e7os dispon\u00edveis. Selecione a op\u00e7\u00e3o MySQL.</p> </li> <li> <p>Nas configura\u00e7\u00f5es do seu banco de dados, selecione o plano gratuito e configure seu banco da seguinte maneira:</p> <p></p> </li> <li> <p>Ap\u00f3s criar seu banco gratuito, ele ir\u00e1 te direcionar para uma tela de conex\u00f5es. Em seguida, baixe o MySQL Workbench, se ainda n\u00e3o o tiver, e prossiga para a etapa de conex\u00e3o.</p> </li> </ul>"},{"location":"aulas/0-persistencia/instalacao-mysql/#conectando","title":"Conectando","text":"<p>Ap\u00f3s criar seu banco de dados e baixar o MySQL Workbench, vamos realizar a conex\u00e3o entre as duas plataformas.</p> <ul> <li>Para isso, abra ambas em sua tela inicial (no caso do Aiven, abra a p\u00e1gina de vis\u00e3o geral do seu banco de dados)</li> <li> <p>No painel de vis\u00e3o geral do seu banco de dados no Aiven, voc\u00ea ter\u00e1 todas as informa\u00e7\u00f5es necess\u00e1rias para conectar ao banco, como na imagem abaixo.</p> <p></p> </li> <li> <p>Opcionalmente, voc\u00ea tamb\u00e9m pode clicar em Quick Connect para ver um passo a passo de como conectar ao banco de diversas maneiras. Selecione MySQL Workbench e siga os passos.</p> </li> <li>No seu workbench, clique no \u201c+\u201d em \u201cMySQL Connections\u201d para adicionar uma nova conex\u00e3o.</li> <li> <p>Na tela de nova conex\u00e3o, preencha os campos com as informa\u00e7\u00f5es do seu banco de dados (listadas no passo a passo do Quick Connect).</p> <p></p> </li> <li> <p>Ap\u00f3s preencher os campos, baixe o CA certificate no site do Aiven (veja o Quick Connect se precisar de ajuda) e fa\u00e7a o upload do CA certificate na aba SSL.</p> <p></p> </li> <li> <p>Ap\u00f3s isso, clique em \u201cTest Connection\u201d. Se funcionar, clique em Ok para criar a conex\u00e3o.</p> <p>AVISO: O Workbench provavelmente pedir\u00e1 uma senha para voc\u00ea; essa senha est\u00e1 na aba de vis\u00e3o geral do seu banco de dados. Tamb\u00e9m pode ser encontrada na aba Users do Aiven.</p> <p>Ap\u00f3s realizar a conex\u00e3o, se tudo der certo, voc\u00ea se deparar\u00e1 com esta tela. A partir daqui, siga as instru\u00e7\u00f5es do professor:</p> <p></p> </li> </ul>"},{"location":"aulas/0-persistencia/mysql-overview/","title":"MySQL - Overview","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/0-persistencia/mysql-overview/#mysql","title":"MySQL","text":"<p>A ideia deste material \u00e9 explicar como o Python, o MySQL na nuvem (usando Aiven), e o MySQL Workbench trabalham juntos para gerenciar os dados das nossas aplica\u00e7\u00f5es.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#o-python","title":"O Python","text":"<p>O c\u00f3digo que voc\u00eas est\u00e3o escrevendo em Python \u00e9 respons\u00e1vel por gerenciar a aplica\u00e7\u00e3o e se comunicar com o banco de dados. Quando escrevemos um c\u00f3digo para criar, ler, atualizar ou deletar dados (o famoso CRUD), o Python envia essas instru\u00e7\u00f5es para o banco de dados MySQL que est\u00e1 na nuvem, hospedado no Aiven.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#aiven","title":"Aiven","text":"<p>O Aiven \u00e9 o servi\u00e7o que est\u00e1 hospedando o MySQL na nuvem. Ele \u00e9 o \u201ccora\u00e7\u00e3o\u201d do nosso sistema de dados, onde tudo o que voc\u00eas manipulam atrav\u00e9s do c\u00f3digo \u00e9 realmente armazenado. Quando o Python faz uma requisi\u00e7\u00e3o, como \u201cadicionar um novo item\u201d, \u201cbuscar dados\u201d ou \u201catualizar um registro\u201d, essa requisi\u00e7\u00e3o vai para o MySQL que est\u00e1 na nuvem. O Aiven garante que o banco de dados est\u00e1 sempre dispon\u00edvel, seguro e funcionando corretamente. Isso facilita o acesso aos dados de qualquer lugar, j\u00e1 que est\u00e1 na nuvem.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#mysql-workbench","title":"MySQL Workbench","text":"<p>O MySQL Workbench \u00e9 a ferramenta gr\u00e1fica para visualizar e gerenciar o banco de dados. Pense nele como uma janela que nos permite ver o que est\u00e1 acontecendo dentro do MySQL que est\u00e1 na nuvem. Ele se conecta ao MySQL no Aiven e permite que voc\u00eas visualizem as tabelas, rodem queries, fa\u00e7am backups e at\u00e9 criem novas tabelas manualmente. Isso \u00e9 muito \u00fatil para ver se o que voc\u00eas programaram em Python realmente funcionou. Muitas vezes, o c\u00f3digo n\u00e3o d\u00e1 o feedback visual que a gente precisa. O Workbench permite ver os dados em tempo real e verificar se o que o Python fez est\u00e1 correto. Ele \u00e9 uma ferramenta de apoio essencial para garantir que o banco de dados est\u00e1 configurado e operando corretamente.</p> <p></p>"},{"location":"aulas/0-persistencia/mysql-overview/#como-tudo-funciona-junto","title":"Como Tudo Funciona Junto","text":"<p>O Python \u00e9 o nosso ponto de partida. Escrevemos o c\u00f3digo que manda as instru\u00e7\u00f5es para o banco de dados.</p> <p>O Aiven (MySQL Server) na nuvem \u00e9 quem recebe essas instru\u00e7\u00f5es e faz o trabalho de armazenar, atualizar e gerenciar os dados.</p> <p>O MySQL Workbench \u00e9 a nossa interface gr\u00e1fica, onde conseguimos visualizar tudo isso acontecendo, verificar se os dados foram corretamente inseridos ou atualizados e gerenciar o banco de dados de uma maneira mais amig\u00e1vel.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#porque-aprender-isso","title":"Porque aprender isso?","text":"<ul> <li>Entender a Comunica\u00e7\u00e3o Completa: Voc\u00eas precisam entender como o Python conversa com o banco de dados na nuvem e como o Workbench nos ajuda a visualizar e gerenciar esses dados.</li> <li>Identificar e Corrigir Erros: Muitas vezes, os erros de c\u00f3digo se refletem no banco de dados. Com o Workbench, conseguimos visualizar o que deu certo ou errado e ajustar nosso c\u00f3digo Python.</li> <li>Prepara\u00e7\u00e3o para o Mundo Real: Este fluxo \u00e9 muito comum em ambientes profissionais. Saber como cada pe\u00e7a funciona \u00e9 essencial para quem quer trabalhar com desenvolvimento de software, APIs e bancos de dados.</li> </ul>"},{"location":"aulas/0-persistencia/mysql-overview/#sobre-registros-tabelas-e-relacionamentos","title":"Sobre Registros, Tabelas e Relacionamentos\u2026","text":"<p>Para entender como o Python interage com o banco de dados e como o MySQL Workbench nos auxilia, \u00e9 importante compreender como os registros, tabelas e relacionamentos funcionam dentro do banco de dados MySQL. </p>"},{"location":"aulas/0-persistencia/mysql-overview/#registros-no-banco-de-dados","title":"Registros no Banco de Dados","text":"<p>Registros s\u00e3o as linhas de dados que est\u00e3o armazenadas em uma tabela dentro do banco de dados. Cada registro representa uma entrada \u00fanica, com valores espec\u00edficos para cada coluna da tabela. </p> <p>Exemplo: Em uma tabela de \"Usu\u00e1rios\", cada linha (registro) poderia representar um usu\u00e1rio espec\u00edfico, contendo colunas como ID, Nome, E-mail, e Idade.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-usuarios","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email Idade 1 Alice alice@example.com 30 2 Bob bob@example.com 25 <p>Os registros s\u00e3o manipulados usando comandos SQL (ex: <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>) que o Python envia para o banco de dados. Esses comandos permitem adicionar novos registros, buscar informa\u00e7\u00f5es, atualizar dados existentes e remover registros.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tabelas-no-banco-de-dados","title":"Tabelas no Banco de Dados","text":"<p>Tabelas s\u00e3o a estrutura b\u00e1sica de armazenamento no banco de dados. Cada tabela armazena um conjunto de registros que compartilham a mesma estrutura (colunas).</p>"},{"location":"aulas/0-persistencia/mysql-overview/#relacionamentos-entre-tabelas","title":"Relacionamentos Entre Tabelas","text":"<p>Relacionamentos definem como as tabelas se conectam entre si. Isso \u00e9 importante para criar um banco de dados relacional onde as informa\u00e7\u00f5es devem ser ligadas e acessadas de forma eficiente.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tipos-de-relacionamentos","title":"Tipos de Relacionamentos:","text":"<p>Relacionamento 1:1 (Um para Um): Cada registro em uma tabela est\u00e1 associado a um e apenas um registro em outra tabela.</p> <p>Exemplo: Imagine duas tabelas, Usu\u00e1rios e Perfis, conectadas por uma linha direta entre dois registros. Cada Usu\u00e1rio tem um Perfil associado, e vice-versa</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-usuarios_1","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email 1 Alice alice@example.com"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-perfis","title":"Tabela de Perfis","text":"ID Foto Bio 1 foto1.jpg \"Developer\" <p>Relacionamento: Cada usu\u00e1rio tem um perfil exclusivo. </p> <p>Relacionamento 1:N (Um para Muitos)</p> <p>Um registro em uma tabela est\u00e1 associado a muitos registros em outra tabela, mas os registros na segunda tabela est\u00e3o associados a apenas um registro na primeira.</p> <p>Exemplo: Um \"Usu\u00e1rio\" pode ter muitos \"Pedidos\". Aqui, a tabela de \u201cUsu\u00e1rios\u201d tem um relacionamento 1:N com a tabela de \u201cPedidos\u201d. O relacionamento \u00e9 geralmente implementado adicionando uma chave estrangeira na tabela dos \u201cPedidos\u201d que aponta para o \u201cID do Usu\u00e1rio\u201d.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-usuarios_2","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email 1 Alice alice@example.com"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-pedidos","title":"Tabela de Pedidos","text":"ID Produto Data Usuario_ID 1 Laptop 2023-01-15 1 2 Mouse 2023-01-20 1 <p>Relacionamento: O usu\u00e1rio \"Alice\" (ID 1) fez dois pedidos (Laptop e Mouse). </p> <p>Relacionamento N:M (Muitos para Muitos)</p> <p>Muitos registros em uma tabela est\u00e3o associados a muitos registros em outra tabela.</p> <p>Exemplo: Uma tabela \u201cAlunos\u201d e uma tabela \u201cCursos\u201d podem ter um relacionamento N:M, onde um aluno pode estar inscrito em v\u00e1rios cursos e cada curso pode ter muitos alunos inscritos. Esse tipo de relacionamento geralmente requer uma tabela intermedi\u00e1ria (ex: \u201cInscri\u00e7\u00f5es\u201d) para armazenar as chaves estrangeiras de ambas as tabelas.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-alunos","title":"Tabela de Alunos","text":"ID Nome Email 1 Alice alice@example.com 2 Bob bob@example.com"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-de-cursos","title":"Tabela de Cursos","text":"ID Nome Curso 101 Python 102 SQL 103 Design"},{"location":"aulas/0-persistencia/mysql-overview/#tabela-intermediaria-inscricoes","title":"Tabela Intermedi\u00e1ria (Inscri\u00e7\u00f5es)","text":"Aluno_ID Curso_ID Nota 1 101 A 1 102 B+ 2 103 A- <p>Relacionamento: A tabela de Inscri\u00e7\u00f5es conecta alunos a cursos, criando um relacionamento N:M. </p>"},{"location":"aulas/0-persistencia/mysql-overview/#e-o-mysql-workbench","title":"E o MySQL Workbench?","text":"<p>No MySQL Workbench, voc\u00eas podem visualizar todas as tabelas do banco de dados e ver como elas est\u00e3o conectadas. Ele oferece ferramentas visuais para criar e ajustar esses relacionamentos de maneira gr\u00e1fica. Atrav\u00e9s do Workbench, \u00e9 poss\u00edvel criar chaves prim\u00e1rias e estrangeiras que estabelecem essas conex\u00f5es entre tabelas, garantindo a integridade dos dados e a correta estrutura\u00e7\u00e3o das informa\u00e7\u00f5es.</p>"},{"location":"aulas/0-persistencia/mysql-overview/#por-que-isso-e-importante","title":"Por que isso \u00e9 importante?","text":"<ul> <li>Organiza\u00e7\u00e3o de Dados: Relacionamentos permitem que os dados sejam organizados de forma l\u00f3gica e estruturada, o que facilita a recupera\u00e7\u00e3o de informa\u00e7\u00f5es complexas.</li> <li>Efici\u00eancia e Consist\u00eancia: Usar relacionamentos evita a duplica\u00e7\u00e3o de dados e mant\u00e9m o banco de dados consistente, o que \u00e9 crucial para opera\u00e7\u00f5es complexas e integridade dos dados.</li> <li>Facilita a Programa\u00e7\u00e3o: Com um banco de dados bem estruturado, o c\u00f3digo Python se torna mais simples e eficiente, pois voc\u00eas podem buscar e manipular os dados com menos esfor\u00e7o e de maneira mais intuitiva.</li> </ul>"},{"location":"aulas/01-getit/parte0/","title":"01 - Get-it - O retorno","text":"<p>Quando estamos iniciando nossa jornada na programa\u00e7\u00e3o, \u00e9 comum desejar escrever c\u00f3digo imediatamente. No entanto, para que possamos programar de forma eficaz, \u00e9 fundamental dominar as ferramentas que ser\u00e3o a base para qualquer projeto: o uso do terminal e o Git/GitHub. Essas tecnologias n\u00e3o s\u00e3o apenas auxiliares; elas s\u00e3o essenciais para o trabalho de qualquer desenvolvedor.</p> <p>O terminal \u00e9 a interface que permite interagir diretamente com o sistema operacional, executando comandos de maneira eficiente e automatizada. Ele possibilita criar e gerenciar arquivos, configurar ambientes de desenvolvimento e executar scripts, atividades comuns no dia a dia de um programador. Aprender a utiliz\u00e1-lo proporciona maior controle e produtividade, permitindo lidar com tarefas que muitas vezes n\u00e3o s\u00e3o poss\u00edveis (ou s\u00e3o mais lentas) usando interfaces gr\u00e1ficas.</p> <p>J\u00e1 o Git e o GitHub s\u00e3o ferramentas que revolucionaram a maneira como o c\u00f3digo \u00e9 gerenciado e compartilhado. Com essas ferramentas, voc\u00ea aprender\u00e1 a organizar seu c\u00f3digo, evitar perdas de progresso e trabalhar de forma colaborativa.</p> <p>Compreender o terminal e o Git/GitHub antes de escrever c\u00f3digo n\u00e3o s\u00f3 constr\u00f3i uma base s\u00f3lida para o desenvolvimento, mas tamb\u00e9m prepara voc\u00ea para pr\u00e1ticas reais do mercado. Sem essas habilidades, mesmo projetos simples podem se tornar desorganizados e dif\u00edceis de gerenciar. Assim, aprender essas ferramentas no in\u00edcio da sua jornada garante que voc\u00ea progrida com mais confian\u00e7a e efici\u00eancia.</p>"},{"location":"aulas/01-getit/parte0/#parte-1-comandos-de-terminal","title":"Parte 1: Comandos de Terminal","text":"<p>Na disciplina de Programa\u00e7\u00e3o Eficaz precisaremos utilizar v\u00e1rias bibliotecas que n\u00e3o possuem interfaces gr\u00e1ficas. Tanto para realizar a instala\u00e7\u00e3o quanto para executar essas bibliotecas, ser\u00e1 necess\u00e1rio utilizar bastante o terminal. Por isso, \u00e9 importante que voc\u00ea se sinta confort\u00e1vel com ele. Para que isso aconte\u00e7a, acesse o link abaixo e leia o material antes de prosseguir.</p> <p>Ferramentas B\u00e1sicas: Terminal</p>"},{"location":"aulas/01-getit/parte0/#parte-2-git-e-github","title":"Parte 2: Git e GitHub","text":"<p>O Git e o GitHub s\u00e3o ferramentas j\u00e1 conhecidas que foram bastante usadas em Developer Life. Aqui em Programa\u00e7\u00e3o Eficaz, vamos aprofundar um pouco mais no uso dessas ferramentas. Como um dos nossos objetivos \u00e9 aprender a usar o terminal, podemos aproveitar a oportunidade para aprender a usar o Git pelo terminal. Para isso, acesse o link abaixo e leia o material antes de prosseguir.</p> <p>Ferramentas B\u00e1sicas: Git</p>"},{"location":"aulas/01-getit/parte0/#parte-3-primeira-atividade","title":"Parte 3: Primeira atividade","text":"<p>Agora que voc\u00ea j\u00e1 leu os materiais sobre o terminal e o Git, \u00e9 hora de colocar em pr\u00e1tica o que aprendeu. Para isso, siga os passos abaixo:</p> <ol> <li>Abra o terminal e crie uma pasta chamada <code>programacao-eficaz</code> em alguma pasta de sua prefer\u00eancia.</li> <li>Acesse o site do GitHub Classroom e crie o reposit\u00f3rio.</li> <li>Clone o reposit\u00f3rio para a pasta <code>programacao-eficaz</code> que voc\u00ea criou no passo 1 utilizando o terminal.</li> <li>Crie um ambiente virtual chamado <code>env</code> dentro da pasta do reposit\u00f3rio utilizando o terminal.</li> </ol> <p>Se voc\u00ea n\u00e3o souber o que \u00e9 um ambiente virtual ou como cri\u00e1-lo via terminal, leia o material dispon\u00edvel abaixo:</p> <p>Ferramentas B\u00e1sicas: Ambientes Virtuais</p>"},{"location":"aulas/01-getit/parte0/#parte-1","title":"Parte 1:","text":"<p>Agora que temos as ferramentas certas, podemos seguir para a parte 1 deste handout.</p>"},{"location":"aulas/01-getit/parte1/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte1/#parte-1-criando-o-servidor","title":"Parte 1: Criando o servidor","text":"<p>Vamos come\u00e7ar nosso curso com um exemplo de implementa\u00e7\u00e3o de uma p\u00e1gina bem simples. Durante o desenvolvimento discutiremos alguns dos detalhes e conceitos envolvidos. O objetivo deste handout \u00e9 introduzir alguns conceitos de Programa\u00e7\u00e3o Eficaz que ser\u00e3o importantes ao longo do curso a partir de uma abordagem m\u00e3o na massa.</p> <p>Ap\u00f3s o final deste handout voc\u00ea ter\u00e1 um prot\u00f3tipo do Get-it, nosso conhecido sistema de bloco de notas feito utilizando uma nova tecnologia.</p>"},{"location":"aulas/01-getit/parte1/#comecando-pelo-comeco","title":"Come\u00e7ando pelo come\u00e7o","text":"<p>Lembra que semestre passado n\u00f3s aprendemos sobre os diferentes tipos de teste de software? Vamos come\u00e7ar definindo uma hist\u00f3ria de usu\u00e1rio. O objetivo n\u00e3o \u00e9 fazer uma revis\u00e3o de Design, ent\u00e3o vamos assumir que temos uma persona pronta e o seu nome \u00e9 F\u00e1bio:</p> <p>Lista de anota\u00e7\u00f5es</p> <p>SENDO o F\u00e1bio</p> <p>POSSO digitar o endere\u00e7o do Get-it no navegador e visualizar a lista de anota\u00e7\u00f5es</p> <p>PARA lembrar os detalhes da minha pr\u00f3xima tarefa</p> <p>Muito bem. Agora podemos come\u00e7ar a desenvolver o nosso prot\u00f3tipo.</p> <p>Isso nos leva \u00e0 primeira pergunta: ok, o F\u00e1bio vai digitar o endere\u00e7o no navegador e apertar Enter, mas o que acontece depois disso?</p> <p>MUITA coisa. Vamos come\u00e7ar com uma explica\u00e7\u00e3o bastante simplista, mas que deve dar uma ideia geral dos passos. Se voc\u00ea tiver curiosidade, a Mozilla possui um material muito did\u00e1tico para quem est\u00e1 iniciando no desenvolvimento web.</p> <ol> <li>O navegador precisa dos dados da p\u00e1gina a ser mostrada, mas a informa\u00e7\u00e3o est\u00e1 em outro computador, o servidor, que est\u00e1 (muito provavelmente) fisicamente distante. Por isso, o endere\u00e7o digitado no navegador \u00e9 utilizado para encontrar a localiza\u00e7\u00e3o do servidor utilizando o DNS.</li> <li>Agora que o cliente (o computador do F\u00e1bio) sabe onde encontrar o servidor, ele entra em contato com o servidor pedindo os dados. Esse pedido \u00e9 o que chamamos de requisi\u00e7\u00e3o.</li> <li>Ao receber a requisi\u00e7\u00e3o, o servidor responde com a p\u00e1gina solicitada.</li> <li>O navegador recebe as partes que formam a p\u00e1gina (HTML, CSS, Javascript, imagens, etc.) e mostra (renderiza) para o F\u00e1bio.</li> </ol> <p>Essa \u00e9 uma lista bastante simplificada do que acontece, mas talvez esse \u00faltimo passo tenha sido simplificado demais. Cada parte que forma a p\u00e1gina (os arquivos CSS, Javascript, imagens, etc.) deve ser solicitada separadamente para o servidor. Ent\u00e3o os passos 1 a 3 s\u00e3o repetidos para cada uma delas.</p>"},{"location":"aulas/01-getit/parte1/#voce-disse-que-seria-mao-na-massa-mas-ainda-nao-toquei-no-codigo","title":"Voc\u00ea disse que seria m\u00e3o na massa, mas ainda n\u00e3o toquei no c\u00f3digo!","text":"<p>Eu sei, me desculpe. Agora sim, vamos come\u00e7ar!</p> <p>Vamos implementar um servidor bastante simplificado utilizando a biblioteca Flask. Para isso, crie dentro da pasta do seu reposit\u00f3rio criada anteriormente um arquivo chamado <code>servidor.py</code> (pode ser o nome que voc\u00ea preferir) com o seguinte conte\u00fado:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return \"\"\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Antes de tentarmos entender o c\u00f3digo, execute-o para vermos o que ele faz. Para isso, abra um terminal, ative o ambiente virtual e execute o arquivo <code>servidor.py</code>:</p> <pre><code>python servidor.py\n</code></pre> <p>Voc\u00ea deve ver uma mensagem parecida com esta:</p> <pre><code>ModuleNotFoundError: No module named 'flask'\n</code></pre> <p>O erro ocorreu porque o Flask n\u00e3o est\u00e1 instalado no seu ambiente virtual. Para corrigir isso, instale o Flask utilizando o <code>pip</code>:</p> <pre><code>pip install flask\n</code></pre> <p>Agora sim, execute o servidor novamente. Se tudo ocorrer bem, voc\u00ea ver\u00e1 uma mensagem parecida com esta:</p> <pre><code>WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 100-429-768\n</code></pre> <p>Essa mensagem indica que o servidor est\u00e1 rodando e pronto para receber requisi\u00e7\u00f5es.</p> <p>Abra o navegador de sua prefer\u00eancia e entre no endere\u00e7o apresentado pelo seu programa. No exemplo acima, o endere\u00e7o \u00e9 <code>http://127.0.0.1:5000</code></p> <p>Aten\u00e7\u00e3o</p> <p>Alguns navegadores podem n\u00e3o funcionar como esperado. Desta forma, teste em outros navegadores.</p> <p>Voc\u00ea deve estar vendo uma p\u00e1gina em branco. Se n\u00e3o estiver, tente acessar o endere\u00e7o a partir de outro navegador. Se mesmo assim n\u00e3o funcionar, verifique se o servidor est\u00e1 rodando e se o endere\u00e7o est\u00e1 correto.</p>"},{"location":"aulas/01-getit/parte1/#muito-bem-agora-vamos-entender-o-codigo-acima","title":"Muito bem, agora vamos entender o c\u00f3digo acima","text":"<p>Flask \u00e9 um microframework web escrito em Python, projetado para ser leve, flex\u00edvel e f\u00e1cil de usar. Ele \u00e9 amplamente utilizado para desenvolver aplica\u00e7\u00f5es web, permitindo que os desenvolvedores construam projetos de forma r\u00e1pida e eficiente. \u00c9 poss\u00edvel ver nele algumas caracter\u00edsticas que vimos no Django, mas de forma mais simplificada.</p> <ul> <li> <p><code>app = Flask(__name__)</code> cria uma inst\u00e2ncia da classe Flask, que ser\u00e1 a base da aplica\u00e7\u00e3o. O argumento <code>__name__</code> \u00e9 uma vari\u00e1vel pr\u00e9-definida em Python que cont\u00e9m o nome do m\u00f3dulo atual. Flask usa o nome do m\u00f3dulo para determinar a localiza\u00e7\u00e3o dos arquivos est\u00e1ticos (como imagens e arquivos html).</p> </li> <li> <p><code>@app.route('/')</code>: Define a rota principal da aplica\u00e7\u00e3o, ou seja, o que acontece quando voc\u00ea acessa <code>http://127.0.0.1:5000/</code> no navegador. A fun\u00e7\u00e3o logo abaixo \u00e9 chamada toda vez que algu\u00e9m acessa essa rota.</p> </li> <li><code>print(request.method)</code>: Exibe no terminal o m\u00e9todo HTTP usado na requisi\u00e7\u00e3o, como GET, POST, etc.</li> <li><code>print(request.headers)</code>: Exibe no terminal todos os cabe\u00e7alhos da requisi\u00e7\u00e3o HTTP, que incluem informa\u00e7\u00f5es como o tipo de navegador, o tipo de conte\u00fado aceito e outras configura\u00e7\u00f5es do cliente.</li> <li><code>return \"\"</code>: Retorna uma resposta vazia para o cliente, ou seja, n\u00e3o renderiza nada no navegador.</li> </ul> <p>O restante do c\u00f3digo inicia o servidor Flask e habilita o modo de depura\u00e7\u00e3o (debug mode), que recarrega automaticamente o servidor ao modificar o c\u00f3digo e exibe mensagens detalhadas de erro no navegador, \u00fateis para desenvolvimento.</p>"},{"location":"aulas/01-getit/parte1/#entendi-mas-entao-como-eu-faco-algo-aparecer-no-navegador","title":"Entendi, mas ent\u00e3o como eu fa\u00e7o algo aparecer no navegador?","text":"<p>Calma, pequeno gafanhoto. Antes de prosseguir, vamos entender mais alguns detalhes do que aconteceu at\u00e9 o momento.</p> <p>Quando acessamos o endere\u00e7o <code>http://127.0.0.1:5000/</code> no navegador, o navegador enviou uma requisi\u00e7\u00e3o para o servidor. O servidor recebeu essa requisi\u00e7\u00e3o e identificou qual a rota requisitada. No nosso caso, a rota requisitada foi a raiz do servidor, ou seja, a rota <code>/</code>. O servidor ent\u00e3o executou a fun\u00e7\u00e3o associada a essa rota e retornou uma resposta vazia.</p> <p>Dentro da fun\u00e7\u00e3o associada \u00e0 rota <code>/</code>, existem dois prints. O primeiro printa o m\u00e9todo HTTP utilizado na requisi\u00e7\u00e3o, que no nosso caso \u00e9 o m\u00e9todo GET. O segundo printa os cabe\u00e7alhos da requisi\u00e7\u00e3o, que cont\u00e9m informa\u00e7\u00f5es como o tipo de navegador, o tipo de conte\u00fado aceito e outras configura\u00e7\u00f5es do cliente. Toda vez que um navegador quer se comunicar com um servidor, ele envia uma requisi\u00e7\u00e3o HTTP contendo essas informa\u00e7\u00f5es.</p> <p>O seu terminal deve ter mostrado uma sa\u00edda parecida com esta (testei nos dispositivos que eu tinha dispon\u00edveis no momento):</p> MacOS - SafariMacOS - FirefoxAndroid - Chrome <pre><code>GET / HTTP/1.1\nHost: 0.0.0.0:8080\nUpgrade-Insecure-Requests: 1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\n</code></pre> <pre><code>GET / HTTP/1.1\nHost: localhost:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:83.0) Gecko/20100101 Firefox/83.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nCookie: _ga=GA1.1.16347193.1542986176\nUpgrade-Insecure-Requests: 1\n</code></pre> <pre><code>GET / HTTP/1.1\nHost: 192.168.15.14:8080\nConnection: keep-alive\nSave-Data: on\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 11; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\n</code></pre> <p>Sugiro que voc\u00ea tamb\u00e9m tente acessar o mesmo endere\u00e7o a partir de navegadores e dispositivos diferentes. Caso voc\u00ea queira testar o acesso de um dispositivo diferente voc\u00ea vai precisar descobrir o IP do servidor.</p> <p>Nos testes acima eu acessei o servidor a partir do Android e, no meu laptop, do Firefox e do Safari. \u00c9 importante notar que cada um desses navegadores foi desenvolvido por empresas diferentes, no caso, Google, Mozilla e Apple. Mas ent\u00e3o como todos eles conseguem se comunicar com o nosso servidor? \u00c9 a\u00ed que entra o tal do HTTP.</p> <p>Os 3 exemplos mostrados acima s\u00e3o muito semelhantes, apesar de virem de fabricantes diferentes. Isso acontece porque todos eles seguem o mesmo protocolo, o Hyper Text Transfer Protocol. O que precisamos saber por enquanto \u00e9 que ele define como devem ser as requisi\u00e7\u00f5es e respostas nessa comunica\u00e7\u00e3o. Como o HTTP \u00e9 padronizado, se o seu servidor souber se comunicar em HTTP ele poder\u00e1 se comunicar com qualquer navegador, independente das implementa\u00e7\u00f5es espec\u00edficas.</p> <p>Nos exemplos n\u00f3s podemos ver que o texto \u00e9 enviado em um formato parecido com um dicion\u00e1rio: chaves, dois pontos e os valores. Esse conjunto de chaves e valores \u00e9 o cabe\u00e7alho (header) da requisi\u00e7\u00e3o (request) ou resposta (response). Como sempre, incentivo que voc\u00ea procure por conta pr\u00f3pria mais detalhes sobre esse protocolo. Essa \u00e9 apenas uma breve introdu\u00e7\u00e3o.</p> <p>Question</p> <p>Considere o texto a seguir:</p> <pre><code>GET / HTTP/1.1\nHost: 192.168.15.14:8080\nConnection: keep-alive\nSave-Data: on\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 11; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\n</code></pre> <p>Escolha o op\u00e7\u00e3o verdadeira:</p> <ul> <li> O texto representa um Servidor de Nome de Dom\u00ednio.</li> <li> O texto representa uma resposta HTTP.</li> <li> O texto representa uma requisi\u00e7\u00e3o HTTP.</li> <li> O texto representa os dados enviados pelo Cliente.</li> </ul> <p>Resposta</p> <p>O texto representa uma requisi\u00e7\u00e3o HTTP. Para mais detalhes veja (request). </p>"},{"location":"aulas/01-getit/parte1/#e-agora-ja-podemos-enviar-a-resposta","title":"E agora, j\u00e1 podemos enviar a resposta?","text":"<p>Sim! Agora estamos prontos. Sem mais delongas, altere a seguinte linha no seu c\u00f3digo:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return 'Hello World'\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Acesse novamente a p\u00e1gina pelo seu navegador. Pronto, nosso primeiro servidor est\u00e1 funcionando e retornando uma resposta!</p> <p>Importante</p> <p>Servidores s\u00e3o como programas em loop infinito. Se quiser parar de rodar, basta encerrar o programa com Ctrl+C.</p> <p>Agora \u00e9 s\u00f3 seguir para a parte 2 deste handout.</p>"},{"location":"aulas/01-getit/parte2/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte2/#parte-2-respondendo-com-paginas-html","title":"Parte 2: Respondendo com p\u00e1ginas HTML","text":"<p>Nosso servidor j\u00e1 responde com <code>Hello World</code>, mas queremos muito mais que isso. Queremos implementar o nosso Get-it e para isso a p\u00e1gina precisa ter muito mais conte\u00fado e precisa ser apresentado de maneira estruturada. Est\u00e1 na hora de trazermos o bom e velho HTML de volta!</p> <p>Vamos devolver uma p\u00e1gina HTML simples, apenas para relembrar as coisas:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Get-it&lt;/h1&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return RESPONSE_TEMPLATE\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Testou? Funcionou? Podemos ir para o pr\u00f3ximo passo.</p>"},{"location":"aulas/01-getit/parte2/#mostrando-a-lista-de-anotacoes","title":"Mostrando a lista de anota\u00e7\u00f5es","text":"<p>Podemos come\u00e7ar a pensar no conte\u00fado da nossa p\u00e1gina principal. Vamos come\u00e7ar mostrando uma lista simples com os t\u00edtulos e detalhes das anota\u00e7\u00f5es. Voc\u00ea vai precisar baixar a seguinte imagem clicando neste link. Atrav\u00e9s do terminal, crie uma pasta chamada <code>static</code>. Dentro desta pasta, crie outra pasta chamada <code>img</code>. Salve essa imagem dentro da pasta <code>img</code>. Ou seja, o conte\u00fado do seu reposit\u00f3rio ser\u00e1:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- static\n    |- img\n      |- logo-getit.png\n</code></pre> <p>Para a lista de anota\u00e7\u00f5es vamos utilizar as tags HTML unordered list (<code>&lt;ul&gt;</code>), list item (<code>&lt;li&gt;</code>), heading (<code>&lt;h3&gt;</code>) e paragraph (<code>&lt;p&gt;</code>). Al\u00e9m disso, vamos mostrar uma imagem com o logo ao inv\u00e9s de um texto com o t\u00edtulo:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"img/logo-getit.png\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Receita de miojo&lt;/h3&gt;\n    &lt;p&gt;Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;P\u00e3o doce&lt;/h3&gt;\n    &lt;p&gt;Abra o p\u00e3o e coloque o seu suco em p\u00f3 favorito.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Sorvete com cristais de leite&lt;/h3&gt;\n    &lt;p&gt;Sirva o seu sorvete favorito em uma vasilha e jogue leite em cima.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Iogurte natural&lt;/h3&gt;\n    &lt;p&gt;Deixe o leite fora da geladeira (esse \u00e9 mentira, n\u00e3o fa\u00e7a isso).&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Homer Simpson&lt;/h3&gt;\n    &lt;p&gt;~( 8(|)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Numero m\u00e1gico&lt;/h3&gt;\n    &lt;p&gt;142857&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;S\u00e9rie da Funda\u00e7\u00e3o - Isaac Asimov&lt;/h3&gt;\n    &lt;p&gt;\u00c9 boa, leia.&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return RESPONSE_TEMPLATE\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Se voc\u00ea rodou o c\u00f3digo acima deve ter percebido que algo deu errado. Voc\u00ea n\u00e3o achou que seria t\u00e3o simples assim, n\u00e3o \u00e9 mesmo?</p> <p>O arquivo da imagem do logo existe no seu computador (ou deveria existir - caso contr\u00e1rio, n\u00e3o se esque\u00e7a de baixar as imagens), mas o servidor precisa enviar esses arquivos como resposta quando forem solicitados.</p>"},{"location":"aulas/01-getit/parte2/#diferenciando-rotas","title":"Diferenciando rotas","text":"<p>Temos que implementar algumas coisas, mas vamos por partes. Verifique a sa\u00edda no seu terminal. Voc\u00ea deve encontrar algo assim:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET /img/logo-getit.png HTTP/1.1\" 404 -\n127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET /favicon.ico HTTP/1.1\" 404 -\n</code></pre> <p>Quando o navegador acessa a p\u00e1gina, ele faz uma requisi\u00e7\u00e3o para <code>/</code>. Esta requis\u00e7\u00e3o \u00e9 respondida com a p\u00e1gina HTML que criamos. Dentro desse HTML, temos um link para a imagem do logo. O navegador ent\u00e3o faz uma nova requisi\u00e7\u00e3o para <code>/img/logo-getit.png</code>. Como somente definimos uma resposta para <code>/</code>, o servidor responde com um erro 404, que \u00e9  o c\u00f3digo HTTP para \"n\u00e3o encontrado\".</p> <p>Altere novamente o c\u00f3digo do seu servidor para:</p> <pre><code>from flask import Flask, render_template_string, url_for\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"{{ url_for('static', filename='img/logo-getit.png') }}\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Receita de miojo&lt;/h3&gt;\n    &lt;p&gt;Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;P\u00e3o doce&lt;/h3&gt;\n    &lt;p&gt;Abra o p\u00e3o e coloque o seu suco em p\u00f3 favorito.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Sorvete com cristais de leite&lt;/h3&gt;\n    &lt;p&gt;Sirva o seu sorvete favorito em uma vasilha e jogue leite em cima.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Iogurte natural&lt;/h3&gt;\n    &lt;p&gt;Deixe o leite fora da geladeira (esse \u00e9 mentira, n\u00e3o fa\u00e7a isso).&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Homer Simpson&lt;/h3&gt;\n    &lt;p&gt;~( 8(|)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Numero m\u00e1gico&lt;/h3&gt;\n    &lt;p&gt;142857&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;S\u00e9rie da Funda\u00e7\u00e3o - Isaac Asimov&lt;/h3&gt;\n    &lt;p&gt;\u00c9 boa, leia.&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    # print(request.method)\n    # print(request.headers)\n\n    return render_template_string(RESPONSE_TEMPLATE)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>O comando <code>{{ url_for('static', filename='img/logo-getit.png') }}</code> \u00e9 uma fun\u00e7\u00e3o do Flask que gera a URL para um arquivo est\u00e1tico. O Flask sabe que os arquivos est\u00e1ticos est\u00e3o no diret\u00f3rio <code>static</code> e que o arquivo <code>logo-getit.png</code> est\u00e1 dentro do diret\u00f3rio <code>img</code>. O Flask vai gerar a URL correta para o arquivo, independente de onde o servidor estiver rodando. Agora, quando o servidor receber uma requisi\u00e7\u00e3o para <code>/img/logo-getit.png</code>, ele vai procurar o arquivo no diret\u00f3rio <code>static/img</code> e enviar o conte\u00fado do arquivo como resposta. Se o arquivo n\u00e3o for encontrado, o servidor vai responder com um erro 404.</p> <p>Depois de atualizar o c\u00f3digo, o servidor deve funcionar corretamente, mostrando a imagem. Sim, est\u00e1 feio, mas n\u00f3s resolvemos isso no pr\u00f3ximo handout. Por enquanto vai ficar assim mesmo.</p> <p>As p\u00e1ginas de detalhes ainda n\u00e3o est\u00e3o prontas, mas antes disso precisamos refatorar o c\u00f3digo porque ele j\u00e1 est\u00e1 acumulando muitas responsabilidades. Depois de se hidratar e fazer um alongamento, siga para a parte 3 do handout.</p>"},{"location":"aulas/01-getit/parte3/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte3/#parte-3-separando-algumas-responsabilidades","title":"Parte 3: Separando algumas responsabilidades","text":"<p>O nosso c\u00f3digo j\u00e1 est\u00e1 ficando grande e ele n\u00e3o faz quase nada! Um dos motivos para isso \u00e9 a falta de coes\u00e3o desse arquivo: esse arquivo possui a string HTML da p\u00e1gina, que por sua vez cont\u00e9m todos os dados das anota\u00e7\u00f5es dispon\u00edveis, al\u00e9m do c\u00f3digo que trata as conex\u00f5es, requisi\u00e7\u00f5es e respostas. Imagine o que aconteceria com uma quantidade razo\u00e1vel de anota\u00e7\u00f5es!</p> <p>Essas tr\u00eas responsabilidades acumuladas no mesmo arquivo est\u00e3o relacionadas a um conceito chamado Model, View, Controller (MVC). Voc\u00eas tiveram um breve contato com esse conceito semestre passado, mas n\u00f3s discutiremos mais a respeito em um futuro pr\u00f3ximo.</p>"},{"location":"aulas/01-getit/parte3/#modelo","title":"Modelo","text":"<p>Vamos come\u00e7ar separando a responsabilidade do modelo (lista de anota\u00e7\u00f5es) da responsabilidade de visualiza\u00e7\u00e3o (string HTML). Para isso, vamos criar uma lista de dicion\u00e1rios que cont\u00e9m os dados das anota\u00e7\u00f5es e a string HTML ser\u00e1 gerada dinamicamente a partir desses dados:</p> <pre><code>from flask import Flask, render_template_string, url_for\nfrom utils import load_data\n\n\napp = Flask(__name__)\n\nNOTE_TEMPLATE = '''  &lt;li&gt;\n    &lt;h3&gt;{title}&lt;/h3&gt;\n    &lt;p&gt;{details}&lt;/p&gt;\n  &lt;/li&gt;\n'''\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"{{{{ url_for('static', filename='img/logo-getit.png') }}}}\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n{notes}\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    notes_li = [\n        NOTE_TEMPLATE.format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    response = RESPONSE_TEMPLATE.format(notes=notes)\n\n    return render_template_string(response)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Voc\u00ea tamb\u00e9m vai precisar do arquivo <code>notes.json</code> (clique aqui para baixar). Coloque-o em uma pasta chamada <code>data</code> dentro da pasta <code>static</code>.:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- static\n    |- data\n      |- notes.json\n    |- img\n      |- logo-getit.png\n</code></pre> <p>EXERC\u00cdCIO</p> <p>Crie um arquivo <code>utils.py</code> e implemente a fun\u00e7\u00e3o <code>load_data</code>, que recebe o nome de um arquivo JSON e devolve o conte\u00fado do arquivo carregado como um objeto Python (A fun\u00e7\u00e3o deve assumir que este arquivo JSON est\u00e1 localizado dentro da pasta <code>static/data</code>). Por exemplo: se o conte\u00fado do arquivo <code>static/data/dados.json</code> for a string <code>{\"chave\": \"valor\"}</code>, sua fun\u00e7\u00e3o deve devolver o dicion\u00e1rio Python <code>{\"chave\": \"valor\"}</code> para a entrada <code>dados.json</code> (note que o nome da pasta n\u00e3o \u00e9 enviado como argumento). Dica: j\u00e1 existe uma fun\u00e7\u00e3o Python para isso.</p> <p>Question</p> <p>No c\u00f3digo anterior, estamos utilizando formata\u00e7\u00e3o de <code>string</code> um pouco diferente do que aprendemos em DevLife.</p> <p>Vamos ver como utilizar o m\u00e9todo <code>.format</code> Considere o c\u00f3digo a seguir:</p> <pre><code>x = 3\ny = 4\nz = x * y\ntexto = 'O ret\u00e2ngulo de lados {0} e {1} tem \u00e1rea {2}'\n\nprint(texto.format(x, y, z))\n</code></pre> <p>Escolha o ser\u00e1 impresso no terminal:</p> <ul> <li> O ret\u00e2ngulo de lados {0} e {1} tem \u00e1rea {2}</li> <li> O ret\u00e2ngulo de lados 0 e 1 tem \u00e1rea 2</li> <li> O ret\u00e2ngulo de lados 3 e 4 tem \u00e1rea 12</li> <li> O ret\u00e2ngulo de lados 4 e 3 tem \u00e1rea 12</li> </ul> <p>Resposta</p> <p>Ser\u00e1 impresso <code>O ret\u00e2ngulo de lados 3 e 4 tem \u00e1rea 12</code>, pois o m\u00e9todo <code>.format</code> substituir\u00e1 os valores entre chaves de acordo com a ordem em que os argumentos <code>x</code>, <code>y</code> e <code>z</code> foram passados. Para mais detalhes acesse: https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method</p> <p>Question</p> <p>No c\u00f3digo do servidor, utilizamos o m\u00e9todo <code>.format</code> de outra maneira poss\u00edvel. A maneira utilizada \u00e9 similar ao c\u00f3digo a seguir:</p> <pre><code>print('This {food} is {adjective}.'.format(adjective='absolutely horrible', food='spam'))\n</code></pre> <p>Escolhe o ser\u00e1 impresso no terminal:</p> <ul> <li> This spam is absolutely horrible.</li> <li> This {food} is {adjective}.</li> <li> This absolutely horrible is spam.</li> <li> This food is adjective.</li> </ul> <p>Resposta</p> <p>Ser\u00e1 impresso <code>This spam is absolutely horrible.</code>, pois o m\u00e9todo <code>.format</code> substituir\u00e1 os valores entre chaves de acordo com os nomes utilizados <code>food</code> e <code>adjective</code>. Para mais detalhes acesse: https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method</p> <p>EXERC\u00cdCIO</p> <p>Tente reescrever o trecho de c\u00f3digo abaixo utilizando o loop <code>for</code>.   Caso n\u00e3o esteja familiarizado com <code>list-comprehensions</code> acesse: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</p> <pre><code># Cria uma lista de &lt;li&gt;'s para cada anota\u00e7\u00e3o\n# Se tiver curiosidade: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\nnotes_li = [\n   NOTE_TEMPLATE.format(title=dados['titulo'], details=dados['detalhes'])\n   for dados in load_data('notes.json')\n]\nnotes = '\\n'.join(notes_li)\n\nresponse = RESPONSE_TEMPLATE.format(notes=notes).encode()\n</code></pre> <p>Perceba que a linha contendo a imagem foi alterada e foram adicionadas chaves. Isso acontece porque o m\u00e9todo <code>format</code> do Python espera que as chaves sejam substitu\u00eddas por valores. Como n\u00e3o queremos substituir essas chaves, precisamos dizer ao Python que elas s\u00e3o literais. Para isso, basta duplicar as chaves, ou seja, substituir <code>{</code> por <code>{{</code> e <code>}</code> por <code>}}</code>.</p>"},{"location":"aulas/01-getit/parte3/#visualizacao","title":"Visualiza\u00e7\u00e3o","text":"<p>Ufa, j\u00e1 est\u00e1 um pouco melhor. Se quisermos adicionar mais anota\u00e7\u00f5es basta modificar o arquivo <code>notes.json</code>. Lembra da ideia de mantermos um baixo acoplamento? Aqui n\u00f3s conseguimos melhorar esse ponto. Se eu quero adicionar mais dados eu s\u00f3 modifico o arquivo de dados (<code>notes.json</code>) e nenhum outro. O resto do c\u00f3digo \u00e9 independente disso.</p> <p>Mas ainda d\u00e1 para melhorar. Vamos refatorar um pouco mais o nosso c\u00f3digo, separando a responsabilidade de visualiza\u00e7\u00e3o (HTML). </p> <p>EXERC\u00cdCIO</p> <p>Crie uma pasta chamada <code>templates</code> dentro da pasta <code>static</code> e crie dentro dela um arquivo <code>index.html</code> com o conte\u00fado da string <code>RESPONSE_TEMPLATE</code>. N\u00e3o coloque aspas entorno do html.</p> <p>Ainda dentro da pasta <code>templates</code>, crie outra pasta chamada <code>components</code> e dentro dessa nova pasta um arquivo <code>note.html</code> com o conte\u00fado da string <code>NOTE_TEMPLATE</code>. </p> <p>A sua estrutura de arquivos agora deve ser:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- utils.py\n  |- static\n    |- data\n      |- notes.json\n    |- img\n      |- logo-getit.png\n    |- templates\n        |- index.html\n        |- components\n            |- note.html\n</code></pre> <p>EXERC\u00cdCIO</p> <p>Implemente a fun\u00e7\u00e3o <code>load_template</code> no arquivo <code>utils.py</code> que recebe o nome de um arquivo de template e devolve uma string com o conte\u00fado desse arquivo. O nome do arquivo n\u00e3o inclui o nome da pasta <code>templates</code>. Por exemplo: para a entrada <code>index.html</code> voc\u00ea deve carregar o conte\u00fado do arquivo <code>static/templates/index.html</code>.</p> <p>Vamos atualizar o c\u00f3digo do servidor:</p> <pre><code>from flask import Flask, render_template_string, url_for\nfrom utils import load_data, load_template\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    notes_li = [\n        load_template('components/note.html').format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    response = load_template('index.html').format(notes=notes)\n\n    return render_template_string(response)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/01-getit/parte3/#controle-de-rotas","title":"Controle de rotas","text":"<p>O c\u00f3digo do servidor ainda possui duas responsabilidades diferentes: decidir qual rota seguir e o que fazer em cada rota (o que pode ser t\u00e3o complexo quanto se queira). Vamos separar a responsabilidade de cada rota em uma fun\u00e7\u00e3o diferente:</p> <pre><code>from flask import Flask, render_template_string\nimport views\n\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n\n    return render_template_string(views.index())\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Voc\u00ea tamb\u00e9m vai precisar criar o arquivo <code>views.py</code> com o seguinte conte\u00fado (note que \u00e9 exatamente o mesmo c\u00f3digo que estava na fun\u00e7\u00e3o <code>index</code> do arquivo <code>servidor.py</code>):</p> <pre><code>from utils import load_data, load_template\n\ndef index():\n    note_template = load_template('components/note.html')\n    notes_li = [\n        note_template.format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    return load_template('index.html').format(notes=notes)\n</code></pre> <p>Agora o nosso c\u00f3digo est\u00e1 pronto para a parte 4 do handout!</p>"},{"location":"aulas/01-getit/parte4/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte4/#parte-4-fazendo-um-formulario-de-criacao-de-anotacao","title":"Parte 4: Fazendo um formul\u00e1rio de cria\u00e7\u00e3o de anota\u00e7\u00e3o","text":"<p>Vamos implementar agora a funcionalidade de adicionar anota\u00e7\u00f5es. O objetivo \u00e9 que voc\u00ea aprenda como receber dados no servidor enviados pelo navegador.</p> <p>Aten\u00e7\u00e3o</p> <p>\u00c9 poss\u00edvel que nas pr\u00f3ximas etapas o servidor apresente erros inesperados. Tente acessar o servidor de um navegador com aba an\u00f4nima.</p> <p>Para come\u00e7ar, modifique o template <code>index.html</code> para adicionar o <code>&lt;form&gt;</code>:</p> <pre><code>&lt;!-- DOCTYPE, HTML, HEAD DEVEM CONTINUAR AQUI --&gt;\n&lt;body&gt;\n  &lt;img src=\"{{{{ url_for('static', filename='img/logo-getit.png') }}}}\"&gt;\n  &lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n  &lt;form action=\"/submit\" method=\"POST\"&gt;\n    &lt;label for=\"titulo\"&gt;T\u00edtulo&lt;/label&gt;\n    &lt;input id=\"titulo\" type=\"text\" name=\"titulo\" /&gt;\n    &lt;label for=\"detalhes\"&gt;Detalhes&lt;/label&gt;\n    &lt;input id=\"detalhes\" name=\"detalhes\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n  &lt;/form&gt;\n  &lt;!-- O RESTO DO HTML A PARTIR DAQUI --&gt;\n</code></pre> <p>Seu c\u00f3digo do programa principal n\u00e3o precisa ser modificado ainda.</p> <p>EXERC\u00cdCIO</p> <p>Execute o servidor e teste a p\u00e1gina.</p> <p>Importante</p> <p>Quando voc\u00ea for testar a p\u00e1gina, ao clicar em <code>submit</code> deve aparecer o erro <code>Not Found</code>. \u00c9 isso mesmo que deve ocorrer. Nos pr\u00f3ximos passos n\u00f3s vamos resolver essa situa\u00e7\u00e3o.</p>"},{"location":"aulas/01-getit/parte4/#usando-os-dados-recebidos-do-formulario","title":"Usando os dados recebidos do formul\u00e1rio","text":"<p>Talvez voc\u00ea tenha notado que no formul\u00e1rio (<code>&lt;form&gt;</code>) existe um atributo <code>method=\"post\"</code>. Isso quer dizer que os dados do formul\u00e1rio ser\u00e3o enviados utilizando o m\u00e9todo HTTP POST (veremos mais detalhes sobre ele no futuro). O que voc\u00ea precisa saber por enquanto \u00e9 que at\u00e9 o momento n\u00f3s sempre enviamos requisi\u00e7\u00f5es do tipo GET para o servidor. Para entender melhor o que est\u00e1 acontecendo, observe a sa\u00edda do seu terminal. Deve haver uma requisi\u00e7\u00e3o parecida com essa:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET /static/img/logo-getit.png HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET /favicon.ico HTTP/1.1\" 404 -\n127.0.0.1 - - [24/Jan/2025 15:35:45] \"POST /submit HTTP/1.1\" 404 -\n</code></pre> <p>Perceba que a \u00faltima linha da requisi\u00e7\u00e3o est\u00e1 diferente das outras. Existe um <code>POST</code> ao inv\u00e9s de <code>GET</code>. Isso significa que o navegador est\u00e1 enviando dados para o servidor. O servidor, por sua vez, n\u00e3o sabe o que fazer com esses dados e responde com um erro <code>404</code>.</p> <p>Queremos pegar os dados do formul\u00e1rio e extrair o t\u00edtulo e os detalhes da anota\u00e7\u00e3o. No <code>form</code> do arquivo <code>index.html</code>, o campo <code>action</code> est\u00e1 apontando para <code>/submit</code>. Precisamos criar uma nova rota no servidor para lidar com essa requisi\u00e7\u00e3o.</p> <pre><code>from flask import Flask, render_template_string, request, redirect\nimport views\n\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n\n    return render_template_string(views.index())\n\n@app.route('/submit', methods=['POST'])\ndef submit_form():\n    titulo = request.form.get('titulo')  # Obt\u00e9m o valor do campo 'titulo'\n    detalhes = request.form.get('detalhes')  # Obt\u00e9m o valor do campo 'detalhes'\n\n    views.submit(titulo, detalhes)\n    return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Essa nova rota <code>/submit</code> foi definida para somente aceitar o m\u00e9todo <code>POST</code>. Veja o que acontece se tentarmos acessar no navegador o endere\u00e7o <code>http://localhost:5000/submit</code>. Leia a mensagem de erro e tente entender o que est\u00e1 acontecendo.</p> <p>Chamar essa rota s\u00f3 vai fazer sentido se estivermos passando dados para ela. Por isso, deixamos ela responder somente a requisi\u00e7\u00f5es do tipo <code>POST</code>. Utilizamos os comandos <code>request.form.get</code> para pegar os dados enviados pelo formul\u00e1rio. O m\u00e9todo <code>get</code> \u00e9 utilizado para pegar o valor de uma chave de um dicion\u00e1rio. Se a chave n\u00e3o existir, ele retorna <code>None</code>. <code>request.form</code>, assim como o <code>request.headers</code> que vimos anteriormente, \u00e9 um dicion\u00e1rio que cont\u00e9m os dados enviados pelo navegador.</p> <p>Assim como faz\u00edamos no Django, toda requisi\u00e7\u00e3o precisa ter uma resposta. Como n\u00e3o queremos ter nenhuma outra p\u00e1gina ap\u00f3s criar a nota, vamos retornar para a p\u00e1gina inicial. Para isso, usamos o comando <code>return redirect('/')</code> assim como no Django.</p> <p>EXERC\u00cdCIO</p> <p>Crie uma fun\u00e7\u00e3o <code>submit(titulo, detalhes)</code> no arquivo <code>views.py</code>, que adicione a nova anota\u00e7\u00e3o (que dever\u00e1 estar armazenada em <code>params['titulo']</code> e <code>params['detalhes']</code>) ao arquivo <code>notes.json</code>.</p> <p>Dica: crie uma fun\u00e7\u00e3o no arquivo <code>utils.py</code> que recebe a nova anota\u00e7\u00e3o e a adiciona \u00e0 lista do arquivo <code>notes.json</code>.</p> <p>Teste seu servidor e verifique se as anota\u00e7\u00f5es est\u00e3o sendo salvas corretamente. Se tudo estiver funcionando, a anota\u00e7\u00e3o deve estar aparecendo e no terminal voc\u00ea deve ver a seguinte mensagem:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 16:12:42] \"POST /submit HTTP/1.1\" 302 -\n127.0.0.1 - - [24/Jan/2025 16:12:42] \"GET / HTTP/1.1\" 200 -\n</code></pre> <p>Isso significa que o servidor recebeu a requisi\u00e7\u00e3o do tipo <code>POST</code> e redirecionou para a p\u00e1gina inicial. O n\u00famero 302 \u00e9 o c\u00f3digo de status HTTP que indica que a requisi\u00e7\u00e3o foi redirecionada. Isso tamb\u00e9m vai fazer com que atualizar a p\u00e1gina n\u00e3o envie novamente os dados do formul\u00e1rio, assim como acontecia no Django.</p>"},{"location":"aulas/01-getit/parte4/#desafio","title":"Desafio","text":"<p>O handout acabou, mas se quiser praticar um pouco mais voc\u00ea pode fazer o servidor devolver uma resposta com o c\u00f3digo 404 quando a requisi\u00e7\u00e3o \u00e9 feita a uma p\u00e1gina/recurso que n\u00e3o existe.</p> <p>Al\u00e9m disso, voc\u00ea pode usar os arquivos HTML e CSS que construiu semestre passado para estilizar a p\u00e1gina de anota\u00e7\u00f5es.</p>"},{"location":"aulas/01-getit/parte4/#ufa-cansei","title":"Ufa, cansei","text":"<p>Parab\u00e9ns! Agora voc\u00ea pode tentar fazer alguma das receitas da nossa lista de anota\u00e7\u00f5es. Depois disso, se ainda tiver pique, \u00e9 um bom momento para dar aquela relembrada em CSS com essa lista de jogos:</p> <ul> <li>Flexbox Defense</li> <li>Flexbox Froggy</li> <li>Grid Garden</li> <li>CSS Diner</li> <li>Se voc\u00ea tem interesse por CSS, voc\u00ea vai gostar disso: https://rupl.github.io/unfold/</li> </ul>"},{"location":"aulas/02-rest/","title":"O que \u00e9 REST","text":"<p>Respons\u00e1vel: Andre Oliveira Tags: Guias e Processos, Teoria</p> <p>Refer\u00eancias:</p> <ul> <li> <p>https://developer.mozilla.org/pt-BR/docs/Glossary/REST</p> </li> <li> <p>\u201cREST\u00a0(Representational State Transfer) refere-se a um grupo de restri\u00e7\u00f5es de design dentro da arquitetura de software que geram sistemas distribu\u00eddos eficientes, confi\u00e1veis e escal\u00e1veis. Um sistema \u00e9 denominado RESTful quando adere a todas essas restri\u00e7\u00f5es.\u201d</p> </li> <li> <p>\u201cA ideia b\u00e1sica do REST \u00e9 que um recurso, por exemplo um documento, seja transferido com seu estado bem definido, padroniza\u00e7\u00e3o de opera\u00e7\u00f5es e formatos.\u201d</p> </li> <li> <p>Recurso \u21d2 \u201cUm recurso \u00e9 um elemento abstrato e que nos permite mapear qualquer coisa do mundo real como um elemento para acesso via Web.\u201d</p> </li> <li> <p>Uso explicito dos verbos HTTP</p> <ul> <li>GET \u21d2 Buscar/Pegar informa\u00e7\u00f5es de um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens)</li> <li>POST \u21d2 Criar um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens)</li> <li>DELETE \u21d2 Deleta um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens/) <li>PUT \u21d2 Atualiza um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens/) <pre><code># C\u00f3digo gerado com o ChatGPT\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Representa\u00e7\u00e3o do banco de dados \ntasks = [\n    {\"id\": 1, \"title\": \"Estudar Python\", \"done\": False},\n    {\"id\": 2, \"title\": \"Fazer compras\", \"done\": True}\n]\n\n# Observe como que os recursos s\u00e3o representados dentro da URL de requisi\u00e7\u00e3o, ou seja, apenas lendo o caminho do recurso + seu verbo HTTP \u00e9 poss\u00edvel ter uma ideia do que essa rota deve retornar e fazer\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    return jsonify({\"tasks\": tasks})\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['GET'])\ndef get_task(task_id):\n    task = next((task for task in tasks if task['id'] == task_id), None)\n    if task:\n        return jsonify({\"task\": task})\n    else:\n        return jsonify({\"message\": \"Tarefa n\u00e3o encontrada\"}), 404\n\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    new_task = request.json\n    tasks.append(new_task)\n    return jsonify({\"message\": \"Tarefa criada com sucesso\"}), 201\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['PUT'])\ndef update_task(task_id):\n    task = next((task for task in tasks if task['id'] == task_id), None)\n    if task:\n        task.update(request.json)\n        return jsonify({\"message\": \"Tarefa atualizada com sucesso\"})\n    else:\n        return jsonify({\"message\": \"Tarefa n\u00e3o encontrada\"}), 404\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['DELETE'])\ndef delete_task(task_id):\n    tasks = [task for task in tasks if task['id'] != task_id]\n    return jsonify({\"message\": \"Tarefa exclu\u00edda com sucesso\"})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <li> <p>Stateless \u21d2 \u201cN\u00e3o \u00e9 armazenado nenhum estado no servidor.\u201d N\u00e3o dependem de dados armazenados de outra requisi\u00e7\u00e3o para poder executar a requisi\u00e7\u00e3o atual. Todos os dados necess\u00e1rios para requisi\u00e7\u00e3o se completar devem ser enviados e armazenados pelo cliente</p> </li> <li> <p>Representa\u00e7\u00e3o \u21d2 JSON - Os dados normalmente chegam e retornam em JSON</p> </li> <li> <p>Respostas HTTP coerentes com o estado da requisi\u00e7\u00e3o:</p> <ul> <li>Referencia para consulta das respostas:  https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Status</li> </ul> </li>"},{"location":"aulas/03-postman/como-usar/","title":"Ferramentas B\u00e1sicas: Postman - Como Usar","text":"<p>Respons\u00e1vel: Sarti</p> <p>Este t\u00f3pico \u00e9 complementar \u00e0 instala\u00e7\u00e3o do Postman. Caso ainda n\u00e3o tenha o programa baixado, inicie pelo outro guia. Continuaremos de onde paramos, com o request criado.</p>"},{"location":"aulas/03-postman/como-usar/#requests-geral","title":"Requests - Geral","text":"<p>Requests s\u00e3o requisi\u00e7\u00f5es totalmente personaliz\u00e1veis. Utilizamos elas para simular o que vai ser enviado pelo nosso site ao nosso sistema. Sendo assim, todos os nossos testes de requisi\u00e7\u00f5es, assim como o estudo de c\u00f3digos de erro, v\u00e3o girar em torno das requisi\u00e7\u00f5es realizadas pelo request. Existem v\u00e1rios tipos de requisi\u00e7\u00f5es, sendo as 4 principais: Get, Put, Post e Delete. Elas ser\u00e3o abordadas de melhor maneira pelo professor durante as aulas. Aqui, abordarei apenas o m\u00ednimo para entender como criar testes utilizando o Postman.</p>"},{"location":"aulas/03-postman/como-usar/#testes","title":"Testes","text":"<p>Apesar de usarmos o Postman para testes, diferentemente do pytest onde nos \u00e9 dito se estamos certos ou errados, o Postman apenas testa e nos exibe um resultado. Se ele est\u00e1 correto ou n\u00e3o, n\u00f3s como desenvolvedores teremos que decicir, se o programa se comporta como queremos. </p>"},{"location":"aulas/03-postman/como-usar/#status-codes","title":"Status Codes","text":"<p>Os c\u00f3digos de status, ou Status Codes, s\u00e3o alguns c\u00f3digos comuns e padronizados na internet, o que nos permite ter um meio universal de debugar e compreender uma Request, bem ou mal-sucedida. Existem v\u00e1rios erros de Status que devem ser consultados na internet, mas como regra a cada 100 status code, seu significado muda. E cada sub c\u00f3digo, indica com detalhes a opera\u00e7\u00e3o. </p> <p>100-199: Resposta informacional.</p> <p>200-299: Request bem sucedido.</p> <p>300-399: Redirect. Requisi\u00e7\u00e3o bem sucedida, mas precisou/retornou um redirect.</p> <p>400-499: Erro no client side, desde erro de conex\u00e3o at\u00e9 input invalido de informa\u00e7\u00f5es.</p> <p>500+: Erro no server side, um problema diretamente com a empresa e o servidor.</p> <p>Obs: N\u00e3o existem TANTOS c\u00f3digos assim, n\u00e3o existem 100 c\u00f3digos de sucesso diferentes por exemplo. Apenas temos o espa\u00e7o reservado para manter o padr\u00e3o.</p>"},{"location":"aulas/03-postman/como-usar/#requests-get","title":"Requests: Get","text":"<p>Por padr\u00e3o todo request criado vem como Get, podemos ver isso no texto \u00e0 esquerda da barra de busca. Essa barra de busca \u00e9 onde iremos escrever os links que estamos testando as requisi\u00e7\u00f5es, podemos testar tanto links da surface web como o nosso servidor em flask.</p> <p></p> <p>Ap\u00f3s clicar em Send com a URL necess\u00e1ria, podemos ver a resposta do servidor. Por enquanto ela \u00e9 bem simples, mas posteriormente pode vir cheia de informa\u00e7\u00f5es. De importante na resposta de uma requisi\u00e7\u00e3o Get temos duas informa\u00e7\u00f5es, a resposta em si, exibida na \u00e1rea similar com o terminal do VScode na parte de baixo da tela, neste caso um texto \u201cWeb service em execu\u00e7\u00e3o\u201d, assim como o Status Code da requisi\u00e7\u00e3o. Podemos ver o Status Code na parte superior direita desta mesma \u00e1rea, onde podemos ver \u201cStatus: 200 Ok\u201d. </p>"},{"location":"aulas/03-postman/como-usar/#requests-post","title":"Requests: Post","text":"<p>Post \u00e9 a requisi\u00e7\u00e3o respons\u00e1vel por enviar um JSON para o servidor, ou seja, receber algo do cliente. Para enviarmos um Post v\u00e1lido, primeiro criamos um teste e, em seguida, precisamos mudar o tipo de requisi\u00e7\u00e3o de Get para Post no bot\u00e3o \u00e0 esquerda. Ap\u00f3s isso, temos que escrever o que ser\u00e1 enviado. Para isso, clique em \u201cBody\u201d abaixo da barra da URL e selecione a op\u00e7\u00e3o \u201cRaw\u201d. Uma vez feito isso, temos nossa \u00e1rea de escrita dispon\u00edvel. Certifique-se de selecionar JSON entre as op\u00e7\u00f5es do seletor azul \u00e0 direita.</p> <p>Obs: Podemos enviar em outros formatos, mas como ir\u00e3o perceber ao longo do semestre, JSON \u00e9 um padr\u00e3o para requisi\u00e7\u00f5es web, por ser super simples, intuitivo e organizado. Para quem nunca usou antes, \u00e9 basicamente um dicion\u00e1rio do Python, e existem diversos sites documentando JSON e ajudando a criar os seus pr\u00f3prios.</p> <p></p> <p>Observer que dessa vez o request retornou um erro, 500 Internal Server Error, isso quer dizer que eu enviei informa\u00e7\u00f5es validas, mas que o servidor n\u00e3o conseguia lidar com elas (pois o c\u00f3digo n\u00e3o estava preparado). Note que agora os campos estar\u00e3o adequados, o que exibira um texto valido na parte de baixo e minha resposta ser\u00e1 \u201c201 Created\u201d, indicando que criei um usu\u00e1rio com sucesso. </p> <p></p>"},{"location":"aulas/03-postman/como-usar/#request-put-delete","title":"Request: Put &amp; Delete","text":"<p>Ambos os m\u00e9todos operam de maneira id\u00eantica ao Post e Get, respectivamente. No entanto, estes s\u00e3o dedicados a editar e apagar informa\u00e7\u00f5es do servidor. Para n\u00f3s, usu\u00e1rios de uma API, n\u00e3o muda nada entre us\u00e1-los ou os m\u00e9todos Post e Get, mas para o servidor e o c\u00f3digo, essa \u00e9 uma distin\u00e7\u00e3o muito importante, pois \u00e9 ela que diferencia editar e criar um usu\u00e1rio, por exemplo.</p>"},{"location":"aulas/03-postman/como-usar/#exportando-testes","title":"Exportando testes:","text":"<p>Ap\u00f3s todos os testes estarem feitos e SALVOS, clique nos \u201c\u2026\u201d da sua collection e ao inv\u00e9s de criar um request, selecione \u201cExport\u201d, e selecione \u201cCollection V2.1\u201d. Ent\u00e3o ele ir\u00e1 salvar um arquivo com os testes realizados na sua m\u00e1quina, este arquivo deve ser compartilhado quando quiser mostrar seus testes para os outros (inclusive em provas).\u00a0</p>"},{"location":"aulas/03-postman/como-usar/#conclusao","title":"Conclus\u00e3o","text":"<p>No fim, mesmo que tenhamos feitos poucos testes, n\u00e3o usamos nenhum front-end para test\u00e1-los. Sem precisar fazer um formul\u00e1rio para enviar informa\u00e7\u00f5es, apenas intera\u00e7\u00f5es diretas com o Back. Isso em um uso de larga escala, como no desenvolvimento de um projeto inteiro, nos permite salvar muito tempo testando diretamente o que queremos.</p>"},{"location":"aulas/03-postman/instalacao/","title":"Ferramentas B\u00e1sicas: Postman - Instala\u00e7\u00e3o","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"aulas/03-postman/instalacao/#por-que-postman","title":"Por que Postman?","text":"<p>A partir do segundo semestre, uma das ferramentas que vai nos acompanhar pelo resto do curso s\u00e3o as Aplica\u00e7\u00f5es de Teste de API, dentre as v\u00e1rias existentes no segundo semestre utilizamos a Postman especificamente. </p> <p>O principal motivo de precisarmos de aplica\u00e7\u00f5es como essa \u00e9 o teste isolado do Backend de um sistema API. Como devem lembrar ao longo do seu projeto de sprint session em Django no semestre passado, sempre que test\u00e1vamos uma nova rota, uma nova fun\u00e7\u00e3o ou qualquer coisa nova, precis\u00e1vamos abrir o navegador, entrar no link e ver as mudan\u00e7as no HTML/Frontend da aplica\u00e7\u00e3o. E se eu falasse que esse \u00e9 um m\u00e9todo muito pouco eficiente de testar um sistema? Apesar de funcional, ele requer que percamos muito tempo trabalhando em um frontend que serve apenas para nos mostrar se o backend funciona ou n\u00e3o, e nem mostra todas as informa\u00e7\u00f5es (al\u00e9m de que dev backend odeia front n\u00e9\u2026)</p> <p>Para resolver esse problema, utilizamos o Postman, que nos permite realizar requisi\u00e7\u00f5es para qualquer link e nos exibe o seu retorno completo. Assim, podemos pular a etapa de ficar testando no HTML do site, al\u00e9m de conseguirmos mais informa\u00e7\u00f5es. Principalmente, pois como iremos ver depois do curso, Back e Frontend s\u00e3o coisas distintas e independentes, e o Postman \u00e9 essencial para esta separa\u00e7\u00e3o do Back.</p>"},{"location":"aulas/03-postman/instalacao/#instalacao-e-setup","title":"Instala\u00e7\u00e3o e Setup:","text":"<p>Para instalar o Postman, baixe os arquivos necess\u00e1rios do site (https://www.postman.com/) e siga os passos.\u00a0</p> <p></p> <p>Windows, Mac e Linux:</p> <p>Baixe o execut\u00e1vel x64, ele deve por padr\u00e3o ir para sua pasta de Download. Execute e o programa deve ser instalado automaticamente. </p> <p>Linux (Se n\u00e3o der certo o passo acima):</p> <p>Para estes passos presumo que seja uma plataforma x64 baseada em Debian, caso contr\u00e1rio busque os passos para sua m\u00e1quina. Baixe o arquivo, ele por padr\u00e3o estar\u00e1 em sua aba de Downloads e deve vir no formato de compress\u00e3o \u201c.tar.gz.\u201d </p> <p>Ap\u00f3s isso abra seu terminal e realoque para a aba onde estiver o \u201carquivo .tar.gz\u201d, no exemplo Downloads. Ap\u00f3s isso execute no terminal os seguintes comandos: </p> <p>1) \u201ctar -xzf postman.tar.gz\u201d Obs: O seu arquivo provavelmente se chamara postman\u2026 onde os pontos s\u00e3o outras palavras referentes ao OS ou vers\u00e3o. Basta escrever postman e apertar Tab para o Auto Complete.</p> <p>2) \u201csudo mv Postman /opt\u201d</p> <p>3)\u201dsudo ln -s /opt/Postman/Postman /usr/local/bin/postman\u201d</p> <p></p> <p>Com estes comandos estamos, respectivamente, descompactando o programa na sua aba de Download (ele ja estaria funcional), movendo-o para alguma outra pasta de nossa escolha (por padr\u00e3o deixei a pasta /opt, por estar pr\u00f3ximo ao root e ser onde eu costumo guardar symbolic links, mas pode ser a pasta que quiser) e por fim criamos um link simb\u00f3lico do postman. Caso queira aprender como links simb\u00f3licos funcionam, vale a pesquisa mais tarde, mas basicamente atribu\u00edmos uma palavra para a execu\u00e7\u00e3o do programa via terminal (assim como \u201ccode\u201d inicia o vscode). Agora basta escreve \u201cpostman\u201d no terminal para abrir ele. </p>"},{"location":"aulas/03-postman/instalacao/#setup","title":"Setup:","text":"<p>Ap\u00f3s baixar o postman, ser\u00e1 necess\u00e1rio criar uma conta e logar para ter acesso \u00e0 algumas features, dentre elas as collections que vamos utilizar em provas e testes. Crie sua conta e fa\u00e7a login, este \u00e9 o \u00fanico setup necess\u00e1rio. </p>"},{"location":"aulas/03-postman/instalacao/#como-utilizar-o-postman-primeiros-passos","title":"Como utilizar o Postman - Primeiros Passos:","text":"<p>Ao longo da disciplina o uso do postman vai ficar mais intuitivo, tal como a necessidade dele mais clara, mas por enquanto podemos focar no passo a passo b\u00e1sico. J\u00e1 estando logado, sua tela inicial deve estar vazia (sem testes) e pronta para uso. Iniciamos criando uma collection, que \u00e9 basicamente uma pasta que ir\u00e1 guardar nossos testes. Basta clicar em \u201cNew\u201d no bot\u00e3o do lado superior esquerdo da tela que um menu aparecera, selecione \u201cCollection\u201d. </p> <p></p> <p>Ap\u00f3s criar nossa collection, passe o mouse por cima dela na aba esquerda da tela e clique nos \u201c\u2026\u201d. Selecione \u201cAdd request\u201d. Assim criaremos um request, nossa unidade de testes.</p> <p>Para um guia de como utilizar o postman, siga para \u201cFerramentas B\u00e1sicas: Postman - Como Usar\u201d</p>"},{"location":"auxiliar/git/","title":"Ferramentas B\u00e1sicas: Git","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"auxiliar/git/#git-ou-github","title":"Git ou GitHub:","text":"<p>Voc\u00eas j\u00e1 tiveram contato com o GitHub no primeiro semestre, mas agora iremos realmente explorar o Git, uma ferramenta do cotidiano de todo desenvolvedor. E uma informa\u00e7\u00e3o importante, Git e GitHub N\u00c3O s\u00e3o a mesma coisa. Por conta do primeiro semestre e da superficialidade com a qual o tema \u00e9 abordado, ambos podem se confundir, mas Git \u00e9 a ferramenta de controle de vers\u00e3o, enquanto GitHub \u00e9 apenas um portal de compartilhamento de reposit\u00f3rios Gits, pertencente \u00e0 Microsoft. O mais famoso de todos, mas apenas mais um portal, tendo m\u00faltiplos outros concorrentes, como por exemplo o projeto open source GitLab.</p>"},{"location":"auxiliar/git/#como-baixar-o-git","title":"Como baixar o Git:","text":"<p>Se voc\u00ea por algum motivo n\u00e3o possui o git instalado, no site do Git (https://git-scm.com/) clique em downloads e siga os passos para seu sistema operacional. Este pode variar um pouco de um sistema para outro, mas em todos deve ser um processo simples e intuitivo, pela popularidade da ferramenta.</p> <p></p>"},{"location":"auxiliar/git/#qual-a-funcao-do-git-e-por-que-usa-lo","title":"Qual a fun\u00e7\u00e3o do Git e por que us\u00e1-lo?:","text":"<p>O Git \u00e9 uma ferramenta de controle de vers\u00e3o, ou seja, ela serve para salvar seu c\u00f3digo ao longo do desenvolvimento em, idealmente, toda vers\u00e3o est\u00e1vel do projeto. Isso permite que, caso algum erro ou bug venha a aparecer em seu c\u00f3digo, a rastreabilidade do erro se torne mais f\u00e1cil, al\u00e9m de possibilitar o retorno do c\u00f3digo para uma vers\u00e3o est\u00e1vel, caso necess\u00e1rio. Outra vantagem do Git \u00e9 facilitar o compartilhamento e trabalho conjunto em um c\u00f3digo, pois podemos garantir que todos os envolvidos ter\u00e3o exatamente o mesmo c\u00f3digo com as exatas mesmas altera\u00e7\u00f5es.</p>"},{"location":"auxiliar/git/#o-lado-obscuro-do-git","title":"O lado obscuro do Git:","text":"<p>Apesar de no papel o Git ser uma ferramenta fenomenal, maravilhosa e milagrosa, ela est\u00e1 mais pr\u00f3xima de \"A melhor solu\u00e7\u00e3o ruim para um problema\" do que realmente \"Uma \u00f3tima solu\u00e7\u00e3o de um problema\". Uma frase bem comum, principalmente para quem est\u00e1 aprendendo Git, \u00e9 \"Git \u00e9 ruim, s\u00f3 n\u00e3o temos uma solu\u00e7\u00e3o melhor\". Isso se deve \u00e0 grande complexidade de entender o Git completamente e todos os problemas que surgem quando muitas pessoas tentam mexer em um mesmo sistema ao mesmo tempo. Desde conflitos de Merge com coisas simples at\u00e9 Rebases de c\u00f3digo e fetch/fast-forwards imposs\u00edveis, iremos nos atrapalhar com o Git enquanto n\u00e3o tivermos entendido muito bem o que est\u00e1 acontecendo. Para evitar esses problemas, sigam algumas regras ao trabalhar com Git:</p> <ul> <li>Nunca editar o mesmo arquivo ou fun\u00e7\u00e3o do colega, at\u00e9 que o mesmo d\u00ea merge.</li> <li>Commits e merges constantes, seja em algum branch Auxiliar ou na Main.</li> <li>Utilizar branches. Apesar de confuso no come\u00e7o e parecer s\u00f3 atrapalhar, a ideia de \"codar todo mundo direto no main\" s\u00f3 \u00e9 boa at\u00e9 4 pessoas diferentes darem push commit ao mesmo tempo no mesmo branch com v\u00e1rias edi\u00e7\u00f5es importantes no mesmo arquivo. \u00c9 comum as coisas darem errado no c\u00f3digo ou no merge, ent\u00e3o \u00e9 melhor que deem errado no seu branch pessoal do que na main do projeto inteiro.</li> <li>Nunca deixe para dar \"pull main\" mais tarde, caso haja uma atualiza\u00e7\u00e3o em um arquivo que voc\u00ea est\u00e1 utilizando. Fa\u00e7a quest\u00e3o de sempre manter o Main o mais atualizado poss\u00edvel, mesmo que isso implique em comitar um c\u00f3digo incompleto em SEU branch apenas para dar pull e continuar seu c\u00f3digo.</li> </ul>"},{"location":"auxiliar/git/#o-maior-problema-do-git","title":"O maior problema do Git:","text":"<p>Como p\u00f4de ser visto no t\u00f3pico anterior, o Git pode ser bem traum\u00e1tico para quem est\u00e1 aprendendo, principalmente quando voc\u00ea precisa entregar um trabalho \u00e0s 23:59, mas um conflito de merge desconhecido envolvendo 200 linhas de c\u00f3digo aparece do nada \u00e0s 23:20, pois algu\u00e9m deu um commit na main sem avisar o grupo... Caso ainda n\u00e3o tenham percebido, o Git \u00e9 uma ferramenta muito boa, mas tem um grande problema que pode transformar todas as suas qualidades em dores de cabe\u00e7a: o trabalho em equipe e o erro humano. Sem uma boa comunica\u00e7\u00e3o, trabalho em equipe e constante transfer\u00eancias de c\u00f3digo, problemas come\u00e7am a aparecer, principalmente quando muitas pessoas trabalham ao mesmo tempo. Ent\u00e3o lembrem-se: sempre se comuniquem e estejam com seu c\u00f3digo atualizado.</p>"},{"location":"auxiliar/git/#merge-conflict","title":"Merge Conflict:","text":"<p>Este \u00e9 o erro mais comum e cansativo de corrigir que encontrar\u00e3o, principalmente quando o grupo n\u00e3o tem uma boa comunica\u00e7\u00e3o. Para resolver isso, ou o branch que est\u00e1 causando conflito \u00e9 abandonado e as mudan\u00e7as s\u00e3o refeitas a partir do commit mais recente da branch main, ou algum membro do grupo dever\u00e1 resolver o conflito de merge. Para resolver o conflito, sugiro o uso da extens\u00e3o do VSCode para resolver conflitos. Ao clicar no arquivo com conflito, o VSCode ir\u00e1 mostrar as duas vers\u00f5es do c\u00f3digo e a vers\u00e3o final, e voc\u00ea poder\u00e1 escolher qual vers\u00e3o manter e qual deletar. Ap\u00f3s isso, basta salvar o arquivo e dar commit.</p>"},{"location":"auxiliar/git/#comandos-git-terminal","title":"Comandos Git: Terminal","text":"<p>Apesar de ter uma interface com o VSCode, o git foi constru\u00eddo para ser usado via terminal. Entender como o Git funciona via terminal \u00e9 fundamental pois a interface do VSCode n\u00e3o \u00e9 t\u00e3o completa quanto a do terminal e n\u00e3o possui todos os comandos do Git.</p> <p>Os comandos mais importantes do git s\u00e3o: </p> <ul> <li><code>git init</code>: Cria uma pasta <code>.git</code> que cont\u00e9m aquivos respons\u00e1veis por monitorar as pastas e arquivos, iniciando um novo reposit\u00f3rio.</li> <li><code>git clone REP</code>: Substitua o REP pela chave do reposit\u00f3rio, seja ela SSH ou HTTPS. Clona um reposit\u00f3rio do GitHub ou concorrentes para sua m\u00e1quina local.</li> <li> <p><code>git add ELEMENTO</code>: Adiciona mudan\u00e7as no reposit\u00f3rio para serem salvas (staged changes). Troque ELEMENTO pelo que deseja salvar, seja um arquivo, pasta, ou qualquer coisa que foi alterada.</p> <p>obs: Utilize \u201c.\u201d no lugar de elemento para adicionar todas as mudan\u00e7as existentes no reposit\u00f3rio.</p> </li> <li> <p><code>git commit -m \"MENSAGEM\"</code>: Faz o commit LOCAL de todas as mudan\u00e7as marcadas para commit (staged changes). Ap\u00f3s isso o commit ficara salvo localmente e dever\u00e1 ser enviado para o remote.</p> </li> <li> <p><code>git pull/push origin BRANCH</code>: Os comandos fundamentais do Git, substitua BRANCH pelo branch em quest\u00e3o (normalmente ser\u00e1 main). Push envia o seu \u00faltimo commit para o origin(remote) do branch apontado, e Pull puxa o \u00faltimo commit dele.</p> <p>obs: Remote/origin refere-se ao reposit\u00f3rio nuvem de origem. Basicamente este \u00e9 o nosso reposit\u00f3rio do GitHub.</p> </li> </ul> <p>Existem muitos outros comandos Git para utilizar, mas estes voc\u00eas podem pesquisar caso necess\u00e1rio. Assim como o terminal, sua documenta\u00e7\u00e3o \u00e9 bem farta e extensa para resumir tudo aqui. </p>"},{"location":"auxiliar/git/#video-introdutorio-de-git","title":"Video Introdut\u00f3rio de Git:","text":"<p>\u00c9 importante que todos entendam o conceito de Git Trees e o funcionamento do Git para seu uso adequado. Os v\u00eddeos a seguir talvez tenham uma abordagem mais amig\u00e1vel:</p>"},{"location":"auxiliar/git/#videos-curtos","title":"V\u00eddeos curtos:","text":"<p>https://www.youtube.com/watch?v=hwP7WQkmECE</p> <p>https://www.youtube.com/watch?v=e9lnsKot_SQ</p>"},{"location":"auxiliar/git/#video-longo","title":"V\u00eddeo longo:","text":"<p>https://www.youtube.com/watch?v=mJ-qvsxPHpY</p>"},{"location":"auxiliar/terminal/","title":"Ferramentas B\u00e1sicas: Terminal","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"auxiliar/terminal/#introducao","title":"Introdu\u00e7\u00e3o:","text":"<p>Ao longo do segundo semestre do curso de Programa\u00e7\u00e3o Eficaz, iremos come\u00e7ar nosso contato com v\u00e1rias ferramentas do cotidiano de todo desenvolvedor. Uma delas, que pode parecer in\u00fatil ou at\u00e9 mesmo assustadora \u00e0 primeira vista, \u00e9 o Terminal do seu sistema operacional. Este guia serve para auxiliar no seu contato inicial com a ferramenta, al\u00e9m de fornecer alguns comandos e usos b\u00e1sicos di\u00e1rios do terminal.</p>"},{"location":"auxiliar/terminal/#instalacao","title":"Instala\u00e7\u00e3o:","text":"<p>O terminal \u00e9 uma ferramenta que, por padr\u00e3o, j\u00e1 vem instalada em qualquer computador, independentemente de seu sistema operacional. Para utiliz\u00e1-lo, \u00e9 necess\u00e1rio aprender os comandos que devem ser digitados nele. Um problema \u00e9 que esses comandos podem variar dependendo do sistema operacional. Os sistemas Linux e MacOS compartilham todos os comandos b\u00e1sicos, enquanto o Windows possui comandos diferentes. Um fato muito relevante \u00e9 que hoje a enorme maioria dos servidores utilizam sistemas Linux. Isso significa que mesmo que voc\u00ea n\u00e3o use Linux no seu dia a dia, \u00e9 muito importante aprender a usar seus comandos de terminal, pois eles ser\u00e3o muito \u00fateis no futuro pr\u00f3ximo.</p> <p>Se voc\u00ea possui um computador com Windows e j\u00e1 est\u00e1 ficando preocupado em ter que aprender dois conjuntos diferentes de comandos, n\u00e3o se preocupe. Existem emuladores de terminal que permitem que voc\u00ea utilize os comandos do Linux no Windows. Um dos mais populares \u00e9 o Git Bash, que \u00e9 instalado junto com o Git. Com ele, voc\u00ea pode utilizar os comandos do Linux no Windows e n\u00e3o ter\u00e1 que se preocupar em aprender dois conjuntos de comandos.</p>"},{"location":"auxiliar/terminal/#por-que-usar-o-terminal","title":"Por que usar o terminal:","text":"<p>O uso do terminal costuma ser malvisto por aqueles que s\u00e3o obrigados a aprender, afinal, por que usar o terminal se temos interfaces visuais? Por que usar 5 linhas de c\u00f3digo para criar um arquivo se posso clicar com o bot\u00e3o direito e selecionar \u201cNovo arquivo\u201d?</p> <p>Bom, este modo de pensar vem, de maneira geral, de um desconhecimento do funcionamento do terminal. As coisas n\u00e3o s\u00e3o t\u00e3o complicadas quanto parecem a primeira vista. Pelo contr\u00e1rio, ap\u00f3s se habituar com o terminal, conseguimos gerenciar arquivos e projetos com uma velocidade muito maior, al\u00e9m de termos muito mais controle sobre nossos arquivos e comandos.</p> <p>Al\u00e9m disso, o terminal \u00e9 uma ferramenta muito poderosa que nos permite executar muitos comandos que n\u00e3o possuem interface visual, como a execu\u00e7\u00e3o de comandos Python, Git, Curl e muito mais.</p>"},{"location":"auxiliar/terminal/#o-terminal-requer-paciencia","title":"O terminal requer PACI\u00caNCIA!","text":"<p>N\u00e3o se preocupe se achar ele confuso ou contraintuitivo no come\u00e7o. Ele vai te acompanhar na sua jornada por muitos anos, e se tornar proficiente no uso do terminal vir\u00e1 com o tempo. No come\u00e7o, vamos perder um pouco de tempo tentando us\u00e1-lo agora, para ganhar tempo no futuro.</p>"},{"location":"auxiliar/terminal/#comandos-basicos-do-terminal","title":"Comandos Basicos do Terminal:","text":"<p>O n\u00famero de comandos nativos do terminal \u00e9 imenso, e se incluirmos pacotes com mais comandos (como npm), esse n\u00famero se torna quase infinito. Ent\u00e3o, por enquanto, vamos focar em aprender os comandos mais b\u00e1sicos do terminal e de uso cotidiano, e conforme necess\u00e1rio vamos pesquisando e usando novos comandos.</p> <ul> <li> <p><code>cd nome_da_pasta</code>: O comando \u201ccd\u201d \u00e9 provavelmente o comando mais utilizado no terminal. Vindo do termo \u201cChange Directory\u201d, sua fun\u00e7\u00e3o \u00e9 justamente a de mudar o diret\u00f3rio (pasta) na sua m\u00e1quina, o que vamos utilizar para entrar e sair de pastas e arquivos.</p> <p>Dica: Nas primeiras aulas, abram o gerenciador de arquivos de sua m\u00e1quina junto com o terminal e naveguem em paralelo nos dois. Assim, podemos ligar uma interface visual ao nosso terminal, o que pode ajudar a entender o in\u00edcio conturbado.</p> <p></p> </li> <li> <p><code>ls</code>: Vem de \u201clist\u201d. Serve para listar todas as pastas e arquivos em um diret\u00f3rio(pasta) da sua m\u00e1quina, especificamente da pasta onde o seu terminal estiver localizado, que podemos ver no texto ao lado do cursor no terminal.</p> <p></p> </li> <li> <p><code>clear</code>: Simplesmente limpa o terminal, que pode ficar cheio de texto facilmente.</p> </li> <li><code>touch X</code>: Cria um arquivo vazio com o nome e extens\u00e3o de X, por exemplo <code>touch example.py</code> iria criar um arquivo vazio chamado <code>example.py</code>.</li> <li><code>mkdir X</code>: Cria um diret\u00f3rio(pasta) com o nome de X</li> <li>Tab: Este n\u00e3o \u00e9 um comando, mas sim um atalho, pressionar tab 1 vez preenche o texto que voc\u00ea est\u00e1 escrevendo, e caso haja mais de 1 possibilidade, pressionar 2 vezes lista todas as possibilidades, como o comando ls faz.</li> <li><code>.</code> e <code>..</code>: Novamente n\u00e3o s\u00e3o comandos, mas sim caminhos. Quando mexemos em diret\u00f3rios do terminal, utilizamos <code>.</code> ou \u201csource\u201d para indicar \u201co diret\u00f3rio ATUAL\u201d, ou seja, onde nosso terminal se encontra. E \u201c..\u201d refere-se ao diret\u00f3rio superior ou pai do atual, ou seja, \u201cvoltar um para tr\u00e1s\u201d.</li> <li>Admin/Sudo: Alguns comandos podem necessitar permiss\u00f5es de administrador para serem executados. Em caso de Windows, basta iniciar o terminal como administrador, para quem usa Mac e Linux \u00e9 necess\u00e1rio utilizar o comando Sudo como prefixo do comando que requer administra\u00e7\u00e3o.</li> </ul>"},{"location":"auxiliar/terminal/#um-pequeno-exercicio","title":"Um pequeno exercicio:","text":"<p>Para praticar um pouco, segue um exerc\u00edcio bem simples, apenas para testar os comandos. </p> <p>Abra o seu terminal e seu gerenciador de arquivos, e deixe eles na mesma pasta (por exemplo, eu deixarei na pasta \u201cHome\u201d, que no meu computador \u00e9 o diret\u00f3rio padr\u00e3o de ambos).</p> <p></p> <p>Daqui, utilizando apenas o terminal, crie uma pasta e navegue para ela. Dentro desta pasta crie outra pasta e dentro desta crie um arquivo, ap\u00f3s isso volte ao estado inicial do terminal. Depois reproduza os passos no seu navegador de arquivos, para assimilar o que \u00e9 feito visualmente e o que \u00e9 feito pelo terminal. </p>"},{"location":"auxiliar/terminal/#materiais-externos","title":"Materiais externos:","text":"<p>Seguem alguns materiais externos para ajudar no primeiro contato com o terminal. Para aqueles que preferirem, temos conte\u00fados em v\u00eddeo e uma documenta\u00e7\u00e3o dos comandos terminal. </p> <p>Video longo contendo um resum\u00e3o de comandos:</p> <p>obs: Neste video varios comandos n\u00e3o essenciais inicialmente s\u00e3o abordados</p> <p>Playlist com videos sobre cada comando:</p> <p>https://www.youtube.com/playlist?list=PLS1QulWo1RIb9WVQGJ_vh-RQusbZgO_As</p> <p>Introdu\u00e7\u00e3o do Ubuntu:</p> <p>https://ubuntu.com/tutorials/command-line-for-beginners#1-overview</p> <p>Cheat Sheet:</p> <p>https://cheatography.com/davechild/cheat-sheets/linux-command-line/</p>"},{"location":"auxiliar/venv/","title":"Ambientes virtuais em Python (<code>venv</code>)","text":"<p>O gerenciamento de configura\u00e7\u00e3o \u00e9 uma pr\u00e1tica essencial para desenvolvedores, que consiste em identificar, organizar e controlar as mudan\u00e7as nos componentes de um projeto ao longo do tempo. Isso garante que todas as partes do sistema estejam alinhadas, reduzindo problemas de incompatibilidade e facilitando a manuten\u00e7\u00e3o. No contexto do desenvolvimento em Python, isso inclui definir a vers\u00e3o do Python utilizada, os pacotes instalados e suas respectivas vers\u00f5es.</p> <p></p> <p>Considere o seguinte cen\u00e1rio: quando voc\u00ea come\u00e7ou a usar Python, a vers\u00e3o mais recente talvez fosse o Python 3.11 ou 3.12. Atualmente, estamos no Python 3.13, e o lan\u00e7amento do Python 3.14 j\u00e1 est\u00e1 programado. Qual o problema disso? Do ponto de vista do avan\u00e7o da tecnologia isso parece \u00f3timo! Mas pense nos seus projetos antigos. O que acontecer\u00e1 com eles quando voc\u00ea atualizar a vers\u00e3o do Python no seu computador para uma vers\u00e3o mais recente que muda um comportamento ou remove uma fun\u00e7\u00e3o que voc\u00ea utilizava no projeto?</p> <p>O exemplo da vers\u00e3o do Python \u00e9 um pouco mais dr\u00e1stico, mas e quanto \u00e0s in\u00fameras bibliotecas/pacotes que voc\u00ea utiliza em cada projeto? Durante a gradua\u00e7\u00e3o, os projetos s\u00e3o, na grande maioria, abandonados assim que voc\u00ea acaba o semestre. No mercado de trabalho voc\u00ea n\u00e3o poder\u00e1 se dar a esse luxo: projetos antigos s\u00e3o em geral mantidos por bastante tempo.</p> <p>Para resolver esse (e outros) problema, foram criados os ambientes virtuais (<code>venv</code>) do Python. Ele cria uma \"nova instala\u00e7\u00e3o\" do Python exclusiva para o seu projeto e os pacotes s\u00e3o instalados apenas nesse ambiente. Ou seja, quando voc\u00ea muda de projeto, basta mudar de ambiente virtual para usar uma instala\u00e7\u00e3o diferente, com um conjunto diferente de pacotes.</p> <p>Outras linguagens de programa\u00e7\u00e3o</p> <p>Todas as grandes linguagens de programa\u00e7\u00e3o atuais possuem algum tipo de ferramenta desse tipo (algumas melhores, algumas piores). Por exemplo, o NodeJS, que utilizaremos em um futuro pr\u00f3ximo, n\u00e3o apenas faz o controle dos pacotes espec\u00edficos de cada projeto, mas tamb\u00e9m avisa o desenvolvedor quando existe uma vers\u00e3o mais recente desses pacotes e sugere a atualiza\u00e7\u00e3o.</p>"},{"location":"auxiliar/venv/#criando-um-ambiente-virtual","title":"Criando um ambiente virtual","text":"<p>Para criar um ambiente virtual (<code>venv</code>), utilizaremos um comando similar a este:</p> Windows /Linux MacOS  <pre><code>python -m venv NOME_DA_PASTA_DO_VENV\n</code></pre> <pre><code>python3 -m venv NOME_DA_PASTA_DO_VENV\n</code></pre> <p>\u00c9 comum utilizarmos nomes como <code>env</code> ou <code>.env</code> para o <code>NOME_DA_PASTA_DO_VENV</code>. Para Programa\u00e7\u00e3o Eficaz, vamos padronizar o uso do nome <code>env</code>. Assim, o comando que vamos utilizar \u00e9:</p> Windows /Linux MacOS  <pre><code>python -m venv env\n</code></pre> <pre><code>python3 -m venv env\n</code></pre> <p>Esse comando vai criar uma pasta chamada <code>env</code> dentro da pasta onde ele foi executado. Todos os arquivos necess\u00e1rios estar\u00e3o dentro da pasta <code>env</code>.</p> <p>Apagando um <code>venv</code></p> <p>Se voc\u00ea n\u00e3o precisar mais do seu ambiente virtual (ou tiver criado no lugar errado), basta apagar a pasta <code>env</code>.</p>"},{"location":"auxiliar/venv/#ativando-um-ambiente-virtual","title":"Ativando um ambiente virtual","text":"<p>Ser\u00e1 necess\u00e1rio ativar o ambiente virtual toda vez que voc\u00ea for trabalhar com ele. No come\u00e7o isso pode parecer um pouco ma\u00e7ante, mas \u00e9 apenas um comando e voc\u00ea logo vai se acostumar:</p> Windows PowerShellWindows Prompt de ComandoLinux/MacOS <pre><code>env\\Scripts\\Activate.ps1\n</code></pre> <pre><code>env\\Scripts\\activate.bat\n</code></pre> <pre><code>source env/bin/activate\n</code></pre> <p>Importante</p> <p>Se voc\u00ea utilizar um nome diferente de <code>env</code> para o seu ambiente virtual, lembre-se de substitu\u00ed-lo no comando acima. Por exemplo: se o seu ambiente virtual se chama <code>meu-ambiente</code>, o comando ser\u00e1 <code>source meu-ambiente/bin/activate</code> (ou <code>meu-ambiente\\Scripts\\activate.bat</code>, no Windows).</p> <p>Pronto! Agora quando voc\u00ea utilizar o Python nesse terminal, ser\u00e1 utilizada a vers\u00e3o do ambiente virtual.</p> <p>Importante</p> <p>Para saber se o ambiente virtual foi ativado com sucesso, basta verificar se no terminal aparece o nome do ambiente virtual no come\u00e7o da linha.</p> <p> Ambiente Virtual ativo </p> <p>Importante</p> <p>Os comandos acima ativam o ambiente virtual para aquela inst\u00e2ncia do terminal. Ou seja, se voc\u00ea abrir outro terminal, mesmo que seja na mesma pasta, voc\u00ea estar\u00e1 utilizando o Python do sistema.</p>"},{"location":"entregas/01-ELI5/","title":"Explain Like I'm 5 (ELI5)","text":"<p>Data de entrega: 09/02</p> <p>Elabore uma explica\u00e7\u00e3o para os termos abaixo que at\u00e9 uma crian\u00e7a de 5 anos entenderia.</p> <ul> <li>URL</li> <li>Navegador (browser)</li> <li>DNS</li> <li>IPv4</li> <li>IPv6</li> <li>HTTP</li> <li>Verbos HTTP</li> <li>Roteador</li> <li>Servidor</li> <li>Requisi\u00e7\u00e3o (request)</li> <li>Resposta (response)</li> <li>POST</li> <li>GET</li> </ul> <p>Voc\u00ea n\u00e3o precisa (e provavelmente n\u00e3o deve) seguir esta ordem, mas tente manter o texto conciso.</p> <p>Alguns exemplos de ELI5: https://www.reddit.com/r/explainlikeimfive/</p>"},{"location":"entregas/01-ELI5/#rubrica","title":"Rubrica","text":"<p>A nota desta atividade ser\u00e1 calculada considerando tr\u00eas aspectos:</p> <ol> <li>Qualidade da resposta (boas analogias, conceitos corretamente explicados, etc.);</li> <li>Qualidade do texto (texto bem escrito \u00e9 diferente de texto longo);</li> <li>Quantidade de termos apresentados.</li> </ol> <p>A qualidade da resposta e do texto limitam o conceito final do trabalho:</p> <ul> <li>Erros (conceituais ou textuais) pontuais limitam a B+;</li> <li>Textos que explicam os termos por t\u00f3picos sem o uso de uma narrativa limitam a B+;</li> <li>Erros frequentes ou graves limitam a C.</li> </ul> <p>Al\u00e9m disso, respostas bem escritas e com boas analogias podem receber um b\u00f4nus de 0,5 conceito (limitado a A+).</p> <ul> <li>Cada termo explicado vale 1 ponto (limitado a 10 pontos).</li> </ul>"},{"location":"entregas/01-ELI5/#entrega","title":"Entrega","text":"<p>A resposta deve ser entregue no Blackboard como texto simples no formato pdf.</p>"},{"location":"entregas/03-servidor-js/","title":"03 - Servidor de desafios Javascript","text":""},{"location":"entregas/03-servidor-js/#servidor-js","title":"Servidor JS","text":"<p>Entrega</p> <p>  07/10 (segunda-feira)</p> <p>  08/10 (ter\u00e7a-feira)</p> <p>  13/10 (domingo)</p> <p> Individual</p> <p> Entrega via Blackboard.</p> <p> Para mais informa\u00e7\u00f5es, veja o link a seguir: Servidor JS </p>"},{"location":"projetos/aps1/","title":"APS 1","text":"<p>Entrega</p> <p> 22/02 (s\u00e1bado)</p> <p> at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via  Blackboard.</p>"},{"location":"projetos/aps1/#para-que-preciso-aprender-isso","title":"Para que preciso aprender isso?","text":"<p>Como comentado na aula, o banco de dados \u00e9 uma parte muito importante nas diferentes arquiteturas de software, necessitando cuidados especiais na sua cria\u00e7\u00e3o e manipula\u00e7\u00e3o. Vamos nesta APS praticar comandos da linguagem SQL com o objetivo de: - Reconhecer a linguagem SQL para o envio de instru\u00e7\u00f5es para um banco de dados. - Identificar os comandos de cria\u00e7\u00e3o de tabelas e manipula\u00e7\u00e3o de dados, incuindo os principais par\u00e2metros.</p>"},{"location":"projetos/aps1/#nao-sei-nada-sobre-sql-por-onde-comeco","title":"N\u00e3o sei nada sobre SQL! Por onde come\u00e7o?","text":"<p>Uma das compet\u00eancias importantes para o cientista da computa\u00e7\u00e3o \u00e9 exercitar o aprender a aprender e portanto voc\u00eas podem buscar os conhecimentos que precisam em boas fontes de dados. Hoje existe algumas fontes na Internet que pode ajudar muito, tais como:</p> <ul> <li>W3 Schools (https://www.w3schools.com/): uma plataforma mantida na Noruega com tutoriais de aprendizado e experimenta\u00e7\u00e3o para v\u00e1rias linguagens, inclusive o SQL. Voc\u00ea pode encontrar tudo o que precisa l\u00e1!</li> <li>SQLite Tutorial (https://www.sqlitetutorial.net/): como iremos trabalhar nesta APS com o SQLite, este tutorial pode tamb\u00e9m te auxiliar no desenvolvimento dos exerc\u00edcios.</li> </ul> <p>Lembrando que as respostas dos exerc\u00edcios ser\u00e3o liberados ap\u00f3s a entrega da APS e iremos comentar em sala de aula cada resolu\u00e7\u00e3o.</p>"},{"location":"projetos/aps1/#o-que-voce-precisa-saber-e-fazer-antes-de-iniciar-os-exercicios","title":"O que voc\u00ea precisa saber e fazer antes de iniciar os exerc\u00edcios","text":"<ul> <li>Voc\u00ea n\u00e3o precisa (neste momento) utilizar o SQLite instalado em seu computador para trabalhar com esta APS mas n\u00e3o impedimos caso queira desenvolver os exerc\u00edcios em uma inst\u00e2ncia local.</li> <li>Sugerimos o uso de um sandbox executado 100% no navegador, acessando pela URL https://www.convertcsv.com/sqlite-online.htm</li> <li>Fa\u00e7a o download da base de dados imoveis.db</li> <li>Fa\u00e7a a carga do banco de dados clicando no bot\u00e3o <code>Load an SQLite database</code> e selecionando o arquivo acima. Depois de executado com sucesso, a tabela <code>imoveis</code> estar\u00e1 carregada no banco de dados e voc\u00ea pode iniciar a resolu\u00e7\u00e3o dos exerc\u00edcios.</li> <li>A entrega dos exerc\u00edcios deve ser enviada em PDF pelo Blackboard com texto gerado em LaTeX, usando o template dispon\u00edvel em https://www.overleaf.com/read/zgybjvrygnfw#19e451</li> </ul>"},{"location":"projetos/aps1/#como-sera-a-avaliacao","title":"Como ser\u00e1 a avalia\u00e7\u00e3o?","text":"<p>O feedback referente a esta atividade ser\u00e1 disponibilizado a todos os alunos, indicando as quest\u00f5es corretas e incorretas incluindo as sugest\u00f5es para melhoria. O conceito na atividade ser\u00e1 atribu\u00eddo pelo n\u00famero de quest\u00f5es corretas, como segue a Tabela abaixo:</p> Conceito N\u00famero de Acertos I 0 D 2 C 4 C+ 6 B 8 B+ 10 A 12 A+ 14 <p>Refor\u00e7amos que n\u00e3o ser\u00e3o aceitos exerc\u00edcios entregues fora do prazo e que na entrega n\u00e3o realizada ser\u00e1 atribu\u00eddo conceito I</p>"},{"location":"projetos/aps1/#exercicios","title":"Exerc\u00edcios","text":"<ol> <li>Selecione todos os campos de todos os im\u00f3veis.</li> <li>Selecione o logradouro, bairro e cidade de todos os apartamentos.</li> <li>Selecione o campo valor dos im\u00f3veis, renomeando o mesmo para \"Pre\u00e7o\", e mostre apenas os im\u00f3veis do tipo <code>casa em condominio</code>.</li> <li>Conte quantos terrenos est\u00e3o registrados na tabela.</li> <li>Selecione todos os campos dos im\u00f3veis na cidade <code>Danielmouth</code>, ordenados pelo valor de forma decrescente.</li> <li>Selecione os bairros e valores dos im\u00f3veis cujo valor esteja entre 300.000 e 500.000.</li> <li>Conte quantos im\u00f3veis existem em cada bairro e exiba os resultados em ordem crescente de quantidade.</li> <li>Selecione o maior e o menor valor de im\u00f3veis do tipo <code>casa</code>.</li> <li>Selecione todos os campos dos im\u00f3veis cujo logradouro contenha a palavra <code>Court</code>.</li> <li>Selecione os logradouros e tipos dos im\u00f3veis, ordenando primeiro por tipo de forma ascendente e depois por logradouro de forma descendente.</li> <li>Suponha que todos os im\u00f3veis do tipo <code>apartamento</code> tiveram uma valoriza\u00e7\u00e3o de 10% devido a melhorias na infraestrutura local. Atualize o valor desses im\u00f3veis, aumentando-os em 10%.</li> <li>Foi identificado um erro nos registros de todos os im\u00f3veis localizados no bairro <code>South Nicholas</code>, onde os CEPs foram cadastrados incorretamente. Atualize o CEP de todos os im\u00f3veis do bairro <code>South Nicholas</code> para o valor <code>123987</code>.</li> <li>Suponha que a imobili\u00e1ria decidiu remover do seu cat\u00e1logo todos os im\u00f3veis adquiridos antes de \\(1^o\\) de janeiro de 2010, pois eles consideram esses im\u00f3veis muito antigos para as necessidades atuais do mercado. Escreva um comando SQL que exclua todos os im\u00f3veis da tabela <code>imoveis</code> que foram adquiridos antes dessa data.</li> <li>A imobili\u00e1ria percebeu que os terrenos na cidade de <code>East Nicholas</code> n\u00e3o est\u00e3o tendo a sa\u00edda esperada e decidiu remov\u00ea-los de sua lista de ofertas. Crie um comando SQL para excluir todos os registros de terrenos localizados em <code>East Nicholas</code>.</li> </ol>"},{"location":"projetos/projeto1/","title":"Projeto 1","text":"<p>Entrega</p> <p> 22/02 (s\u00e1bado)</p> <p> Commits at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via  GitHub Classroom</p>"},{"location":"projetos/projeto1/#objetivos","title":"Objetivos","text":"<p>Durante o primeiro handout n\u00f3s desenvolvemos o Get-it com as funcionalidades de listagem e cria\u00e7\u00e3o de anota\u00e7\u00f5es. Na primeira APS, voc\u00ea aprendeu a armazenar e recuperar dados de um banco de dados relacional. Agora, no Projeto 1, o seu objetivo \u00e9 aplicar o que aprendeu nos handouts e na APS para adicionar as seguintes funcionalidades ao sistema:</p> <ol> <li>Estilo da p\u00e1gina (utilizando o CSS que voc\u00ea j\u00e1 fez ou adicionando um novo estilo);</li> <li>Armazenamento em banco de dados SQLite ao inv\u00e9s de um arquivo texto;</li> <li>Apagar anota\u00e7\u00f5es;</li> <li>Editar anota\u00e7\u00f5es;</li> </ol>"},{"location":"projetos/projeto1/#rubrica","title":"Rubrica","text":"<p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto 1:</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D Entregou apenas o resultado do handout 01 funcionando e nada mais C Entregou o handout 01 e 1 das 4 tarefas funcionando C+ Entregou o handout 01 e 2 das 4 tarefas funcionando B Entregou o handout 01 e 3 das 4 tarefas funcionando B+ Entregou o handout 01 e as 4 tarefas funcionando A Atingiu o conceito B+ e o reposit\u00f3rio est\u00e1 organizado sem arquivos e c\u00f3digos desnecess\u00e1rios. Al\u00e9m disso, implementou uma p\u00e1gina HTML para o c\u00f3digo 404. <p>Conceito A+</p> <p>O conceito A+ ser\u00e1 dado aos trabalhos que superarem as expectativas do conceito A. Ou seja, implementarem alguma funcionalidade adicional (ex: realizar requisi\u00e7\u00f5es ass\u00edncronas em JavaScript para n\u00e3o precisar recarregar a p\u00e1gina inteira).</p> <p>\u00c9 importante que voc\u00ea discuta antes com o professor e deixe claro no README.md do seu reposit\u00f3rio o que foi feito no projeto para alcan\u00e7ar o conceito A+.</p>"},{"location":"projetos/projeto1/#detalhes-das-tarefas","title":"Detalhes das Tarefas","text":"<ol> <li>Veja mais descri\u00e7\u00f5es das tarefas que devem ser entregues no projeto  Clique aqui para ver os detalhes das tarefas.</li> </ol>"},{"location":"projetos/projeto1/projeto1a/","title":"Projeto 1: Parte A","text":"<p>Entrega</p> <p> 27/08 (ter\u00e7a-feira)</p> <p> Commits at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via   GitHub Classroom.</p>"},{"location":"projetos/projeto1/projeto1a/#objetivos","title":"Objetivos","text":"<p>Durante o primeiro handout n\u00f3s desenvolvemos o Get-it com as funcionalidades de listagem e cria\u00e7\u00e3o de anota\u00e7\u00f5es. No Desafio CSS voc\u00ea implementou um poss\u00edvel estilo para a p\u00e1gina. No segundo handout, voc\u00ea aprendeu a armazenar e recuperar dados de um banco de dados SQLite. Agora, no Projeto 1A, o seu objetivo \u00e9 aplicar o que aprendeu nos handouts e no desafio para adicionar as seguintes funcionalidades ao sistema:</p> <ol> <li>Estilo da p\u00e1gina (utilizando o CSS que voc\u00ea j\u00e1 fez ou adicionando um novo estilo);</li> <li>Armazenamento em banco de dados SQLite ao inv\u00e9s de um arquivo texto</li> <li>Apagar anota\u00e7\u00f5es</li> <li>Editar anota\u00e7\u00f5es</li> </ol>"},{"location":"projetos/projeto1/projeto1a/#rubrica","title":"Rubrica","text":"<p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto 1A:</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D Entregou apenas o resultado do handout 01 funcionando e nada mais C Entregou o handout 01 e 1 das 4 tarefas funcionando C+ Entregou o handout 01 e 2 das 4 tarefas funcionando B Entregou o handout 01 e 3 das 4 tarefas funcionando B+ Entregou o handout 01 e as 4 tarefas funcionando A Atingiu o conceito B+ e o reposit\u00f3rio est\u00e1 organizado sem arquivos e c\u00f3digos desnecess\u00e1rios. Al\u00e9m disso, implementou o uma p\u00e1gina HTML para o c\u00f3digo 404. <p>Conceito A+</p> <p>O conceito A+ ser\u00e1 dado aos trabalhos que superarem as expectativas do conceito A. Ou seja, implementarem alguma funcionalidade adicional (ex: realizar requisi\u00e7\u00f5es ass\u00edncronas em JavaScript para n\u00e3o precisar recarregar a p\u00e1gina inteira) .</p> <p>\u00c9 importante que voc\u00ea discuta com a professora e deixe claro no README.md do seu reposit\u00f3rio o que foi feito no projeto para alcan\u00e7ar o conceito A+.</p>"},{"location":"projetos/projeto1/projeto1a/#configuracao-inicial","title":"Configura\u00e7\u00e3o Inicial","text":"<p>Este projeto possui corre\u00e7\u00e3o autom\u00e1tica, desta forma, ser\u00e1 necess\u00e1rio configurar o reposit\u00f3rio do projeto no GitHub.</p> <p>Antes de iniciar o projeto, voc\u00ea deve configurar o reposit\u00f3rio do projeto. Para isso, siga os passos a seguir: </p>"},{"location":"projetos/projeto1/projeto1a/#detalhes-das-tarefas","title":"Detalhes das Tarefas","text":"<ol> <li>Veja mais descri\u00e7\u00f5es das tarefas que devem ser entregues no projeto  Clique aqui para ver os detalhes das tarefas.</li> </ol>"},{"location":"projetos/projeto1/projeto1b/","title":"Projeto 1: Parte B","text":"<p>Entrega</p> <p> 17/09 (ter\u00e7a-feira)</p> <p> Commits at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via   GitHub Classroom.</p> <p>Caso n\u00e3o tenha criado o reposit\u00f3rio, acesse o link Github classroom para criar o reposit\u00f3rio para este projeto.</p> <p>Na parte A voc\u00ea implementou o servidor em Python sem a ajuda de nenhum framework. Nesta segunda parte, o objetivo \u00e9 reimplementar as funcionalidades da parte A utilizando o Django. Al\u00e9m disso, vamos expandir as funcionalidades do sistema, utilizar um banco de dados mais robusto do que o SQLite e finalmente publicar o nosso sistema. Dependendo de quando voc\u00ea estiver lendo este enunciado, voc\u00ea ainda n\u00e3o saber\u00e1 como fazer todas essas coisas, mas n\u00f3s teremos alguns handouts para te auxiliar nesse processo.</p>"},{"location":"projetos/projeto1/projeto1b/#rubrica","title":"Rubrica","text":"<p>As tarefas a serem realizadas s\u00e3o:</p> <ol> <li>Reimplementar o CRUD da parte A em Django, ou seja, implementar as funcionalidades de cria\u00e7\u00e3o, listagem, edi\u00e7\u00e3o e remo\u00e7\u00e3o de anota\u00e7\u00f5es aplicando o mesmo estilo (css); Para mais detalhes acesse aqui </li> <li>Implementar o sistema de tags para as anota\u00e7\u00f5es; Para mais detalhes acesse aqui </li> <li>Utilizar o PostgreSQL (em um container Docker) ao inv\u00e9s do SQLite;</li> <li>Publicar a p\u00e1gina. Ao realizar o deploy do seu projeto 1B, adicione o link para acessar a aplica\u00e7\u00e3o no README.md do seu reposit\u00f3rio.</li> </ol> <p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto 1B:</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D O c\u00f3digo funciona, mas a tarefa 1 n\u00e3o est\u00e1 completa C Tarefa 1 completa C+ Tarefas 1 e tarefa 2 parcial B Tarefas 1 e 2 completas B+ Tarefas 1, 2 e 3 completas A Tarefas 1, 2, 3 e 4 completas A+ Tarefas 1, 2, 3 e 4 completas e implementou o sistema de tags Many-to-many acesse aqui"},{"location":"projetos/projeto1/projeto1b/#sugestao-de-cronograma","title":"Sugest\u00e3o de Cronograma","text":"<p>Segue abaixo uma sugest\u00e3o de cronograma para auxialiar o desenvolvimento do Projeto 1B. </p> <p>Obs.: Esse cronograma foi pensado para os alunos que v\u00e3o implementar o sistema at\u00e9 o conceito A+.</p> Calend\u00e1rio com o cronograma"},{"location":"projetos/projeto1/projeto1b/#cronograma","title":"Cronograma","text":"<ul> <li> 03/09 (ter\u00e7a-feira)<ul> <li> Implementar a funcionalidade de deletar uma anota\u00e7\u00e3o.</li> <li> Implementar a funcionalidade de atualizar uma anota\u00e7\u00e3o.</li> <li> Adicionar estilo CSS ao projeto.</li> <li> Atingiu o Conceito C</li> </ul> </li> <li> 05/09 (quinta-feira)<ul> <li> Implementar o sistema de tags</li> <li> Atingiu o Conceito B</li> </ul> </li> <li> 10/09 (ter\u00e7a-feira)<ul> <li> Utilizar o banco de dados relacionas PostgreSQL</li> <li> Atingiu o Conceito B+</li> </ul> </li> <li> 12/09 (quinta-feira)<ul> <li> Realizar o Deploy do Projeto</li> <li> Atingiu o Conceito A</li> </ul> </li> <li> 17/09 (ter\u00e7a-feira)<ul> <li> Aula Studio para finalizar o projeto</li> <li> Efetuar a entrega</li> <li> Atingiu o Conceito A+</li> </ul> </li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/","title":"Tarefas do Projeto 1A","text":"<p>No handout 01 v\u00e1rios trechos de c\u00f3digo pronto foram apresentados e explica\u00e7\u00f5es foram dadas sobre como cada trecho funciona. Neste projeto ser\u00e1 necess\u00e1rio que voc\u00ea implemente funcionalidades novas ao c\u00f3digo base para verificar que compreendeu o funcionamento do c\u00f3digo.</p> <p>Para este projeto, voc\u00easdeve implementar as 4 funcionalidades a seguir:</p>"},{"location":"projetos/projeto1/tarefas-projeto1/#1-estilo-da-pagina","title":"1. Estilo da p\u00e1gina","text":"<ul> <li>O estilo css j\u00e1 foi implementado semestre passado. Se voc\u00ea n\u00e3o guardou o arquivo, ser\u00e1 um bom momento para relembrar os coonceitos de CSS.</li> </ul> <p>Para isso, ser\u00e1 necess\u00e1rio:</p> <ul> <li> <p>Adicionar os arquivos <code>getit.css</code> e <code>getit.js</code> (se houver) na pasta do reposit\u00f3rio do projeto mantendo a estrutura de pastas coerente.</p> </li> <li> <p>Alterar os arquivos <code>index.html</code> e <code>notes.html</code> para adicionar essas novas informa\u00e7\u00f5es. Esta etapa deve ser realizada com cuidado pois simplesmente copiar o HTML do semestre passado n\u00e3o vai funcionar.</p> </li> </ul> <p>Realize alguns testes para inserir novas notas para verificar se as funcionalidades do Handout 01 continuam funcionando.</p> <p>Ao finalizar esta etapa, a p\u00e1gina deve estar com o estilo CSS e com as funcionalidades do Handout 01.</p>"},{"location":"projetos/projeto1/tarefas-projeto1/#2-persistencia-de-dados","title":"2. Persist\u00eancia de dados","text":"<p>Nesta etapa, voc\u00ea dever\u00e1 implementar a persist\u00eancia dos dados com SQLite utilizando os comandos aprendidos na APS 1.</p> <p>Dica </p> <ul> <li> <p>Nesta etapa, as altera\u00e7\u00f5es podem ser feitas no arquivo <code>utils.py</code>. Procure todos os trechos de c\u00f3digo que realizam leitura e escrita do arquivo <code>notes.json</code> e altere para que estas opera\u00e7\u00f5es sejam realizadas no banco de dados.</p> <ul> <li>Dica Fa\u00e7a as altera\u00e7\u00f5es aos poucos e teste! Evite fazer muitas altera\u00e7\u00f5es de uma vez s\u00f3. Por exemplo, altere a fun\u00e7\u00e3o que l\u00ea o arquivo <code>notes.json</code> para que ela leia do banco de dados e verifique se a aplica\u00e7\u00e3o continua funcionando. Muito provavelmente, voc\u00ea perceber\u00e1 que esqueceu de alterar alguma coisa e ter\u00e1 que consertar o c\u00f3digo.</li> </ul> <p>Somente prossiga para a pr\u00f3xima altera\u00e7\u00e3o quando tiver certeza que a altera\u00e7\u00e3o anterior est\u00e1 funcionando corretamente.</p> </li> <li> <p>Ao finalizar esta etapa, caso n\u00e3o utilize mais o arquivo <code>notes.json</code>, apague o arquivo do reposit\u00f3rio.</p> </li> <li> <p>Material de apoio: https://www.vrsofttech.com/python-flask/flask-with-sqlite-crud-application</p> </li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#3-apagar-anotacoes","title":"3. Apagar anota\u00e7\u00f5es","text":"<p>Permitir que o usu\u00e1rio apague uma anota\u00e7\u00e3o;</p> <ul> <li>Adicione um bot\u00e3o/link no <code>card</code> de cada nota existente para excluir esta nota.</li> <li>Um bot\u00e3o/link gera uma requisi\u00e7\u00e3o quando o usu\u00e1rio clica nele. Quando adicinar um bot\u00e3o/link, fa\u00e7a um teste para ver a requisic\u00e3o que \u00e9 gerada.</li> <li>Dica: Trabalhar com link (elemento html &lt;a&gt;) pode ser mais f\u00e1cil do que trabalhar com bot\u00f5es (elemento html &lt;\\button&gt;). Pesquise sobre a tag <code>&lt;a&gt;</code>.</li> <li>Voc\u00ea pode utilizar o m\u00e9todo GET ou POST para esta tarefa.<ul> <li>GET: Caso opte pelo m\u00e9todo GET a requisi\u00e7\u00e3o deve seguir o seguinte formato:     <pre><code>GET /delete/&lt;NOTA_ID&gt; HTTP/1.1\n</code></pre>     (Obs.: A rota pode variar um pouco dependendo da forma como voc\u00ea escolher implementar)</li> <li>POST: Caso opte pelo m\u00e9todo POST a requisi\u00e7\u00e3o deve seguir o seguinte formato:     <pre><code>POST /delete HTTP/1.1\n&lt;HTTP_HEADERS&gt;\n\nid=&lt;NOTA_ID&gt;\n</code></pre>     Para enviar o id no formul\u00e1rio, pesquise por <code>&lt;input type=\"hidden\" /&gt;</code></li> </ul> </li> <li>Observa\u00e7\u00e3o: Note que o <code>id</code> da nota n\u00e3o deve aparecer na tela, pois esta informa\u00e7\u00e3o \u00e9 irrelevante para o usu\u00e1rio.</li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#exemplo","title":"Exemplo","text":"Exemplo da funcionalidade de deletar"},{"location":"projetos/projeto1/tarefas-projeto1/#4-editar-anotacoes","title":"4. Editar anota\u00e7\u00f5es","text":"<p>Permitir a edi\u00e7\u00e3o de anota\u00e7\u00f5es existentes;</p> <ul> <li>Adicione um bot\u00e3o/link na nota para a fun\u00e7\u00e3o de editar. Ao clicar no bot\u00e3o de edi\u00e7\u00e3o, o usu\u00e1rio deve ser direcionado para uma p\u00e1gina html nova de edi\u00e7\u00e3o.<ul> <li>Ao clicar no bot\u00e3o/link, o servidor dever\u00e1 receber uma requisi\u00e7\u00e3o no seguinte formato:     <pre><code>GET /update/&lt;NOTA_ID&gt; HTTP/1.1\n</code></pre></li> </ul> </li> <li>A p\u00e1gina de edi\u00e7\u00e3o deve apresentar um formul\u00e1rio com o <code>t\u00edtulo</code> e <code>conte\u00fado</code> j\u00e1 preenchidos.</li> <li>Voc\u00ea precisar\u00e1 de um m\u00e9todo novo no arquivo <code>utils.py</code> que recebe como argumento o <code>id</code> de uma anota\u00e7\u00e3o e retorna esta anota\u00e7\u00e3o no formato de um objeto do tipo <code>Note</code>. </li> <li>Esta p\u00e1gina deve apresentar dois bot\u00f5es: <code>Salvar</code> e <code>Cancelar</code>. Caso os nomes sejam diferentes o teste de editar anota\u00e7\u00f5es n\u00e3o passar\u00e1 com sucesso.<ul> <li>Ao clicar no bot\u00e3o/link de <code>Cancelar</code> o usu\u00e1rio deve ser direcionado para a p\u00e1gina principal.</li> <li>Ao clicar no bot\u00e3o de <code>Salvar</code> a aplica\u00e7\u00e3o deve receber uma requisi\u00e7\u00e3o no seguinte formato:     <pre><code>POST /update HTTP/1.1\n&lt;HTTP_HEADERS&gt;\n\nid=&lt;NOTA_ID&gt;&amp;titulo=&lt;NOTA_TITULO&gt;&amp;detalhes=&lt;NOTA_DETALHES&gt;\n</code></pre> As altera\u00e7\u00f5es devem ser registradas no banco de dados e em seguida o usu\u00e1rio deve ser direcionado para a p\u00e1gina inicial.</li> </ul> </li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#exemplo_1","title":"Exemplo","text":"Exemplo da funcionalidade de editar"},{"location":"projetos/projeto1/tarefas-projeto1/#conceito-a","title":"Conceito A+","text":"<p>Para o conceito A+, converse com o professor e combine qual funcionalidade ser\u00e1 entregue para atingir este conceito. Essa funcionalidade deve ser validada com o professor. Funcionalidades n\u00e3o validadas n\u00e3o ser\u00e3o consideradas para o conceito A+.</p> <p>Al\u00e9m disso, a funcionalidade extra ser\u00e1 considerada somente se o projeto atingir o conceito A.</p>"},{"location":"projetos/projeto1/projeto1a/configurando-webhook/","title":"Configura\u00e7\u00f5es Iniciais","text":""},{"location":"projetos/projeto1/projeto1a/configurando-webhook/#configuracao-do-webhook","title":"Configura\u00e7\u00e3o do WebHook","text":"<ol> <li> <p>Acesse a p\u00e1gina do reposit\u00f3rio do projeto no GitHub e clique na aba <code>Settings</code>/<code>Configura\u00e7\u00f5es</code>.</p> <p> Configura\u00e7\u00f5es do reposit\u00f3rio </p> </li> <li> <p>No menu lateral, clique em <code>Webhooks</code></p> <p> Menu Webhooks </p> </li> <li> <p>Clique no bot\u00e3o <code>Add webhook</code>/<code>Adicionar webhook</code>.</p> <p> Adicionar Webhook </p> </li> <li> <p>Preencha os campos conforme a seguir:</p> <ul> <li>Payload URL:      <pre><code>http://3.19.41.18:8000/tecweb/Projeto1A\n</code></pre></li> <li>Content type: <code>application/json</code></li> </ul> <p> URL do payload </p> <ul> <li> <p>Which events would you like to trigger this webhook?: <code>Let me select individual events</code></p> <ul> <li>Deixe APENAS a op\u00e7\u00e3o <code>Branch or tag creation</code> selecionada.</li> </ul> <p> Op\u00e7\u00f5es Selecionadas </p> <ul> <li>DESMARQUE a op\u00e7\u00e3o <code>Pushes</code> caso esteja selecionada.</li> </ul> <p> </p> </li> <li> <p>E por fim, deixe a op\u00e7\u00e3o <code>Active</code> selecionada e clique no bot\u00e3o <code>Add webhook</code>/<code>Adicionar webhook</code>.      </p> </li> </ul> </li> <li> <p>Clone o seu reposit\u00f3rio do Github.</p> <p>Crie um arquivo <code>README.md</code> e adicione o conte\u00fado abaixo:</p> Conte\u00fado do README.md<pre><code>## Status da Entrega\n&lt;img \n    src=\"http://3.19.41.18:8000/tecweb/Projeto1A/svg/insper-tecnologias-web/NOME DO SEU REPOSITORIO\" \n    alt=\"svg\" \n    width=\"100%\" \n    height=\"300px\"\n/&gt;\n</code></pre> <p> Nome do Reposit\u00f3rio </p> <p>O valor do atributo <code>src</code> deve ser alterado com o nome do seu reposit\u00f3rio.</p> <p> </p> </li> <li> <p>Fa\u00e7a o commit e o push do arquivo <code>README.md</code> para o reposit\u00f3rio do Github.</p> </li> </ol> <p>Organizando o Reposit\u00f3rio</p>"},{"location":"projetos/projeto1/projeto1a/etapa-deletar/","title":"Dicas para implementa\u00e7\u00e3o do delete","text":""},{"location":"projetos/projeto1/projeto1a/organizacao-repositorio/","title":"Organiza\u00e7\u00e3o do reposit\u00f3rio Github","text":"<p>Depois de configurar o WebHook do seu reposit\u00f3rio Github vamos adicionar os arquivos referentes ao Handout 1.</p> <p>Caso n\u00e3o tenha feito a configura\u00e7\u00e3o do WebHook, clique aqui para configurar.</p>"},{"location":"projetos/projeto1/projeto1a/organizacao-repositorio/#estrutura-de-diretorios","title":"Estrutura de diret\u00f3rios","text":"<p>Copie os arquivos referentes ao Handout 01. O reposit\u00f3rio do projeto deve seguir a seguinte estrutura de diret\u00f3rios:</p> Organiza\u00e7\u00e3o do Reposit\u00f3rio"},{"location":"projetos/projeto1/projeto1a/organizacao-repositorio/#arquivo-gitignore","title":"Arquivo .gitignore","text":"<p>Existem arquivos que n\u00e3o devem ser versionados no reposit\u00f3rio. Um exemplo \u00e9 a pasta <code>__pycache__</code> que \u00e9 criado pelo Python. Se voc\u00ea procurar em seu reposit\u00f3rio Github criado para o handout 1 ver\u00e1 que este pasta est\u00e1 l\u00e1.</p> <p>Essa pasta \u00e9 desnecess\u00e1ria para o reposit\u00f3rio, pois \u00e9 criada automaticamente pelo Python. Para evitar que ela seja versionada, voc\u00ea deve criar um arquivo chamado <code>.gitignore</code> na raiz do seu reposit\u00f3rio e adicionar o seguinte conte\u00fado:</p> <pre><code>__pycache__/\n</code></pre> <p>Agora podemos come\u00e7ar a tabalhar nas tarefas do Projeto 1A.</p> <p>Tarefas do Projeto 1A</p>"},{"location":"projetos/projeto1/projeto1b/tags-many-to-many/","title":"Conceito A+","text":"<p>Para o conceito A+ do Projeto 1B, \u00e9 necess\u00e1rio implementar o sistema de tags Many-to-many.</p> <p>Nesta etapa, uma anota\u00e7\u00e3o poder\u00e1 ter v\u00e1rias tags e uma tag poder\u00e1 estar associada a v\u00e1rias anota\u00e7\u00f5es.</p> <p>Para mais detalhes de como implementar o sistema de tags, acesse a documenta\u00e7\u00e3o oficial do Django: Documenta\u00e7\u00e3o Oficial Django - Many-to-many</p>"},{"location":"projetos/projeto1/projeto1b/tarefa01/","title":"Reimplementando Projeto 1A usando Django","text":"<p>Reimplementar o CRUD da parte A em Django, ou seja, implementar as funcionalidades de cria\u00e7\u00e3o, listagem, edi\u00e7\u00e3o e remo\u00e7\u00e3o de anota\u00e7\u00f5es.</p> <p>Para esta etapa o ideal \u00e9 utilizar a estrutura que o framework disp\u00f5e. Como discutido na aula anterior, utilize mais de uma rota para mapear as diferentes requisi\u00e7\u00f5es que o cliente pode enviar ao servidor.</p>"},{"location":"projetos/projeto1/projeto1b/tarefa01/#finalizando-handout-django","title":"Finalizando Handout Django","text":"<p>Ao finalizar o handout de Django \u00e9 esperado que voc\u00ea tenha o seguinte resultado.</p> Handout Django Conclu\u00eddo"},{"location":"projetos/projeto1/projeto1b/tarefa01/#deletando-uma-anotacao","title":"Deletando uma anota\u00e7\u00e3o","text":"<p>Implemente a funcionalidade de deletar uma anota\u00e7\u00e3o.</p> Fluxo para implementar funcionalidade <ul> <li>Para implementar a funcionalidade de deletar, ser\u00e1 necess\u00e1rio entender como definir uma nova rota no arquivo <code>urls.py</code>. Acesse o link a seguir e tente descobrir como voc\u00ea dever\u00e1 realizar esta tareha https://docs.djangoproject.com/en/5.0/topics/http/urls/#example</li> <li>Talvez voc\u00ea precise de algo deste link https://docs.djangoproject.com/en/5.0/topics/db/queries/#retrieving-a-single-object-with-get</li> </ul>"},{"location":"projetos/projeto1/projeto1b/tarefa01/#editando-uma-anotacao","title":"Editando uma anota\u00e7\u00e3o","text":"<p>Para a edi\u00e7\u00e3o de anota\u00e7\u00e3o o fluxo \u00e9 bem similar ao realizado para a p\u00e1gina inicial. Tente se basear na fun\u00e7\u00e3o <code>views.index</code> e pense o que deve ser modificado.</p> <p>Para essa funcionalidade temos as seguintes possibilidades:</p>"},{"location":"projetos/projeto1/projeto1b/tarefa01/#acessando-pagina-de-edicao","title":"Acessando p\u00e1gina de edi\u00e7\u00e3o","text":"<ul> <li>Usu\u00e1rio clica no bot\u00e3o de editar e \u00e9 levado para a p\u00e1gina de edi\u00e7\u00e3o da nota;</li> </ul> Fluxo para implementar funcionalidade"},{"location":"projetos/projeto1/projeto1b/tarefa01/#atualizando-anotacao","title":"Atualizando anota\u00e7\u00e3o","text":"<ul> <li>Usu\u00e1rio digite um novo valor para t\u00edtulo/conte\u00fado e clica no bot\u00e3o de <code>Salvar</code>.</li> <li>Ap\u00f3s os dados serem atualizado no banco de dados o usu\u00e1rio \u00e9 redirecionado para a p\u00e1gina principal.</li> </ul> Fluxo para implementar funcionalidade"},{"location":"projetos/projeto1/projeto1b/tarefa01/#opcao-de-cancelar","title":"Op\u00e7\u00e3o de cancelar","text":"<ul> <li>Usu\u00e1rio clica no bot\u00e3o de cancelar e nenhum altera\u00e7\u00e3o \u00e9 realizada;</li> <li>Veja que mesmo que o usu\u00e1rio digitar algo e clicar em cancelar a nota n\u00e3o pode ser alterada.</li> <li>Note que ao clicar em cancelar, a requisi\u00e7\u00e3o ser\u00e1 <code>GET / HTTP/1.1</code></li> </ul> Fluxo para implementar funcionalidade"},{"location":"projetos/projeto1/projeto1b/tarefa01/#proxima-etapa","title":"Pr\u00f3xima etapa","text":"<p>Agora que implementou as funcionalidades acima, voc\u00ea pode prosseguir para a pr\u00f3xima etapa.</p> <p>Pr\u00f3xima Etapa</p>"},{"location":"projetos/projeto1/projeto1b/tarefa02/","title":"Implementando Sistema de Tags","text":"<p>Na parte B voc\u00ea deve implementar um sistema de tags para as anota\u00e7\u00f5es. Cada anota\u00e7\u00e3o pode ter no m\u00e1ximo uma tag (pode n\u00e3o ter nenhuma).</p> <p>No formul\u00e1rio de cria\u00e7\u00e3o/edi\u00e7\u00e3o de anota\u00e7\u00f5es deve haver um campo de texto adicional para o usu\u00e1rio digitar o nome da tag. </p> Implementa\u00e7\u00e3o de Tags <p>Voc\u00ea tamb\u00e9m precisa criar mais duas p\u00e1ginas: uma com a lista com todas as tags existentes e outra com as anota\u00e7\u00f5es de uma determinada tag. </p> <ul> <li>A lista das tags deve mostrar apenas os nomes das tags com um link para a sua respectiva p\u00e1gina de detalhes. <ul> <li>Para acessar esta p\u00e1gina, implemente a rota <code>http://localhost:8000/tags/</code>;</li> <li>Adicione um bot\u00e3o/link na p\u00e1gina inicial para acessar a lista de tags.</li> </ul> </li> </ul> Lista de todas tags <ul> <li>A p\u00e1gina de detalhes de uma tag deve mostrar todas as anota\u00e7\u00f5es com aquela tag espec\u00edfica.<ul> <li>Para acessar esta p\u00e1gina, implemente a rota <code>http://localhost:8000/tags/&lt;tag_id&gt;/</code>;</li> </ul> </li> </ul> <p>Ao clicar na tag <code>comida</code> na listagem de tags, o usu\u00e1rio \u00e9 levado a outra tela onde todas as anota\u00e7\u00f5es que possuem a tag <code>comida</code> s\u00e3o mostradas.</p> Anota\u00e7\u00f5es de uma tag espec\u00edfica"},{"location":"projetos/projeto1/projeto1b/tarefa02/#observacoes","title":"Observa\u00e7\u00f5es","text":"<ul> <li>Na tela de listagem de anota\u00e7\u00f5es por <code>tag</code>, n\u00e3o \u00e9 necess\u00e1rio fornecer as op\u00e7\u00f5es de deletar ou editar. Basta mostar as anota\u00e7\u00f5es.</li> <li>Caso n\u00e3o utilize a rela\u00e7\u00e3o Many-to-one descrita abaixo para a implementa\u00e7\u00e3o desta etapa, a solu\u00e7\u00e3o n\u00e3o ser\u00e1 considerada v\u00e1lida.</li> <li>N\u00e3o devem existir tags duplicadas no banco de dados.</li> <li>O usu\u00e1rio pode criar anota\u00e7\u00f5es sem tags. </li> </ul>"},{"location":"projetos/projeto1/projeto1b/tarefa02/#relacao-many-to-one","title":"Rela\u00e7\u00e3o Many-to-One","text":"<p>Para implementar o sistema de tags para as anota\u00e7\u00f5es ser\u00e1 necess\u00e1rio utilizar a rela\u00e7\u00e3o de Um para muitos do banco de dados.</p> <p>Atualmente, o projeto possui apenas uma tabela para armazenar as informa\u00e7\u00f5es das anota\u00e7\u00f5es.</p> <p>Agora, precisamos armazenar no banco de dados as informa\u00e7\u00f5es referentes a Tags. Poder\u00edamos simplemeste criar uma nova coluna a tabela chamada <code>Tag</code>. Por\u00e9m, como estamos utilizando banco de dados relacionais e queremos utilizar os recursos que este tipo de banco de dados nos oferece. Queremos criar uma tabela nova para armazenar as informa\u00e7\u00f5es da <code>Tag</code>.</p> <p>N\u00e3o se preocupe</p> <p>Caso tudo isso pare\u00e7a muito complicado. N\u00e3o se preocupe. Voc\u00eas se aprofundar\u00e3o no conte\u00fado de Banco de Dados Relacionais na Disciplina de Mega Dados.</p> <p>Ao criar uma tabela nova para armazenar as informa\u00e7\u00f5es de tags, nosso banco de dados ficar\u00e1 da seguinte forma:</p> <p>A tabela <code>Note</code> ganha uma coluna nova para armazenar o <code>id</code> da <code>Tag</code>. Essa coluna chamamos de Chave Estrangeira (Foreign Key), pois a coluna armazena o <code>id</code> origin\u00e1rio de outra tabela do banco de dados.</p> <ul> <li>No backend (no <code>view.py</code>), se essa tag j\u00e1 existir, voc\u00ea deve associar a anota\u00e7\u00e3o a ela, sen\u00e3o, crie uma nova tag no banco de dados e associe \u00e0 anota\u00e7\u00e3o.</li> </ul> <p>Outro Exemplo</p> <p>A documenta\u00e7\u00e3o oficial do Django apresenta um exemplo que pode ser acessa em: Documenta\u00e7\u00e3o Oficial Django - Many-to-one</p> <p>Obs.: O sistema de tags deve utilizar a rela\u00e7\u00e3o de um para muitos.</p>"},{"location":"projetos/projeto1/projeto1b/tarefa02/#exemplo","title":"Exemplo","text":"<p>Para te auxiliar na tarefa de implementar a funcionalidade das <code>Tags</code> no Projeto 1B, vamos apresentar um exemplo em Django. </p> <p>Neste exemplo, vamos utilizar dois modelos: <code>Escritor</code> e <code>Livro</code>. Assim, podemos utilizar a rela\u00e7\u00e3o de banco de dados um para muitos, onde um escritor pode estar vinculado a v\u00e1rios livros e um livro est\u00e1 vinculado a apenas um escritor.</p> Rela\u00e7\u00e3o Autor e Livros <p>No arquivo <code>models.py</code>, a classe <code>Livro</code> possui um campo do tipo <code>ForeignKey</code> para armazenar o <code>id</code> do escrito.</p> <pre><code>class Escritor(models.Model):\n    nome = models.CharField(max_length=200)\n    biografia = models.TextField()\n\nclass Livro(models.Model):\n    titulo = models.CharField(max_length=200)\n    escritor = models.ForeignKey(Escritor, on_delete=models.CASCADE)\n</code></pre> <p>Ao criar um livro, \u00e9 necess\u00e1rio informar um escritor j\u00e1 existente no banco de dados.</p> <p>No arquivo <code>views.py</code>, a fun\u00e7\u00e3o <code>exemplo</code> possui um exemplo para a cria\u00e7\u00e3o de um livro no banco de dados.</p> <pre><code>def exemplo(request, id):\n\n    # Buscando o escritor no banco de dados\n    escritor = Escritor.objects.get(id=id)\n\n    # Criando um livro e vinculando ao escritor\n    titulo_aleatorio = get_titulo_aleatorio()\n    livro = Livro(titulo=titulo_aleatorio, escritor=escritor)\n    livro.save()\n\n    return redirect('index')\n</code></pre> <p>O c\u00f3digo <code>escritor = Escritor.objects.get(id=id)</code> faz uma busca no banco de dados para obter o registro do <code>escritor</code>.</p> <p>O c\u00f3digo <code>livro = Livro(titulo=titulo_aleatorio, escritor=escritor)</code> cria um objeto do tipo <code>Livro</code>. Em seguida, o novo livro \u00e9 salvo no banco com o comando <code>livro.save()</code></p> <p>O interessante \u00e9 que a partir do objeto do tipo <code>Livro</code> \u00e9 poss\u00edvel acessar o objeto do <code>Escritor</code>.</p> <p>Veja um exemplo disso no arquivo <code>templates/livro/livros.html</code> </p> <pre><code>&lt;td&gt;{{ livro.escritor.nome }}&lt;/td&gt;\n</code></pre>"},{"location":"projetos/projeto1/projeto1b/tarefa02/#caso-queira-rodar-o-codigo","title":"Caso queira rodar o c\u00f3digo","text":"<p>Fa\u00e7a o download do projeto no reposit\u00f3rio: https://github.com/BarbaraTieko/2023.2-tecweb-django-many-to-one-example</p> <ul> <li>Crie um ambiente virtual</li> <li>Ative o ambiente virtual</li> <li>Instale o Django</li> <li> <p>Rode os seguintes comandos</p> <pre><code>python manage.py migrate\npython manage.py loaddata dados-iniciais.json\n</code></pre> </li> <li> <p>Em seguite, rode:</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Acesse: http://localhost:8000/</p> </li> <li> <p>Na p\u00e1gina, clique em: <code>Criar um livro para este escritor</code></p> <ul> <li>Este link chamar\u00e1 a fun\u00e7\u00e3o <code>views.exemplo</code>. Veja o que a fun\u00e7\u00e3o est\u00e1 fazendo. Este \u00e9 um bom exemplo para auxiliar o desenvolvimento da etapa de cria\u00e7\u00e3o de Tags</li> </ul> </li> </ul> <p>Pr\u00f3xima Etapa</p>"},{"location":"projetos/projeto1/projeto1b/tarefa03/","title":"Utilizar o PostgreSQL (em um container Docker) ao inv\u00e9s do SQLite","text":"<p>Para esta etapa a professora fr\u00e1 uma discuss\u00e3o no dia 10/09 e voc\u00eas devem seguir o handout abaixo:</p> <p>Pr\u00f3xima Etapa</p>"},{"location":"projetos/projeto1/projeto1b/tarefa04/","title":"Publicar a p\u00e1gina","text":"<p>Para esta etapa a professora far\u00e1 uma discuss\u00e3o no dia 12/09 e voc\u00eas devem seguir o handout abaixo:</p> <p>Pr\u00f3xima Etapa</p> <p>Aten\u00e7\u00e3o</p> <p>Ao realizar o deploy do seu projeto 1B, adicione o link para acessar a aplica\u00e7\u00e3o no README.md do seu reposit\u00f3rio.</p>"}]}