{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programa\u00e7\u00e3o Eficaz","text":"<p>Boas vindas ao curso de Programa\u00e7\u00e3o Eficaz 2025/2</p> <p>Professor</p> <ul> <li>M\u00e1rcio F. Stabile Jr. (marciofsj@insper.edu.br)</li> </ul> <p>Ninjas</p> <ul> <li>Eduardo Takei Yaginuma (eduardoty2@al.insper.edu.br)</li> <li>Yuri Henrique da Cunha Santos (yurihcs@al.insper.edu.br)</li> </ul> <p>Aulas:</p> <ul> <li>TER 07:30 - 09:30</li> <li>SEX 14:15 - 16:15</li> </ul> <p>Atendimento:</p> <ul> <li>TER 09:30 - 11:00</li> </ul> <p>Algumas Datas</p> <ul> <li>17/08: Entrega do ELI5</li> <li>29/08: Entrega do Projeto 1</li> <li>29/08: Entrega da APS1</li> </ul> <p>Links \u00dateis</p> <p>Exerc\u00edcios no Prairie Learn: https://us.prairielearn.com/pl/course_instance/186073</p> <p>Simulado da Avalia\u00e7\u00e3o Intermedi\u00e1ria: https://classroom.github.com/a/6GFbTBtV</p>"},{"location":"avaliacao/","title":"Avalia\u00e7\u00e3o Professor","text":""},{"location":"avaliacao/#avaliacao-barbara-agena","title":"Avalia\u00e7\u00e3o Barbara Agena","text":"<ul> <li>Link para avalia\u00e7\u00e3o: https://insper.avaliar.org/ </li> <li>C\u00f3digo da avalia\u00e7\u00e3o: 76062</li> <li>Chave: 027308 </li> </ul>"},{"location":"avaliacao/#avaliacao-manoela-campos","title":"Avalia\u00e7\u00e3o Manoela Campos","text":"<ul> <li>Link para avalia\u00e7\u00e3o: https://insper.avaliar.org/ </li> <li>C\u00f3digo da avalia\u00e7\u00e3o: 77056</li> <li>Chave: 716384</li> </ul>"},{"location":"notas/","title":"C\u00e1lculo da m\u00e9dia","text":"<p>A m\u00e9dia \u00e9 composta por 2 partes: \\(Nota de Avalia\u00e7\u00f5es (AV)\\) e \\(Nota\\ de\\ Projetos (Proj)\\):</p> \\[M\u00e9dia = 0.5\\cdot AV + 0.5\\cdot Proj\\] <p>Caso \\(AV &lt; 5\\), ou \\(Proj &lt; 5\\):</p> \\[M\u00e9dia = \\min({AV, Proj})\\]"},{"location":"notas/#conversao","title":"Convers\u00e3o","text":"<p>Para fins de c\u00e1lculo a seguinte convers\u00e3o ser\u00e1 utilizada (note a diferen\u00e7a no valor do conceito D):</p> Conceito Nota A+ 10 A 9 B+ 8 B 7 C+ 6 C 5 D 3 I 0"},{"location":"notas/#projetos","title":"Projetos","text":"<p>Teremos 3 projetos ao longo do semestre. A m\u00e9dia de \\(Projetos\\) ser\u00e1 calculada a partir da seguinte f\u00f3rmula:</p> \\[Proj = \\frac{20\\cdot Projeto1 + 25\\cdot Projeto2 + 25\\cdot Projeto3 + 25\\cdot APSs + 5\\cdot Atividades}{100}\\]"},{"location":"notas/#avaliacoes","title":"Avalia\u00e7\u00f5es","text":"<p>Teremos 2 avalia\u00e7\u00f5es ao longo do semestre. A m\u00e9dia de avalia\u00e7\u00f5es ser\u00e1 calculada como:</p> \\[AV = \\frac{40\\cdot AI + 60\\cdot AF}{100}\\]"},{"location":"aulas/01-getit/","title":"01 - Get-it","text":"<p>Este handout est\u00e1 dividido em 4 partes. Voc\u00ea pode acess\u00e1-las nos links abaixo:</p> <ul> <li>Parte 0: Antes de come\u00e7ar</li> <li>Parte 1: Criando o servidor</li> <li>Parte 2: Respondendo com p\u00e1ginas HTML</li> <li>Parte 3: Separando algumas responsabilidades</li> <li>Parte 4: Fazendo um formul\u00e1rio de cria\u00e7\u00e3o de anota\u00e7\u00e3o</li> </ul>"},{"location":"aulas/heroku/","title":"Deploy da Aplica\u00e7\u00e3o","text":"<p>At\u00e9 agora voc\u00ea desenvolveu as suas aplica\u00e7\u00f5es e testou o servidor localmente. Neste handout vamos aprender como publicar a nossa aplica\u00e7\u00e3o para que qualquer pessoa com acesso \u00e0 internet possa acess\u00e1-la. Existem diversas op\u00e7\u00f5es de hospedagem dispon\u00edveis. Alguns exemplos s\u00e3o a Amazon AWS, DigitalOcean, PythonAnywhere, Linode, ...</p> <p>Cada um tem suas vantagens e desvantagens. Em Programa\u00e7\u00e3o Eficaz n\u00f3s utilizaremos o Heroku pela facilidade de deploy de aplica\u00e7\u00f5es Python e por possuir uma conta gratuita para projetos pequenos. Se voc\u00ea preferir (ou quiser testar) qualquer outra op\u00e7\u00e3o, fique \u00e0 vontade para utiliz\u00e1-la.</p>"},{"location":"aulas/heroku/#primeiros-passos","title":"Primeiros passos","text":"<p>Para come\u00e7ar o processo de deploy, crie uma conta no Heroku.</p> <p>Instale a interface de linha de comando (CLI) do Heroku: Heroku CLI.</p> <p>Fa\u00e7a o login na sua conta do Heroku pelo terminal com o comando (voc\u00ea ser\u00e1 redirecionado para a p\u00e1gina do Heroku para completar o login):</p> <pre><code>heroku login\n</code></pre> <p>Agora voc\u00ea pode criar uma aplica\u00e7\u00e3o utilizando o comando (a documenta\u00e7\u00e3o dos comandos est\u00e1 dispon\u00edvel aqui):</p> <pre><code>heroku create\n</code></pre> <p>Esse comando vai criar uma aplica\u00e7\u00e3o com nome aleat\u00f3rio e vai imprimir no terminal algo parecido com isso:</p> <pre><code>Creating app... done, \u2b22 still-cove-69163\nhttps://still-cove-69163.herokuapp.com/ | https://git.heroku.com/still-cove-69163.git\n</code></pre> <p>No exemplo acima, a aplica\u00e7\u00e3o se chama <code>still-cove-69163</code>. Guarde o nome da sua aplica\u00e7\u00e3o.</p> Criando uma aplica\u00e7\u00e3o com nome espec\u00edfico <p>Voc\u00ea pode escolher o nome da sua aplica\u00e7\u00e3o com o comando <code>heroku create nome-da-aplicacao</code>, mas ele precisa ser \u00fanico em todo o Heroku, ou seja, ningu\u00e9m pode ter criado um projeto com o mesmo nome.</p> <p>Entre na pasta do seu projeto pelo terminal.</p> <p>Importante</p> <p>Seu projeto deve estar no git. Se n\u00e3o estiver, crie um reposit\u00f3rio antes de seguir para os pr\u00f3ximos passos deste handout.</p> <p>Quando for criar o reposit\u00f3rio, adicione um arquivo chamado <code>.gitignore</code> com o seguinte conte\u00fado:</p> <pre><code>env/\n*.egg-info\n*.pot\n*.py[co]\n.tox/\n__pycache__\nMANIFEST\ndist/\ndocs/_build/\ndocs/locale/\nnode_modules/\ntests/coverage_html/\ntests/.coverage\nbuild/\ntests/report/\n</code></pre> <p>Importante 2</p> <p>O projeto Django deve estar na raiz do reposit\u00f3rio github. <pre><code>&gt; REPOSIT\u00d3RIO GIT\n    &gt; getit\n    &gt; notes\n    manage.py\n    Procfile\n    requirements.txt\n</code></pre></p> <p>O deploy da aplica\u00e7\u00e3o \u00e9 iniciado automaticamente a partir de atualiza\u00e7\u00f5es em um reposit\u00f3rio git do Heroku. Para configurar esse reposit\u00f3rio no seu projeto, utilize o comando (importante 1: execute este comando na pasta raiz do seu projeto; importante 2: troque o <code>still-cove-69163</code> pelo nome do seu app gerado pelo Heroku):</p> <pre><code>heroku git:remote -a still-cove-69163\n</code></pre> <p>Para confirmar se est\u00e1 tudo certo, utilize o comando:</p> <pre><code>git remote -v\n</code></pre> <p>Ele deve listar (al\u00e9m de outros) os seguintes reposit\u00f3rios (claro, com o nome do seu app):</p> <pre><code>heroku  https://git.heroku.com/still-cove-69163.git (fetch)\nheroku  https://git.heroku.com/still-cove-69163.git (push)\n</code></pre>"},{"location":"aulas/heroku/#preparando-o-projeto","title":"Preparando o projeto","text":"<p>At\u00e9 o momento, n\u00f3s utilizamos o <code>python manage.py runserver</code> para executar o nosso servidor localmente. Esse comando \u00e9 apropriado apenas para testes no ambiente de desenvolvimento. Ele n\u00e3o \u00e9 otimizado para uma aplica\u00e7\u00e3o real. Para isso precisamos de um servidor de Web Server Gateway Interface (WSGI), que basicamente \u00e9 um intermedi\u00e1rio entre as requisi\u00e7\u00f5es que chegam no servidor e o c\u00f3digo Python. No nosso projeto n\u00f3s utilizaremos o Gunicorn (Green Unicorn). Voc\u00ea pode instal\u00e1-lo com (importante: lembre-se de ativar o ambiente virtual):</p> <pre><code>pip install gunicorn\n</code></pre> <p>Para testar sua aplica\u00e7\u00e3o com o Gunicorn, voc\u00ea pode executar o comando:</p> <pre><code>gunicorn getit.wsgi\n</code></pre> <p>O arquivo <code>wsgi.py</code></p> <p>O comando acima executou o Gunicorn com o arquivo de configura\u00e7\u00e3o <code>getit/wsgi.py</code>. Normalmente n\u00e3o \u00e9 necess\u00e1rio alterar esse arquivo, ent\u00e3o n\u00e3o vamos entrar em detalhes. O que voc\u00ea precisa saber \u00e9 que todo projeto Django possui um arquivo <code>wsgi.py</code> dentro da pasta do projeto.</p> <p>Agora vamos definir o arquivo de configura\u00e7\u00e3o do Heroku. Crie um arquivo chamado <code>Procfile</code> (o nome do arquivo n\u00e3o deve ter extens\u00e3o nenhuma - cuidado se for criar o arquivo em algum editor de texto, pois alguns colocam o <code>.txt</code> automaticamente) na raiz do projeto com o seguinte conte\u00fado:</p> <pre><code>release: python manage.py migrate\nweb: gunicorn getit.wsgi\n</code></pre> <p>A primeira linha faz com que o comando de migra\u00e7\u00e3o do Django seja executado quando o servidor for carregado. A segunda linha especifica como a aplica\u00e7\u00e3o deve ser executada.</p>"},{"location":"aulas/heroku/#configurando-os-arquivos-estaticos","title":"Configurando os arquivos est\u00e1ticos","text":"<p>Praticamente toda aplica\u00e7\u00e3o web possui arquivos est\u00e1ticos. Desde o primeiro servidor que implementamos foi necess\u00e1rio que o servidor fosse capaz de responder com o conte\u00fado desses arquivos. Entretanto, passar pela camada do Python para devolver um arquivo est\u00e1tico n\u00e3o \u00e9 uma boa estrat\u00e9gia para uma aplica\u00e7\u00e3o no mundo real. Arquivos est\u00e1ticos podem ser servidos de maneira muito mais eficiente. Por esse motivo, o Django serve arquivos est\u00e1ticos apenas em ambientes de teste/desenvolvimento, mas n\u00e3o em produ\u00e7\u00e3o.</p> <p>Para que a nossa aplica\u00e7\u00e3o funcione com todos os arquivos est\u00e1ticos ser\u00e1 necess\u00e1rio adicionarmos mais algumas depend\u00eancias e alterarmos algumas configura\u00e7\u00f5es. Comece instalando o WhiteNoise:</p> <pre><code>pip install whitenoise\n</code></pre> <p>O WhiteNoise \u00e9 respons\u00e1vel por servir arquivos est\u00e1ticos no Django de forma eficiente. Ele precisa ser adicionado \u00e0s configura\u00e7\u00f5es do Django. Abra o arquivo <code>getit/settings.py</code> e procure pela lista <code>MIDDLEWARE</code> e adicione o seguinte conte\u00fado logo depois de <code>'django.middleware.security.SecurityMiddleware',</code>:</p> <pre><code>'whitenoise.middleware.WhiteNoiseMiddleware',\n</code></pre> <p>Nesse mesmo arquivo, procure por <code>STATIC_URL = '/static/'</code> e adicione a seguinte linha logo em seguida:</p> <pre><code>STATIC_ROOT = BASE_DIR / 'staticfiles'\n</code></pre> <p>A primeira modifica\u00e7\u00e3o faz com que o WhiteNoise seja utilizado pelo Django. A constante <code>STATIC_ROOT</code> define onde o Django deve colocar os arquivos est\u00e1ticos que ser\u00e3o servidos em produ\u00e7\u00e3o (por isso voc\u00ea n\u00e3o precisou dele at\u00e9 agora).</p>"},{"location":"aulas/heroku/#outras-modificacoes-nas-configuracoes","title":"Outras modifica\u00e7\u00f5es nas configura\u00e7\u00f5es","text":"<p>Aproveite que est\u00e1 com o <code>settings.py</code> aberto e modifique o valor da constante <code>DEBUG</code> para <code>False</code>. Al\u00e9m disso, procure pela lista <code>ALLOWED_HOSTS</code>. Ela deve ser uma lista vazia. Por quest\u00f5es de seguran\u00e7a, o servidor Django aceita apenas requisi\u00e7\u00f5es vindas de dom\u00ednios previamente identificados. Para isso, descubra qual \u00e9 o dom\u00ednio do seu app Heroku. A URL do app ser\u00e1 parecida com essa: <code>https://still-cove-69163.herokuapp.com/</code> (lembrando que <code>still-cove-69163</code> \u00e9 o nome da minha aplica\u00e7\u00e3o, ent\u00e3o voc\u00ea ter\u00e1 que trocar o come\u00e7o pelo nome gerado para a sua aplica\u00e7\u00e3o). Adicione o dom\u00ednio (o que est\u00e1 entre o <code>https://</code> e a \u00faltima <code>/</code>) na lista <code>ALLOWED_HOSTS</code>:</p> <pre><code>ALLOWED_HOSTS = ['still-cove-69163.herokuapp.com', 'localhost', '127.0.0.1']\n</code></pre> <p>Note que tamb\u00e9m adicionamos o <code>'localhost'</code> e o <code>'127.0.0.1'</code>. Eles ser\u00e3o necess\u00e1rios para voc\u00ea testar a aplica\u00e7\u00e3o no seu computador.</p>"},{"location":"aulas/heroku/#criando-o-arquivo-requirementstxt","title":"Criando o arquivo <code>requirements.txt</code>","text":"<p>Cada projeto Python possui depend\u00eancias diferentes. Quando outra pessoa (ou voc\u00ea mesmo em outro computador) vai executar o seu projeto \u00e9 necess\u00e1rio executar uma s\u00e9rie de <code>pip install</code> com cada uma das depend\u00eancias. Para simplificar esse processo podemos criar o arquivo <code>requirements.txt</code>. Com esse arquivo basta executar <code>pip install -r requirements.txt</code> para instalar todas as depend\u00eancias do projeto. O Heroku tamb\u00e9m utiliza esse mesmo arquivo para configurar o seu projeto no servidor deles. O <code>requirements.txt</code> \u00e9 basicamente um arquivo texto com a lista das depend\u00eancias. Ele pode ser criado com o comando:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Importante</p> <p>Note que voc\u00ea dever\u00e1 executar o comando <code>pip install -r requirements.txt</code> com o ambiente virtual ativado. Ap\u00f3s rodar o comando verifique o arquivo <code>requirements.txt</code> que foi criado. Este arquivo deve possuir no m\u00e1ximo 10 linhas. Se esse arquivo possuir muito mais linhas \u00e9 poss\u00edvel que voc\u00ea n\u00e3o rodou com ambiente virtual ativo.</p>"},{"location":"aulas/heroku/#fazendo-o-deploy","title":"Fazendo o deploy","text":"<p>Agora estamos prontos para fazer o deploy! Fa\u00e7a um commit com todas essas modifica\u00e7\u00f5es e depois fa\u00e7a o push com o comando a seguir:</p> <pre><code>git push heroku master\n</code></pre> <p>Se o comando acima n\u00e3o funcionar</p> <p>Tente rodar o comando: <pre><code>git push heroku main\n</code></pre></p> <p>Esse processo \u00e9 um pouco demorado, pois o Heroku vai baixar o c\u00f3digo da sua aplica\u00e7\u00e3o, aplicar as configura\u00e7\u00f5es e executar o servidor. Depois disso existem duas possibilidades:</p> <ol> <li>Voc\u00ea estava usando o SQLite e agora sua aplica\u00e7\u00e3o est\u00e1 dispon\u00edvel no Heroku! Basta acessar o endere\u00e7o do seu app.</li> <li>Voc\u00ea estava usando o Postgres e ocorreu um erro parecido com esse:   <pre><code>remote: django.db.utils.OperationalError: could not connect to server: Connection refused\nremote:   Is the server running on host \"localhost\" (127.0.0.1) and accepting\nremote:   TCP/IP connections on port 5432?\n</code></pre></li> </ol> <p>Aplica\u00e7\u00f5es utilizando o SQLite</p> <p>Apesar de ser mais f\u00e1cil utilizar o SQLite, o Heroku pode apagar e subir uma nova inst\u00e2ncia da m\u00e1quina que roda o seu servidor a qualquer momento. Quando ele faz isso, o arquivo do banco de dados \u00e9 recriado e assim os seus dados s\u00e3o perdidos. Por esse motivo, o SQLite n\u00e3o deve ser utilizado em aplica\u00e7\u00f5es reais no Heroku.</p>"},{"location":"aulas/heroku/#aplicacoes-com-postgres","title":"Aplica\u00e7\u00f5es com Postgres","text":"<p>Agora que voc\u00ea fez o primeiro deploy (por mais que tenha ocorrido um erro) o Heroku identificou que voc\u00ea est\u00e1 publicando uma aplica\u00e7\u00e3o Django. Assim, ele j\u00e1 disponibiliza uma inst\u00e2ncia do Postgres para voc\u00ea! Acesse a sua aplica\u00e7\u00e3o no dashboard do Heroku e o Postgres deve aparecer nos add-ons instalados:</p> <p>Uma op\u00e7\u00e3o \u00e9 acessar os dados de configura\u00e7\u00e3o desse banco e alterar manualmente o dicion\u00e1rio <code>DATABASES</code> nas configura\u00e7\u00f5es. Entretanto, isso faria com que o seu c\u00f3digo parasse de funcionar em desenvolvimento (no seu computador). Por isso, vamos utilizar o <code>dj-database-url</code>:</p> <pre><code>pip install dj-database-url\n</code></pre> <p>Sempre que voc\u00ea adiciona (ou remove) uma depend\u00eancia \u00e9 necess\u00e1rio atualizar o <code>requirements.txt</code>:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Adicione o <code>import</code> no <code>getit/settings.py</code>:</p> <pre><code>import dj_database_url\n</code></pre> <p>Depois substitua o dicion\u00e1rio <code>DATABASES</code> por (assumindo que voc\u00ea utilizou a configura\u00e7\u00e3o do Postgres apresentada no handout anterior - caso contr\u00e1rio, adapte a URL):</p> <pre><code>DATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://localhost/getit?user=getituser&amp;password=getitsenha',\n        conn_max_age=600,\n        ssl_require=not DEBUG\n    )\n}\n</code></pre> <p>Fa\u00e7a um novo commit e d\u00ea o push em <code>heroku master</code> novamente. Acesse sua aplica\u00e7\u00e3o para verificar que est\u00e1 tudo funcionando.</p> <p>Parab\u00e9ns, voc\u00ea acaba de publicar sua aplica\u00e7\u00e3o Django no Heroku e j\u00e1 pode compartilhar com todos os amigos e familiares!</p> <p></p>"},{"location":"aulas/heroku/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Deploying to Heroku Server | Django (3.0) Crash Course Tutorials (pt 23): https://www.youtube.com/watch?v=kBwhtEIXGII</li> <li>Deploy a Django App to Heroku: https://www.youtube.com/watch?v=GMbVzl_aLxM</li> <li>Heroku Postgres - connecting with Django: https://devcenter.heroku.com/articles/heroku-postgresql#connecting-with-django</li> <li>Heroku - Django migrations: https://help.heroku.com/GDQ74SU2/django-migrations</li> <li>Heroku - Working with Django: https://devcenter.heroku.com/categories/working-with-django</li> </ul>"},{"location":"aulas/01-getit/parte0/","title":"01 - Get-it - O retorno","text":"<p>Quando estamos iniciando nossa jornada na programa\u00e7\u00e3o, \u00e9 comum desejar escrever c\u00f3digo imediatamente. No entanto, para que possamos programar de forma eficaz, \u00e9 fundamental dominar as ferramentas que ser\u00e3o a base para qualquer projeto: o uso do terminal e o Git/GitHub. Essas tecnologias n\u00e3o s\u00e3o apenas auxiliares; elas s\u00e3o essenciais para o trabalho de qualquer desenvolvedor.</p> <p>O terminal \u00e9 a interface que permite interagir diretamente com o sistema operacional, executando comandos de maneira eficiente e automatizada. Ele possibilita criar e gerenciar arquivos, configurar ambientes de desenvolvimento e executar scripts, atividades comuns no dia a dia de um programador. Aprender a utiliz\u00e1-lo proporciona maior controle e produtividade, permitindo lidar com tarefas que muitas vezes n\u00e3o s\u00e3o poss\u00edveis (ou s\u00e3o mais lentas) usando interfaces gr\u00e1ficas.</p> <p>J\u00e1 o Git e o GitHub s\u00e3o ferramentas que revolucionaram a maneira como o c\u00f3digo \u00e9 gerenciado e compartilhado. Com essas ferramentas, voc\u00ea aprender\u00e1 a organizar seu c\u00f3digo, evitar perdas de progresso e trabalhar de forma colaborativa.</p> <p>Compreender o terminal e o Git/GitHub antes de escrever c\u00f3digo n\u00e3o s\u00f3 constr\u00f3i uma base s\u00f3lida para o desenvolvimento, mas tamb\u00e9m prepara voc\u00ea para pr\u00e1ticas reais do mercado. Sem essas habilidades, mesmo projetos simples podem se tornar desorganizados e dif\u00edceis de gerenciar. Assim, aprender essas ferramentas no in\u00edcio da sua jornada garante que voc\u00ea progrida com mais confian\u00e7a e efici\u00eancia.</p>"},{"location":"aulas/01-getit/parte0/#parte-1-comandos-de-terminal","title":"Parte 1: Comandos de Terminal","text":"<p>Na disciplina de Programa\u00e7\u00e3o Eficaz precisaremos utilizar v\u00e1rias bibliotecas que n\u00e3o possuem interfaces gr\u00e1ficas. Tanto para realizar a instala\u00e7\u00e3o quanto para executar essas bibliotecas, ser\u00e1 necess\u00e1rio utilizar bastante o terminal. Por isso, \u00e9 importante que voc\u00ea se sinta confort\u00e1vel com ele. Para que isso aconte\u00e7a, acesse o link abaixo e leia o material antes de prosseguir.</p> <p>Ferramentas B\u00e1sicas: Terminal</p>"},{"location":"aulas/01-getit/parte0/#parte-2-git-e-github","title":"Parte 2: Git e GitHub","text":"<p>O Git e o GitHub s\u00e3o ferramentas j\u00e1 conhecidas que foram bastante usadas em Developer Life. Aqui em Programa\u00e7\u00e3o Eficaz, vamos aprofundar um pouco mais no uso dessas ferramentas. Como um dos nossos objetivos \u00e9 aprender a usar o terminal, podemos aproveitar a oportunidade para aprender a usar o Git pelo terminal. Para isso, acesse o link abaixo e leia o material antes de prosseguir.</p> <p>Ferramentas B\u00e1sicas: Git</p>"},{"location":"aulas/01-getit/parte0/#parte-3-primeira-atividade","title":"Parte 3: Primeira atividade","text":"<p>Agora que voc\u00ea j\u00e1 leu os materiais sobre o terminal e o Git, \u00e9 hora de colocar em pr\u00e1tica o que aprendeu. Para isso, siga os passos abaixo:</p> <ol> <li>Abra o terminal e crie uma pasta chamada <code>programacao-eficaz</code> em alguma pasta de sua prefer\u00eancia.</li> <li>Acesse o site do GitHub Classroom e crie o reposit\u00f3rio.</li> <li>Clone o reposit\u00f3rio para a pasta <code>programacao-eficaz</code> que voc\u00ea criou no passo 1 utilizando o terminal.</li> <li>Crie um ambiente virtual chamado <code>env</code> dentro da pasta do reposit\u00f3rio utilizando o terminal.</li> </ol> <p>Se voc\u00ea n\u00e3o souber o que \u00e9 um ambiente virtual ou como cri\u00e1-lo via terminal, leia o material dispon\u00edvel abaixo:</p> <p>Ferramentas B\u00e1sicas: Ambientes Virtuais</p>"},{"location":"aulas/01-getit/parte0/#parte-1","title":"Parte 1:","text":"<p>Agora que temos as ferramentas certas, podemos seguir para a parte 1 deste handout.</p>"},{"location":"aulas/01-getit/parte1/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte1/#parte-1-criando-o-servidor","title":"Parte 1: Criando o servidor","text":"<p>Vamos come\u00e7ar nosso curso com um exemplo de implementa\u00e7\u00e3o de uma p\u00e1gina bem simples. Durante o desenvolvimento discutiremos alguns dos detalhes e conceitos envolvidos. O objetivo deste handout \u00e9 introduzir alguns conceitos de Programa\u00e7\u00e3o Eficaz que ser\u00e3o importantes ao longo do curso a partir de uma abordagem m\u00e3o na massa.</p> <p>Ap\u00f3s o final deste handout voc\u00ea ter\u00e1 um prot\u00f3tipo do Get-it, nosso conhecido sistema de bloco de notas feito utilizando uma nova tecnologia.</p>"},{"location":"aulas/01-getit/parte1/#comecando-pelo-comeco","title":"Come\u00e7ando pelo come\u00e7o","text":"<p>Lembra que semestre passado n\u00f3s aprendemos sobre os diferentes tipos de teste de software? Vamos come\u00e7ar definindo uma hist\u00f3ria de usu\u00e1rio. O objetivo n\u00e3o \u00e9 fazer uma revis\u00e3o de Design, ent\u00e3o vamos assumir que temos uma persona pronta e o seu nome \u00e9 F\u00e1bio:</p> <p>Lista de anota\u00e7\u00f5es</p> <p>SENDO o F\u00e1bio</p> <p>POSSO digitar o endere\u00e7o do Get-it no navegador e visualizar a lista de anota\u00e7\u00f5es</p> <p>PARA lembrar os detalhes da minha pr\u00f3xima tarefa</p> <p>Muito bem. Agora podemos come\u00e7ar a desenvolver o nosso prot\u00f3tipo.</p> <p>Isso nos leva \u00e0 primeira pergunta: ok, o F\u00e1bio vai digitar o endere\u00e7o no navegador e apertar Enter, mas o que acontece depois disso?</p> <p>MUITA coisa. Vamos come\u00e7ar com uma explica\u00e7\u00e3o bastante simplista, mas que deve dar uma ideia geral dos passos. Se voc\u00ea tiver curiosidade, a Mozilla possui um material muito did\u00e1tico para quem est\u00e1 iniciando no desenvolvimento web.</p> <ol> <li>O navegador precisa dos dados da p\u00e1gina a ser mostrada, mas a informa\u00e7\u00e3o est\u00e1 em outro computador, o servidor, que est\u00e1 (muito provavelmente) fisicamente distante. Por isso, o endere\u00e7o digitado no navegador \u00e9 utilizado para encontrar a localiza\u00e7\u00e3o do servidor utilizando o DNS.</li> <li>Agora que o cliente (o computador do F\u00e1bio) sabe onde encontrar o servidor, ele entra em contato com o servidor pedindo os dados. Esse pedido \u00e9 o que chamamos de requisi\u00e7\u00e3o.</li> <li>Ao receber a requisi\u00e7\u00e3o, o servidor responde com a p\u00e1gina solicitada.</li> <li>O navegador recebe as partes que formam a p\u00e1gina (HTML, CSS, Javascript, imagens, etc.) e mostra (renderiza) para o F\u00e1bio.</li> </ol> <p>Essa \u00e9 uma lista bastante simplificada do que acontece, mas talvez esse \u00faltimo passo tenha sido simplificado demais. Cada parte que forma a p\u00e1gina (os arquivos CSS, Javascript, imagens, etc.) deve ser solicitada separadamente para o servidor. Ent\u00e3o os passos 1 a 3 s\u00e3o repetidos para cada uma delas.</p>"},{"location":"aulas/01-getit/parte1/#voce-disse-que-seria-mao-na-massa-mas-ainda-nao-toquei-no-codigo","title":"Voc\u00ea disse que seria m\u00e3o na massa, mas ainda n\u00e3o toquei no c\u00f3digo!","text":"<p>Eu sei, me desculpe. Agora sim, vamos come\u00e7ar!</p> <p>Vamos implementar um servidor bastante simplificado utilizando a biblioteca Flask. Para isso, crie dentro da pasta do seu reposit\u00f3rio criada anteriormente um arquivo chamado <code>servidor.py</code> (pode ser o nome que voc\u00ea preferir) com o seguinte conte\u00fado:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return \"\"\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Antes de tentarmos entender o c\u00f3digo, execute-o para vermos o que ele faz. Para isso, abra um terminal, ative o ambiente virtual e execute o arquivo <code>servidor.py</code>:</p> <pre><code>python servidor.py\n</code></pre> <p>Voc\u00ea deve ver uma mensagem parecida com esta:</p> <pre><code>ModuleNotFoundError: No module named 'flask'\n</code></pre> <p>O erro ocorreu porque o Flask n\u00e3o est\u00e1 instalado no seu ambiente virtual. Para corrigir isso, instale o Flask utilizando o <code>pip</code>:</p> <pre><code>pip install flask\n</code></pre> <p>Agora sim, execute o servidor novamente. Se tudo ocorrer bem, voc\u00ea ver\u00e1 uma mensagem parecida com esta:</p> <pre><code>WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 100-429-768\n</code></pre> <p>Essa mensagem indica que o servidor est\u00e1 rodando e pronto para receber requisi\u00e7\u00f5es.</p> <p>Abra o navegador de sua prefer\u00eancia e entre no endere\u00e7o apresentado pelo seu programa. No exemplo acima, o endere\u00e7o \u00e9 <code>http://127.0.0.1:5000</code></p> <p>Aten\u00e7\u00e3o</p> <p>Alguns navegadores podem n\u00e3o funcionar como esperado. Desta forma, teste em outros navegadores.</p> <p>Voc\u00ea deve estar vendo uma p\u00e1gina em branco. Se n\u00e3o estiver, tente acessar o endere\u00e7o a partir de outro navegador. Se mesmo assim n\u00e3o funcionar, verifique se o servidor est\u00e1 rodando e se o endere\u00e7o est\u00e1 correto.</p>"},{"location":"aulas/01-getit/parte1/#muito-bem-agora-vamos-entender-o-codigo-acima","title":"Muito bem, agora vamos entender o c\u00f3digo acima","text":"<p>Flask \u00e9 um microframework web escrito em Python, projetado para ser leve, flex\u00edvel e f\u00e1cil de usar. Ele \u00e9 amplamente utilizado para desenvolver aplica\u00e7\u00f5es web, permitindo que os desenvolvedores construam projetos de forma r\u00e1pida e eficiente. \u00c9 poss\u00edvel ver nele algumas caracter\u00edsticas que vimos no Django, mas de forma mais simplificada.</p> <ul> <li> <p><code>app = Flask(__name__)</code> cria uma inst\u00e2ncia da classe Flask, que ser\u00e1 a base da aplica\u00e7\u00e3o. O argumento <code>__name__</code> \u00e9 uma vari\u00e1vel pr\u00e9-definida em Python que cont\u00e9m o nome do m\u00f3dulo atual. Flask usa o nome do m\u00f3dulo para determinar a localiza\u00e7\u00e3o dos arquivos est\u00e1ticos (como imagens e arquivos html).</p> </li> <li> <p><code>@app.route('/')</code>: Define a rota principal da aplica\u00e7\u00e3o, ou seja, o que acontece quando voc\u00ea acessa <code>http://127.0.0.1:5000/</code> no navegador. A fun\u00e7\u00e3o logo abaixo \u00e9 chamada toda vez que algu\u00e9m acessa essa rota.</p> </li> <li><code>print(request.method)</code>: Exibe no terminal o m\u00e9todo HTTP usado na requisi\u00e7\u00e3o, como GET, POST, etc.</li> <li><code>print(request.headers)</code>: Exibe no terminal todos os cabe\u00e7alhos da requisi\u00e7\u00e3o HTTP, que incluem informa\u00e7\u00f5es como o tipo de navegador, o tipo de conte\u00fado aceito e outras configura\u00e7\u00f5es do cliente.</li> <li><code>return \"\"</code>: Retorna uma resposta vazia para o cliente, ou seja, n\u00e3o renderiza nada no navegador.</li> </ul> <p>O restante do c\u00f3digo inicia o servidor Flask e habilita o modo de depura\u00e7\u00e3o (debug mode), que recarrega automaticamente o servidor ao modificar o c\u00f3digo e exibe mensagens detalhadas de erro no navegador, \u00fateis para desenvolvimento.</p>"},{"location":"aulas/01-getit/parte1/#entendi-mas-entao-como-eu-faco-algo-aparecer-no-navegador","title":"Entendi, mas ent\u00e3o como eu fa\u00e7o algo aparecer no navegador?","text":"<p>Calma, pequeno gafanhoto. Antes de prosseguir, vamos entender mais alguns detalhes do que aconteceu at\u00e9 o momento.</p> <p>Quando acessamos o endere\u00e7o <code>http://127.0.0.1:5000/</code> no navegador, o navegador enviou uma requisi\u00e7\u00e3o para o servidor. O servidor recebeu essa requisi\u00e7\u00e3o e identificou qual a rota requisitada. No nosso caso, a rota requisitada foi a raiz do servidor, ou seja, a rota <code>/</code>. O servidor ent\u00e3o executou a fun\u00e7\u00e3o associada a essa rota e retornou uma resposta vazia.</p> <p>Dentro da fun\u00e7\u00e3o associada \u00e0 rota <code>/</code>, existem dois prints. O primeiro printa o m\u00e9todo HTTP utilizado na requisi\u00e7\u00e3o, que no nosso caso \u00e9 o m\u00e9todo GET. O segundo printa os cabe\u00e7alhos da requisi\u00e7\u00e3o, que cont\u00e9m informa\u00e7\u00f5es como o tipo de navegador, o tipo de conte\u00fado aceito e outras configura\u00e7\u00f5es do cliente. Toda vez que um navegador quer se comunicar com um servidor, ele envia uma requisi\u00e7\u00e3o HTTP contendo essas informa\u00e7\u00f5es.</p> <p>O seu terminal deve ter mostrado uma sa\u00edda parecida com esta (testei nos dispositivos que eu tinha dispon\u00edveis no momento):</p> MacOS - SafariMacOS - FirefoxAndroid - Chrome <pre><code>GET / HTTP/1.1\nHost: 0.0.0.0:8080\nUpgrade-Insecure-Requests: 1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\n</code></pre> <pre><code>GET / HTTP/1.1\nHost: localhost:8080\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:83.0) Gecko/20100101 Firefox/83.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nCookie: _ga=GA1.1.16347193.1542986176\nUpgrade-Insecure-Requests: 1\n</code></pre> <pre><code>GET / HTTP/1.1\nHost: 192.168.15.14:8080\nConnection: keep-alive\nSave-Data: on\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 11; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\n</code></pre> <p>Sugiro que voc\u00ea tamb\u00e9m tente acessar o mesmo endere\u00e7o a partir de navegadores e dispositivos diferentes. Caso voc\u00ea queira testar o acesso de um dispositivo diferente voc\u00ea vai precisar descobrir o IP do servidor.</p> <p>Nos testes acima eu acessei o servidor a partir do Android e, no meu laptop, do Firefox e do Safari. \u00c9 importante notar que cada um desses navegadores foi desenvolvido por empresas diferentes, no caso, Google, Mozilla e Apple. Mas ent\u00e3o como todos eles conseguem se comunicar com o nosso servidor? \u00c9 a\u00ed que entra o tal do HTTP.</p> <p>Os 3 exemplos mostrados acima s\u00e3o muito semelhantes, apesar de virem de fabricantes diferentes. Isso acontece porque todos eles seguem o mesmo protocolo, o Hyper Text Transfer Protocol. O que precisamos saber por enquanto \u00e9 que ele define como devem ser as requisi\u00e7\u00f5es e respostas nessa comunica\u00e7\u00e3o. Como o HTTP \u00e9 padronizado, se o seu servidor souber se comunicar em HTTP ele poder\u00e1 se comunicar com qualquer navegador, independente das implementa\u00e7\u00f5es espec\u00edficas.</p> <p>Nos exemplos n\u00f3s podemos ver que o texto \u00e9 enviado em um formato parecido com um dicion\u00e1rio: chaves, dois pontos e os valores. Esse conjunto de chaves e valores \u00e9 o cabe\u00e7alho (header) da requisi\u00e7\u00e3o (request) ou resposta (response). Como sempre, incentivo que voc\u00ea procure por conta pr\u00f3pria mais detalhes sobre esse protocolo. Essa \u00e9 apenas uma breve introdu\u00e7\u00e3o.</p> <p>Question</p> <p>Considere o texto a seguir:</p> <pre><code>GET / HTTP/1.1\nHost: 192.168.15.14:8080\nConnection: keep-alive\nSave-Data: on\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 11; Pixel 3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7\n</code></pre> <p>Escolha o op\u00e7\u00e3o verdadeira:</p> <ul> <li> O texto representa um Servidor de Nome de Dom\u00ednio.</li> <li> O texto representa uma resposta HTTP.</li> <li> O texto representa uma requisi\u00e7\u00e3o HTTP.</li> <li> O texto representa os dados enviados pelo Cliente.</li> </ul> <p>Resposta</p> <p>O texto representa uma requisi\u00e7\u00e3o HTTP. Para mais detalhes veja (request). </p>"},{"location":"aulas/01-getit/parte1/#e-agora-ja-podemos-enviar-a-resposta","title":"E agora, j\u00e1 podemos enviar a resposta?","text":"<p>Sim! Agora estamos prontos. Sem mais delongas, altere a seguinte linha no seu c\u00f3digo:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return 'Hello World'\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Acesse novamente a p\u00e1gina pelo seu navegador. Pronto, nosso primeiro servidor est\u00e1 funcionando e retornando uma resposta!</p> <p>Importante</p> <p>Servidores s\u00e3o como programas em loop infinito. Se quiser parar de rodar, basta encerrar o programa com Ctrl+C.</p> <p>Agora \u00e9 s\u00f3 seguir para a parte 2 deste handout.</p>"},{"location":"aulas/01-getit/parte2/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte2/#parte-2-respondendo-com-paginas-html","title":"Parte 2: Respondendo com p\u00e1ginas HTML","text":"<p>Nosso servidor j\u00e1 responde com <code>Hello World</code>, mas queremos muito mais que isso. Queremos implementar o nosso Get-it e para isso a p\u00e1gina precisa ter muito mais conte\u00fado e precisa ser apresentado de maneira estruturada. Est\u00e1 na hora de trazermos o bom e velho HTML de volta!</p> <p>Vamos devolver uma p\u00e1gina HTML simples, apenas para relembrar as coisas:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Get-it&lt;/h1&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return RESPONSE_TEMPLATE\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Testou? Funcionou? Podemos ir para o pr\u00f3ximo passo.</p>"},{"location":"aulas/01-getit/parte2/#mostrando-a-lista-de-anotacoes","title":"Mostrando a lista de anota\u00e7\u00f5es","text":"<p>Podemos come\u00e7ar a pensar no conte\u00fado da nossa p\u00e1gina principal. Vamos come\u00e7ar mostrando uma lista simples com os t\u00edtulos e detalhes das anota\u00e7\u00f5es. Voc\u00ea vai precisar baixar a seguinte imagem clicando neste link. Atrav\u00e9s do terminal, crie uma pasta chamada <code>static</code>. Dentro desta pasta, crie outra pasta chamada <code>img</code>. Salve essa imagem dentro da pasta <code>img</code>. Ou seja, o conte\u00fado do seu reposit\u00f3rio ser\u00e1:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- static\n    |- img\n      |- logo-getit.png\n</code></pre> <p>Para a lista de anota\u00e7\u00f5es vamos utilizar as tags HTML unordered list (<code>&lt;ul&gt;</code>), list item (<code>&lt;li&gt;</code>), heading (<code>&lt;h3&gt;</code>) e paragraph (<code>&lt;p&gt;</code>). Al\u00e9m disso, vamos mostrar uma imagem com o logo ao inv\u00e9s de um texto com o t\u00edtulo:</p> <pre><code>from flask import Flask, request\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"img/logo-getit.png\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Receita de miojo&lt;/h3&gt;\n    &lt;p&gt;Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;P\u00e3o doce&lt;/h3&gt;\n    &lt;p&gt;Abra o p\u00e3o e coloque o seu suco em p\u00f3 favorito.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Sorvete com cristais de leite&lt;/h3&gt;\n    &lt;p&gt;Sirva o seu sorvete favorito em uma vasilha e jogue leite em cima.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Iogurte natural&lt;/h3&gt;\n    &lt;p&gt;Deixe o leite fora da geladeira (esse \u00e9 mentira, n\u00e3o fa\u00e7a isso).&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Homer Simpson&lt;/h3&gt;\n    &lt;p&gt;~( 8(|)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Numero m\u00e1gico&lt;/h3&gt;\n    &lt;p&gt;142857&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;S\u00e9rie da Funda\u00e7\u00e3o - Isaac Asimov&lt;/h3&gt;\n    &lt;p&gt;\u00c9 boa, leia.&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n@app.route('/')\ndef index():\n    print(request.method)\n    print(request.headers)\n\n    return RESPONSE_TEMPLATE\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Se voc\u00ea rodou o c\u00f3digo acima deve ter percebido que algo deu errado. Voc\u00ea n\u00e3o achou que seria t\u00e3o simples assim, n\u00e3o \u00e9 mesmo?</p> <p>O arquivo da imagem do logo existe no seu computador (ou deveria existir - caso contr\u00e1rio, n\u00e3o se esque\u00e7a de baixar as imagens), mas o servidor precisa enviar esses arquivos como resposta quando forem solicitados.</p>"},{"location":"aulas/01-getit/parte2/#diferenciando-rotas","title":"Diferenciando rotas","text":"<p>Temos que implementar algumas coisas, mas vamos por partes. Verifique a sa\u00edda no seu terminal. Voc\u00ea deve encontrar algo assim:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET /img/logo-getit.png HTTP/1.1\" 404 -\n127.0.0.1 - - [24/Jan/2025 14:27:28] \"GET /favicon.ico HTTP/1.1\" 404 -\n</code></pre> <p>Quando o navegador acessa a p\u00e1gina, ele faz uma requisi\u00e7\u00e3o para <code>/</code>. Esta requis\u00e7\u00e3o \u00e9 respondida com a p\u00e1gina HTML que criamos. Dentro desse HTML, temos um link para a imagem do logo. O navegador ent\u00e3o faz uma nova requisi\u00e7\u00e3o para <code>/img/logo-getit.png</code>. Como somente definimos uma resposta para <code>/</code>, o servidor responde com um erro 404, que \u00e9  o c\u00f3digo HTTP para \"n\u00e3o encontrado\".</p> <p>Altere novamente o c\u00f3digo do seu servidor para:</p> <pre><code>from flask import Flask, render_template_string, url_for\n\napp = Flask(__name__)\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"{{ url_for('static', filename='img/logo-getit.png') }}\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Receita de miojo&lt;/h3&gt;\n    &lt;p&gt;Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;P\u00e3o doce&lt;/h3&gt;\n    &lt;p&gt;Abra o p\u00e3o e coloque o seu suco em p\u00f3 favorito.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Sorvete com cristais de leite&lt;/h3&gt;\n    &lt;p&gt;Sirva o seu sorvete favorito em uma vasilha e jogue leite em cima.&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Iogurte natural&lt;/h3&gt;\n    &lt;p&gt;Deixe o leite fora da geladeira (esse \u00e9 mentira, n\u00e3o fa\u00e7a isso).&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Homer Simpson&lt;/h3&gt;\n    &lt;p&gt;~( 8(|)&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;Numero m\u00e1gico&lt;/h3&gt;\n    &lt;p&gt;142857&lt;/p&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;h3&gt;S\u00e9rie da Funda\u00e7\u00e3o - Isaac Asimov&lt;/h3&gt;\n    &lt;p&gt;\u00c9 boa, leia.&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    # print(request.method)\n    # print(request.headers)\n\n    return render_template_string(RESPONSE_TEMPLATE)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>O comando <code>{{ url_for('static', filename='img/logo-getit.png') }}</code> \u00e9 uma fun\u00e7\u00e3o do Flask que gera a URL para um arquivo est\u00e1tico. O Flask sabe que os arquivos est\u00e1ticos est\u00e3o no diret\u00f3rio <code>static</code> e que o arquivo <code>logo-getit.png</code> est\u00e1 dentro do diret\u00f3rio <code>img</code>. O Flask vai gerar a URL correta para o arquivo, independente de onde o servidor estiver rodando. Agora, quando o servidor receber uma requisi\u00e7\u00e3o para <code>/img/logo-getit.png</code>, ele vai procurar o arquivo no diret\u00f3rio <code>static/img</code> e enviar o conte\u00fado do arquivo como resposta. Se o arquivo n\u00e3o for encontrado, o servidor vai responder com um erro 404.</p> <p>Depois de atualizar o c\u00f3digo, o servidor deve funcionar corretamente, mostrando a imagem. Sim, est\u00e1 feio, mas n\u00f3s resolvemos isso no pr\u00f3ximo handout. Por enquanto vai ficar assim mesmo.</p> <p>As p\u00e1ginas de detalhes ainda n\u00e3o est\u00e3o prontas, mas antes disso precisamos refatorar o c\u00f3digo porque ele j\u00e1 est\u00e1 acumulando muitas responsabilidades. Depois de se hidratar e fazer um alongamento, siga para a parte 3 do handout.</p>"},{"location":"aulas/01-getit/parte3/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte3/#parte-3-separando-algumas-responsabilidades","title":"Parte 3: Separando algumas responsabilidades","text":"<p>O nosso c\u00f3digo j\u00e1 est\u00e1 ficando grande e ele n\u00e3o faz quase nada! Um dos motivos para isso \u00e9 a falta de coes\u00e3o desse arquivo: esse arquivo possui a string HTML da p\u00e1gina, que por sua vez cont\u00e9m todos os dados das anota\u00e7\u00f5es dispon\u00edveis, al\u00e9m do c\u00f3digo que trata as conex\u00f5es, requisi\u00e7\u00f5es e respostas. Imagine o que aconteceria com uma quantidade razo\u00e1vel de anota\u00e7\u00f5es!</p> <p>Essas tr\u00eas responsabilidades acumuladas no mesmo arquivo est\u00e3o relacionadas a um conceito chamado Model, View, Controller (MVC). Voc\u00eas tiveram um breve contato com esse conceito semestre passado, mas n\u00f3s discutiremos mais a respeito em um futuro pr\u00f3ximo.</p>"},{"location":"aulas/01-getit/parte3/#modelo","title":"Modelo","text":"<p>Vamos come\u00e7ar separando a responsabilidade do modelo (lista de anota\u00e7\u00f5es) da responsabilidade de visualiza\u00e7\u00e3o (string HTML). Para isso, vamos criar uma lista de dicion\u00e1rios que cont\u00e9m os dados das anota\u00e7\u00f5es e a string HTML ser\u00e1 gerada dinamicamente a partir desses dados:</p> <pre><code>from flask import Flask, render_template_string, url_for\nfrom utils import load_data\n\n\napp = Flask(__name__)\n\nNOTE_TEMPLATE = '''  &lt;li&gt;\n    &lt;h3&gt;{title}&lt;/h3&gt;\n    &lt;p&gt;{details}&lt;/p&gt;\n  &lt;/li&gt;\n'''\n\nRESPONSE_TEMPLATE = '''&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Get-it&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;img src=\"{{{{ url_for('static', filename='img/logo-getit.png') }}}}\"&gt;\n&lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n&lt;ul&gt;\n{notes}\n&lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'''\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    notes_li = [\n        NOTE_TEMPLATE.format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    response = RESPONSE_TEMPLATE.format(notes=notes)\n\n    return render_template_string(response)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Voc\u00ea tamb\u00e9m vai precisar do arquivo <code>notes.json</code> (clique aqui para baixar). Coloque-o em uma pasta chamada <code>data</code> dentro da pasta <code>static</code>.:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- static\n    |- data\n      |- notes.json\n    |- img\n      |- logo-getit.png\n</code></pre> <p>EXERC\u00cdCIO</p> <p>Crie um arquivo <code>utils.py</code> e implemente a fun\u00e7\u00e3o <code>load_data</code>, que recebe o nome de um arquivo JSON e devolve o conte\u00fado do arquivo carregado como um objeto Python (A fun\u00e7\u00e3o deve assumir que este arquivo JSON est\u00e1 localizado dentro da pasta <code>static/data</code>). Por exemplo: se o conte\u00fado do arquivo <code>static/data/dados.json</code> for a string <code>{\"chave\": \"valor\"}</code>, sua fun\u00e7\u00e3o deve devolver o dicion\u00e1rio Python <code>{\"chave\": \"valor\"}</code> para a entrada <code>dados.json</code> (note que o nome da pasta n\u00e3o \u00e9 enviado como argumento). Dica: j\u00e1 existe uma fun\u00e7\u00e3o Python para isso.</p> <p>Question</p> <p>No c\u00f3digo anterior, estamos utilizando formata\u00e7\u00e3o de <code>string</code> um pouco diferente do que aprendemos em DevLife.</p> <p>Vamos ver como utilizar o m\u00e9todo <code>.format</code> Considere o c\u00f3digo a seguir:</p> <pre><code>x = 3\ny = 4\nz = x * y\ntexto = 'O ret\u00e2ngulo de lados {0} e {1} tem \u00e1rea {2}'\n\nprint(texto.format(x, y, z))\n</code></pre> <p>Escolha o ser\u00e1 impresso no terminal:</p> <ul> <li> O ret\u00e2ngulo de lados {0} e {1} tem \u00e1rea {2}</li> <li> O ret\u00e2ngulo de lados 0 e 1 tem \u00e1rea 2</li> <li> O ret\u00e2ngulo de lados 3 e 4 tem \u00e1rea 12</li> <li> O ret\u00e2ngulo de lados 4 e 3 tem \u00e1rea 12</li> </ul> <p>Resposta</p> <p>Ser\u00e1 impresso <code>O ret\u00e2ngulo de lados 3 e 4 tem \u00e1rea 12</code>, pois o m\u00e9todo <code>.format</code> substituir\u00e1 os valores entre chaves de acordo com a ordem em que os argumentos <code>x</code>, <code>y</code> e <code>z</code> foram passados. Para mais detalhes acesse: https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method</p> <p>Question</p> <p>No c\u00f3digo do servidor, utilizamos o m\u00e9todo <code>.format</code> de outra maneira poss\u00edvel. A maneira utilizada \u00e9 similar ao c\u00f3digo a seguir:</p> <pre><code>print('This {food} is {adjective}.'.format(adjective='absolutely horrible', food='spam'))\n</code></pre> <p>Escolhe o ser\u00e1 impresso no terminal:</p> <ul> <li> This spam is absolutely horrible.</li> <li> This {food} is {adjective}.</li> <li> This absolutely horrible is spam.</li> <li> This food is adjective.</li> </ul> <p>Resposta</p> <p>Ser\u00e1 impresso <code>This spam is absolutely horrible.</code>, pois o m\u00e9todo <code>.format</code> substituir\u00e1 os valores entre chaves de acordo com os nomes utilizados <code>food</code> e <code>adjective</code>. Para mais detalhes acesse: https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method</p> <p>EXERC\u00cdCIO</p> <p>Tente reescrever o trecho de c\u00f3digo abaixo utilizando o loop <code>for</code>.   Caso n\u00e3o esteja familiarizado com <code>list-comprehensions</code> acesse: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</p> <pre><code># Cria uma lista de &lt;li&gt;'s para cada anota\u00e7\u00e3o\n# Se tiver curiosidade: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\nnotes_li = [\n   NOTE_TEMPLATE.format(title=dados['titulo'], details=dados['detalhes'])\n   for dados in load_data('notes.json')\n]\nnotes = '\\n'.join(notes_li)\n\nresponse = RESPONSE_TEMPLATE.format(notes=notes).encode()\n</code></pre> <p>Perceba que a linha contendo a imagem foi alterada e foram adicionadas chaves. Isso acontece porque o m\u00e9todo <code>format</code> do Python espera que as chaves sejam substitu\u00eddas por valores. Como n\u00e3o queremos substituir essas chaves, precisamos dizer ao Python que elas s\u00e3o literais. Para isso, basta duplicar as chaves, ou seja, substituir <code>{</code> por <code>{{</code> e <code>}</code> por <code>}}</code>.</p>"},{"location":"aulas/01-getit/parte3/#visualizacao","title":"Visualiza\u00e7\u00e3o","text":"<p>Ufa, j\u00e1 est\u00e1 um pouco melhor. Se quisermos adicionar mais anota\u00e7\u00f5es basta modificar o arquivo <code>notes.json</code>. Lembra da ideia de mantermos um baixo acoplamento? Aqui n\u00f3s conseguimos melhorar esse ponto. Se eu quero adicionar mais dados eu s\u00f3 modifico o arquivo de dados (<code>notes.json</code>) e nenhum outro. O resto do c\u00f3digo \u00e9 independente disso.</p> <p>Mas ainda d\u00e1 para melhorar. Vamos refatorar um pouco mais o nosso c\u00f3digo, separando a responsabilidade de visualiza\u00e7\u00e3o (HTML). </p> <p>EXERC\u00cdCIO</p> <p>Crie uma pasta chamada <code>templates</code> dentro da pasta <code>static</code> e crie dentro dela um arquivo <code>index.html</code> com o conte\u00fado da string <code>RESPONSE_TEMPLATE</code>. N\u00e3o coloque aspas entorno do html.</p> <p>Ainda dentro da pasta <code>templates</code>, crie outra pasta chamada <code>components</code> e dentro dessa nova pasta um arquivo <code>note.html</code> com o conte\u00fado da string <code>NOTE_TEMPLATE</code>. </p> <p>A sua estrutura de arquivos agora deve ser:</p> <pre><code>- DIRETORIO-DO-SEU-SERVIDOR\n  |- servidor.py\n  |- utils.py\n  |- static\n    |- data\n      |- notes.json\n    |- img\n      |- logo-getit.png\n    |- templates\n        |- index.html\n        |- components\n            |- note.html\n</code></pre> <p>EXERC\u00cdCIO</p> <p>Implemente a fun\u00e7\u00e3o <code>load_template</code> no arquivo <code>utils.py</code> que recebe o nome de um arquivo de template e devolve uma string com o conte\u00fado desse arquivo. O nome do arquivo n\u00e3o inclui o nome da pasta <code>templates</code>. Por exemplo: para a entrada <code>index.html</code> voc\u00ea deve carregar o conte\u00fado do arquivo <code>static/templates/index.html</code>.</p> <p>Vamos atualizar o c\u00f3digo do servidor:</p> <pre><code>from flask import Flask, render_template_string, url_for\nfrom utils import load_data, load_template\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n    notes_li = [\n        load_template('components/note.html').format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    response = load_template('index.html').format(notes=notes)\n\n    return render_template_string(response)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/01-getit/parte3/#controle-de-rotas","title":"Controle de rotas","text":"<p>O c\u00f3digo do servidor ainda possui duas responsabilidades diferentes: decidir qual rota seguir e o que fazer em cada rota (o que pode ser t\u00e3o complexo quanto se queira). Vamos separar a responsabilidade de cada rota em uma fun\u00e7\u00e3o diferente:</p> <pre><code>from flask import Flask, render_template_string\nimport views\n\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n\n    return render_template_string(views.index())\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Voc\u00ea tamb\u00e9m vai precisar criar o arquivo <code>views.py</code> com o seguinte conte\u00fado (note que \u00e9 exatamente o mesmo c\u00f3digo que estava na fun\u00e7\u00e3o <code>index</code> do arquivo <code>servidor.py</code>):</p> <pre><code>from utils import load_data, load_template\n\ndef index():\n    note_template = load_template('components/note.html')\n    notes_li = [\n        note_template.format(title=dados['titulo'], details=dados['detalhes'])\n        for dados in load_data('notes.json')\n    ]\n    notes = '\\n'.join(notes_li)\n\n    return load_template('index.html').format(notes=notes)\n</code></pre> <p>Agora o nosso c\u00f3digo est\u00e1 pronto para a parte 4 do handout!</p>"},{"location":"aulas/01-getit/parte4/","title":"01 - Get-it - O retorno","text":""},{"location":"aulas/01-getit/parte4/#parte-4-fazendo-um-formulario-de-criacao-de-anotacao","title":"Parte 4: Fazendo um formul\u00e1rio de cria\u00e7\u00e3o de anota\u00e7\u00e3o","text":"<p>Vamos implementar agora a funcionalidade de adicionar anota\u00e7\u00f5es. O objetivo \u00e9 que voc\u00ea aprenda como receber dados no servidor enviados pelo navegador.</p> <p>Aten\u00e7\u00e3o</p> <p>\u00c9 poss\u00edvel que nas pr\u00f3ximas etapas o servidor apresente erros inesperados. Tente acessar o servidor de um navegador com aba an\u00f4nima.</p> <p>Para come\u00e7ar, modifique o template <code>index.html</code> para adicionar o <code>&lt;form&gt;</code>:</p> <pre><code>&lt;!-- DOCTYPE, HTML, HEAD DEVEM CONTINUAR AQUI --&gt;\n&lt;body&gt;\n  &lt;img src=\"{{{{ url_for('static', filename='img/logo-getit.png') }}}}\"&gt;\n  &lt;p&gt;Como o Post-it, mas com outro verbo&lt;/p&gt;\n\n  &lt;form action=\"/submit\" method=\"POST\"&gt;\n    &lt;label for=\"titulo\"&gt;T\u00edtulo&lt;/label&gt;\n    &lt;input id=\"titulo\" type=\"text\" name=\"titulo\" /&gt;\n    &lt;label for=\"detalhes\"&gt;Detalhes&lt;/label&gt;\n    &lt;input id=\"detalhes\" name=\"detalhes\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n  &lt;/form&gt;\n  &lt;!-- O RESTO DO HTML A PARTIR DAQUI --&gt;\n</code></pre> <p>Seu c\u00f3digo do programa principal n\u00e3o precisa ser modificado ainda.</p> <p>EXERC\u00cdCIO</p> <p>Execute o servidor e teste a p\u00e1gina.</p> <p>Importante</p> <p>Quando voc\u00ea for testar a p\u00e1gina, ao clicar em <code>submit</code> deve aparecer o erro <code>Not Found</code>. \u00c9 isso mesmo que deve ocorrer. Nos pr\u00f3ximos passos n\u00f3s vamos resolver essa situa\u00e7\u00e3o.</p>"},{"location":"aulas/01-getit/parte4/#usando-os-dados-recebidos-do-formulario","title":"Usando os dados recebidos do formul\u00e1rio","text":"<p>Talvez voc\u00ea tenha notado que no formul\u00e1rio (<code>&lt;form&gt;</code>) existe um atributo <code>method=\"post\"</code>. Isso quer dizer que os dados do formul\u00e1rio ser\u00e3o enviados utilizando o m\u00e9todo HTTP POST (veremos mais detalhes sobre ele no futuro). O que voc\u00ea precisa saber por enquanto \u00e9 que at\u00e9 o momento n\u00f3s sempre enviamos requisi\u00e7\u00f5es do tipo GET para o servidor. Para entender melhor o que est\u00e1 acontecendo, observe a sa\u00edda do seu terminal. Deve haver uma requisi\u00e7\u00e3o parecida com essa:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET / HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET /static/img/logo-getit.png HTTP/1.1\" 200 -\n127.0.0.1 - - [24/Jan/2025 15:35:41] \"GET /favicon.ico HTTP/1.1\" 404 -\n127.0.0.1 - - [24/Jan/2025 15:35:45] \"POST /submit HTTP/1.1\" 404 -\n</code></pre> <p>Perceba que a \u00faltima linha da requisi\u00e7\u00e3o est\u00e1 diferente das outras. Existe um <code>POST</code> ao inv\u00e9s de <code>GET</code>. Isso significa que o navegador est\u00e1 enviando dados para o servidor. O servidor, por sua vez, n\u00e3o sabe o que fazer com esses dados e responde com um erro <code>404</code>.</p> <p>Queremos pegar os dados do formul\u00e1rio e extrair o t\u00edtulo e os detalhes da anota\u00e7\u00e3o. No <code>form</code> do arquivo <code>index.html</code>, o campo <code>action</code> est\u00e1 apontando para <code>/submit</code>. Precisamos criar uma nova rota no servidor para lidar com essa requisi\u00e7\u00e3o.</p> <pre><code>from flask import Flask, render_template_string, request, redirect\nimport views\n\n\napp = Flask(__name__)\n\n# Configurando a pasta de arquivos est\u00e1ticos\napp.static_folder = 'static'\n\n@app.route('/')\ndef index():\n\n    return render_template_string(views.index())\n\n@app.route('/submit', methods=['POST'])\ndef submit_form():\n    titulo = request.form.get('titulo')  # Obt\u00e9m o valor do campo 'titulo'\n    detalhes = request.form.get('detalhes')  # Obt\u00e9m o valor do campo 'detalhes'\n\n    views.submit(titulo, detalhes)\n    return redirect('/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Essa nova rota <code>/submit</code> foi definida para somente aceitar o m\u00e9todo <code>POST</code>. Veja o que acontece se tentarmos acessar no navegador o endere\u00e7o <code>http://localhost:5000/submit</code>. Leia a mensagem de erro e tente entender o que est\u00e1 acontecendo.</p> <p>Chamar essa rota s\u00f3 vai fazer sentido se estivermos passando dados para ela. Por isso, deixamos ela responder somente a requisi\u00e7\u00f5es do tipo <code>POST</code>. Utilizamos os comandos <code>request.form.get</code> para pegar os dados enviados pelo formul\u00e1rio. O m\u00e9todo <code>get</code> \u00e9 utilizado para pegar o valor de uma chave de um dicion\u00e1rio. Se a chave n\u00e3o existir, ele retorna <code>None</code>. <code>request.form</code>, assim como o <code>request.headers</code> que vimos anteriormente, \u00e9 um dicion\u00e1rio que cont\u00e9m os dados enviados pelo navegador.</p> <p>Assim como faz\u00edamos no Django, toda requisi\u00e7\u00e3o precisa ter uma resposta. Como n\u00e3o queremos ter nenhuma outra p\u00e1gina ap\u00f3s criar a nota, vamos retornar para a p\u00e1gina inicial. Para isso, usamos o comando <code>return redirect('/')</code> assim como no Django.</p> <p>EXERC\u00cdCIO</p> <p>Crie uma fun\u00e7\u00e3o <code>submit(titulo, detalhes)</code> no arquivo <code>views.py</code>, que adicione a nova anota\u00e7\u00e3o (que dever\u00e1 estar armazenada em <code>params['titulo']</code> e <code>params['detalhes']</code>) ao arquivo <code>notes.json</code>.</p> <p>Dica: crie uma fun\u00e7\u00e3o no arquivo <code>utils.py</code> que recebe a nova anota\u00e7\u00e3o e a adiciona \u00e0 lista do arquivo <code>notes.json</code>.</p> <p>Teste seu servidor e verifique se as anota\u00e7\u00f5es est\u00e3o sendo salvas corretamente. Se tudo estiver funcionando, a anota\u00e7\u00e3o deve estar aparecendo e no terminal voc\u00ea deve ver a seguinte mensagem:</p> <pre><code>127.0.0.1 - - [24/Jan/2025 16:12:42] \"POST /submit HTTP/1.1\" 302 -\n127.0.0.1 - - [24/Jan/2025 16:12:42] \"GET / HTTP/1.1\" 200 -\n</code></pre> <p>Isso significa que o servidor recebeu a requisi\u00e7\u00e3o do tipo <code>POST</code> e redirecionou para a p\u00e1gina inicial. O n\u00famero 302 \u00e9 o c\u00f3digo de status HTTP que indica que a requisi\u00e7\u00e3o foi redirecionada. Isso tamb\u00e9m vai fazer com que atualizar a p\u00e1gina n\u00e3o envie novamente os dados do formul\u00e1rio, assim como acontecia no Django.</p>"},{"location":"aulas/01-getit/parte4/#desafio","title":"Desafio","text":"<p>O handout acabou, mas se quiser praticar um pouco mais voc\u00ea pode fazer o servidor devolver uma resposta com o c\u00f3digo 404 quando a requisi\u00e7\u00e3o \u00e9 feita a uma p\u00e1gina/recurso que n\u00e3o existe.</p> <p>Al\u00e9m disso, voc\u00ea pode usar os arquivos HTML e CSS que construiu semestre passado para estilizar a p\u00e1gina de anota\u00e7\u00f5es.</p>"},{"location":"aulas/01-getit/parte4/#ufa-cansei","title":"Ufa, cansei","text":"<p>Parab\u00e9ns! Agora voc\u00ea pode tentar fazer alguma das receitas da nossa lista de anota\u00e7\u00f5es. Depois disso, se ainda tiver pique, \u00e9 um bom momento para dar aquela relembrada em CSS com essa lista de jogos:</p> <ul> <li>Flexbox Defense</li> <li>Flexbox Froggy</li> <li>Grid Garden</li> <li>CSS Diner</li> <li>Se voc\u00ea tem interesse por CSS, voc\u00ea vai gostar disso: https://rupl.github.io/unfold/</li> </ul>"},{"location":"aulas/02-rest/","title":"O que \u00e9 REST","text":"<p>Respons\u00e1vel: Andre Oliveira</p> <p>Refer\u00eancias:</p> <ul> <li> <p>https://developer.mozilla.org/pt-BR/docs/Glossary/REST</p> </li> <li> <p>\u201cREST\u00a0(Representational State Transfer) refere-se a um grupo de restri\u00e7\u00f5es de design dentro da arquitetura de software que geram sistemas distribu\u00eddos eficientes, confi\u00e1veis e escal\u00e1veis. Um sistema \u00e9 denominado RESTful quando adere a todas essas restri\u00e7\u00f5es.\u201d</p> </li> <li> <p>\u201cA ideia b\u00e1sica do REST \u00e9 que um recurso, por exemplo um documento, seja transferido com seu estado bem definido, padroniza\u00e7\u00e3o de opera\u00e7\u00f5es e formatos.\u201d</p> </li> <li> <p>Recurso \u21d2 \u201cUm recurso \u00e9 um elemento abstrato e que nos permite mapear qualquer coisa do mundo real como um elemento para acesso via Web.\u201d</p> </li> <li> <p>Uso explicito dos verbos HTTP</p> <ul> <li>GET \u21d2 Buscar/Pegar informa\u00e7\u00f5es de um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens)</li> <li>POST \u21d2 Criar um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens)</li> <li>DELETE \u21d2 Deleta um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens/) <li>PUT \u21d2 Atualiza um recurso especificado na url da requisi\u00e7\u00e3o (ex: /itens/) <pre><code># C\u00f3digo gerado com o ChatGPT\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Representa\u00e7\u00e3o do banco de dados \ntasks = [\n    {\"id\": 1, \"title\": \"Estudar Python\", \"done\": False},\n    {\"id\": 2, \"title\": \"Fazer compras\", \"done\": True}\n]\ncurrent_id = 3\n\n# Observe como que os recursos s\u00e3o representados dentro da URL de requisi\u00e7\u00e3o, ou seja, apenas lendo o caminho do recurso + seu verbo HTTP \u00e9 poss\u00edvel ter uma ideia do que essa rota deve retornar e fazer\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    return jsonify({\"tasks\": tasks})\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['GET'])\ndef get_task(task_id):\n    task = next((task for task in tasks if task['id'] == task_id), None)\n    if task:\n        return jsonify({\"task\": task})\n    else:\n        return jsonify({\"message\": \"Tarefa n\u00e3o encontrada\"}), 404\n\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    received_json = request.json\n    if not received_json or not \"title\" in received_json:\n        return jsonify({\"message\": \"Formato de tarefa inv\u00e1lido\"}), 400\n    global current_id\n    new_task = {\n        'id': current_id,\n        'done': False,\n        'title': received_json[\"title\"]\n    }\n    current_id += 1\n    tasks.append(new_task)\n    return jsonify({\"message\": \"Tarefa criada com sucesso\"}), 201\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['PUT'])\ndef update_task(task_id):\n    task = next((task for task in tasks if task['id'] == task_id), None)\n    if task:\n        received_json = request.json\n        if received_json and \"id\" in received_json and received_json[\"id\"] != task_id:\n            return jsonify({\"message\": \"ID n\u00e3o pode ser alterado\"}), 400\n        return jsonify({\"message\": \"Tarefa atualizada com sucesso\"})\n    else:\n        return jsonify({\"message\": \"Tarefa n\u00e3o encontrada\"}), 404\n\n@app.route('/tasks/&lt;int:task_id&gt;', methods=['DELETE'])\ndef delete_task(task_id):\n    global tasks\n    tasks = [task for task in tasks if task['id'] != task_id]\n    return jsonify({\"message\": \"Tarefa exclu\u00edda com sucesso\"})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <li> <p>Stateless \u21d2 \u201cN\u00e3o \u00e9 armazenado nenhum estado no servidor.\u201d N\u00e3o dependem de dados armazenados de outra requisi\u00e7\u00e3o para poder executar a requisi\u00e7\u00e3o atual. Todos os dados necess\u00e1rios para requisi\u00e7\u00e3o se completar devem ser enviados e armazenados pelo cliente</p> </li> <li> <p>Representa\u00e7\u00e3o \u21d2 JSON - Os dados normalmente chegam e retornam em JSON</p> </li> <li> <p>Respostas HTTP coerentes com o estado da requisi\u00e7\u00e3o:</p> <ul> <li>Referencia para consulta das respostas:  https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Status</li> </ul> </li>"},{"location":"aulas/02-rest/exercicios/","title":"Exerc\u00edcios de REST","text":""},{"location":"aulas/02-rest/exercicios/#exercicios-de-correcao-de-apis-rest","title":"Exerc\u00edcios de Corre\u00e7\u00e3o de APIs REST","text":"<ul> <li>Corrigindo Erros em uma API de Gerenciamento de Produtos</li> <li>Corrigindo Erros em uma API de Pedidos de Restaurante</li> <li>Corrigindo Erros em uma API de Gerenciamento de Usu\u00e1rios</li> </ul>"},{"location":"aulas/02-rest/exercicios/#exercicios-de-amadurecendo-de-apis-rest","title":"Exerc\u00edcios de Amadurecendo de APIs REST","text":"<ul> <li>Amadurecendo uma API de Gerenciamento de Eventos</li> <li>Amadurecendo uma API de Gerenciamento de Livros</li> <li>Amadurecendo uma API de Gerenciamento de Tarefas</li> </ul>"},{"location":"aulas/02-rest/exercicios/#exercicios-de-criacao-de-apis-rest","title":"Exerc\u00edcios de Cria\u00e7\u00e3o de APIs REST","text":"<ul> <li>Aplica\u00e7\u00e3o de Gerenciamento de Contatos</li> <li>Aplica\u00e7\u00e3o de Gerenciamento de Livros</li> <li>Aplica\u00e7\u00e3o de Gerenciamento de Tarefas</li> </ul>"},{"location":"aulas/02-rest/requisicoes/","title":"Como fazer requisi\u00e7\u00e3o para seu webservice REST?","text":"<p>Respons\u00e1vel: Andre Pereira</p>"},{"location":"aulas/02-rest/requisicoes/#para-que-possamos-fazer-requisicoes-para-nosso-webservice-rest-construido-em-python-flask-usaremos-a-biblioteca-requests","title":"Para que possamos fazer requisi\u00e7\u00f5es para nosso webservice REST constru\u00eddo em python + flask usaremos a biblioteca requests.","text":"<p>Para conseguir prosseguir com o tutorial \u00e9 necessario instalar a biblioteca \u201crequests\" com o seguinte comando (recomendo criar uma .venv  [tem tutorial aqui de como fazer isso])</p> <pre><code>pip install requests\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#para-comecar-vamos-entender-como-a-biblioteca-requests-funciona-com-os-verbos-http","title":"Para come\u00e7ar vamos entender como a biblioteca requests funciona com os verbos HTTP:","text":"<pre><code>import requests # importa a biblioteca para dentro do seu arquivo\n\n# ================================================================================================\n# Dentro da biblioteca \u00e9 poss\u00edvel fazer requisi\u00e7\u00f5es com os principais verbos http dispon\u00edveis   \n# ================================================================================================\n# requests.delete(...args) --&gt; DELETE\n# requests.get(...args) --&gt; GET\n# requests.post(...args) --&gt; POST\n# requests.put(...args) --&gt; PUT\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#para-poder-testar-a-biblioteca-iremos-utilizar-o-seguinte-codigo-em-flask-para-simular-uma-api-rest","title":"Para poder testar a biblioteca iremos utilizar o seguinte c\u00f3digo em flask para simular uma API REST:","text":"<pre><code>from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/test', methods=[\"GET\"])\ndef hello_world_get():\n    return jsonify({\"message\": \"Tudo certo!\"}), 200\n\n@app.route('/test', methods=[\"DELETE\"])\ndef hello_world_delete():\n    req_data = request.get_json()\n\n    if (\"name\" not in req_data):\n        return jsonify({\"message\": \"Erro!\"}), 400\n\n    return jsonify({\"message\": f\"Ol\u00e1 {req_data['name']}!\"}), 200\n\n@app.route('/test', methods=[\"PUT\"])\ndef hello_world_put():\n    req_data = request.get_json()\n\n    if (\"name\" not in req_data):\n        return jsonify({\"message\": \"Erro!\"}), 400\n\n    return jsonify({\"message\": f\"Ol\u00e1 {req_data['name']}!\"}), 200\n\n@app.route('/test', methods=[\"POST\"])\ndef hello_world_post():\n    req_data = request.get_json()\n\n    if (\"name\" not in req_data):\n        return jsonify({\"message\": \"Erro!\"}), 400\n\n    return jsonify({\"message\": f\"Ol\u00e1 {req_data['name']}!\"}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True, port=5500)\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#agora-nos-iremos-fazer-requisicao-para-cada-uma-das-rotas-a-cima","title":"Agora n\u00f3s iremos fazer requisi\u00e7\u00e3o para cada uma das rotas a cima","text":""},{"location":"aulas/02-rest/requisicoes/#get","title":"GET:","text":"<ul> <li>Como primeiro par\u00e2metro iremos passar a url para qual gostar\u00edamos de fazer a requisi\u00e7\u00e3o e depois passar de forma explicita o \u201cheaders\u201d como um dicion\u00e1rio</li> </ul> <pre><code>req = requests.get(\"http://localhost:5500/test\", headers={})\n\n# pega o json que foi retornado pela api \nres = req.json()\nprint(res) # {'message': 'Tudo certo!'}\n\n# status retornado pelo nosso webservice REST em flask\nprint(req.status_code) # 200\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#post","title":"POST:","text":"<ul> <li>Como primeiro par\u00e2metro iremos passar a url para qual gostar\u00edamos de fazer a requisi\u00e7\u00e3o, depois passar de forma explicita o \u201cheaders\u201d como um dicion\u00e1rio e por fim tamb\u00e9m iremos passar de forma explicita o par\u00e2metro \u201cjson\u201d como um dicion\u00e1rio que ser\u00e1 o body/corpo da requisi\u00e7\u00e3o</li> </ul> <pre><code>req = requests.post(\"http://localhost:5500/test\", headers={}, json={\"name\": \"Andre\"})\n\n# status retornado pelo nosso webservice REST em flask\nprint(req.status_code) # 200\n\n# pega o json que foi retornado pela api \nres = req.json() \nprint(res) # {'message': 'Ol\u00e1 Andre!'}\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#delete","title":"DELETE:","text":"<ul> <li>Como primeiro par\u00e2metro iremos passar a url para qual gostar\u00edamos de fazer a requisi\u00e7\u00e3o, depois passar de forma explicita o par\u00e2metro \u201cheaders\u201d como um dicion\u00e1rio e por fim tamb\u00e9m iremos passar de forma explicita o par\u00e2metro \u201cjson\u201d como um dicion\u00e1rio que ser\u00e1 o body/corpo da requisi\u00e7\u00e3o</li> </ul> <pre><code>req = requests.post(\"http://localhost:5500/test\", headers={}, json={\"name\": \"Andre\"})\n\nprint(req.status_code) # 200\n\n# pega o json que foi retornado pela API \nres = req.json() \nprint(res) # {'message': 'Ol\u00e1 Andre!'}\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#put","title":"PUT:","text":"<ul> <li>Como primeiro par\u00e2metro iremos passar a url para qual gostar\u00edamos de fazer a requisi\u00e7\u00e3o, depois passar de forma explicita o par\u00e2metro \u201cheaders\u201d como um dicion\u00e1rio e por fim tamb\u00e9m iremos passar de forma explicita o par\u00e2metro \u201cjson\u201d como um dicion\u00e1rio que ser\u00e1 o body/corpo da requisi\u00e7\u00e3o</li> </ul> <pre><code>req = requests.put(\"http://localhost:5500/test\", headers={}, json={\"name\": \"Andre\"})\n\n# status retornado pelo nossa API\nprint(req.status_code) # 200\n\n# pega o json que foi retornado pela API \nres = req.json() \nprint(res) # {'message': 'Ol\u00e1 Andre!'}\n</code></pre>"},{"location":"aulas/02-rest/requisicoes/#consumindo-uma-api-de-terceiros","title":"Consumindo uma API de terceiros","text":"<ul> <li>Agora iremos consumir uma API que nos retorna dados sobre pok\u00e9mons</li> </ul>"},{"location":"aulas/02-rest/requisicoes/#get-httpspokeapicoapiv2pokemonditto","title":"GET (https://pokeapi.co/api/v2/pokemon/ditto)","text":"<pre><code>req = requests.get(\"https://pokeapi.co/api/v2/pokemon/ditto\", headers={})\n\nprint(req.status_code) # 200\n\nres = req.json() \nprint(res[\"abilities\"]) # [{'ability': {'name': 'limber', 'url': 'https://pokeapi.co/api/v2/ability/7/'}, 'is_hidden': False, 'slot': 1}, {'ability': {'name': 'imposter', 'url': 'https://pokeapi.co/api/v2/ability/150/'}, 'is_hidden': True, 'slot': 3}]\n</code></pre> <ul> <li> <p>Refer\u00eancias:</p> <p>Python's Requests Library (Guide) \u2013 Real Python</p> <p>Pok\u00e9API</p> </li> </ul>"},{"location":"aulas/02-rest/exercicios/AmadurecendoEventos/","title":"Amadurecendo uma API de Gerenciamento de Eventos","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/02-rest/exercicios/AmadurecendoEventos/#exercicio-transformando-uma-api-nivel-0-para-nivel-2-no-modelo-de-maturidade-de-richardson","title":"Exerc\u00edcio: Transformando uma API N\u00edvel 0 para N\u00edvel 2 no Modelo de Maturidade de Richardson","text":""},{"location":"aulas/02-rest/exercicios/AmadurecendoEventos/#api-de-gerenciamento-de-eventos","title":"API de Gerenciamento de Eventos","text":"<p>Voc\u00ea tem uma API RESTful para o gerenciamento de eventos que atualmente est\u00e1 no n\u00edvel 0 do modelo de maturidade de Richardson. Isso significa que todas as opera\u00e7\u00f5es da API s\u00e3o tratadas por meio de um \u00fanico endpoint, sem uso adequado dos m\u00e9todos HTTP e sem diferencia\u00e7\u00e3o de recursos. O objetivo deste exerc\u00edcio \u00e9 transformar essa API em uma API de n\u00edvel 2, onde cada recurso tem seu pr\u00f3prio endpoint, e os m\u00e9todos HTTP (GET, POST, PUT, DELETE) s\u00e3o usados corretamente.</p> <p>Estrutura do Evento:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o evento.</li> <li>Nome: Uma string que representa o nome do evento.</li> <li>Data: Uma string que representa a data do evento no formato YYYY-MM-DD.</li> <li>Local: Uma string que descreve o local onde o evento ser\u00e1 realizado.</li> </ul>"},{"location":"aulas/02-rest/exercicios/AmadurecendoEventos/#codigo-nivel-0","title":"C\u00f3digo N\u00edvel 0:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nevents = [\n    {\"id\": 1, \"name\": \"Confer\u00eancia de Tecnologia\", \"date\": \"2023-11-10\", \"location\": \"Centro de Conven\u00e7\u00f5es\"},\n    {\"id\": 2, \"name\": \"Workshop de Design\", \"date\": \"2023-12-05\", \"location\": \"Sala de Confer\u00eancias A\"},\n]\n\n@app.route('/api', methods=['POST'])\ndef handle_requests():\n    data = request.json\n    action = data.get('action')\n\n    if action == 'get_all_events':\n        return jsonify(events)\n    elif action == 'get_event':\n        event_id = data.get('id')\n        event = next((e for e in events if e['id'] == event_id), None)\n        if event:\n            return jsonify(event)\n        else:\n            return {\"error\": \"Event not found\"}, 404\n    elif action == 'create_event':\n        new_event = {\n            \"id\": len(events) + 1,\n            \"name\": data.get('name'),\n            \"date\": data.get('date'),\n            \"location\": data.get('location')\n        }\n        events.append(new_event)\n        return jsonify(new_event), 201\n    elif action == 'update_event':\n        event_id = data.get('id')\n        event = next((e for e in events if e['id'] == event_id), None)\n        if event:\n            event.update(data)\n            return jsonify(event)\n        else:\n            return {\"error\": \"Event not found\"}, 404\n    elif action == 'delete_event':\n        event_id = data.get('id')\n        event = next((e for e in events if e['id'] == event_id), None)\n        if event:\n            events.remove(event)\n            return {\"message\": \"Event deleted\"}, 200\n        else:\n            return {\"error\": \"Event not found\"}, 404\n\n    return {\"error\": \"Invalid action\"}, 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/AmadurecendoEventos/#tarefas-do-exercicio","title":"Tarefas do Exerc\u00edcio","text":"<ol> <li>Transformar para N\u00edvel 1:<ul> <li>Separe as funcionalidades da API em m\u00faltiplos endpoints, cada um representando um recurso espec\u00edfico, como <code>/events</code> para o recurso de eventos.</li> <li>Exemplo: Crie endpoints separados como <code>GET /events</code> para listar todos os eventos, <code>POST /events</code> para adicionar um novo evento, etc.</li> </ul> </li> <li>Transformar para N\u00edvel 2:<ul> <li>Utilize os m\u00e9todos HTTP adequados para cada opera\u00e7\u00e3o. Por exemplo, use <code>GET</code> para buscar eventos, <code>POST</code> para adicionar novos eventos, <code>PUT</code> para atualizar eventos e <code>DELETE</code> para remover eventos.</li> <li>As URLs dos endpoints devem refletir corretamente os recursos, como <code>/events/&lt;id&gt;</code> para opera\u00e7\u00f5es em um evento espec\u00edfico.</li> </ul> </li> <li>Testar a API no Postman:<ul> <li>Ap\u00f3s transformar a API para o n\u00edvel 2, use o Postman para testar cada endpoint. Certifique-se de que os m\u00e9todos HTTP corretos est\u00e3o sendo usados e que as URLs seguem as conven\u00e7\u00f5es RESTful.</li> </ul> </li> </ol>"},{"location":"aulas/02-rest/exercicios/AmadurecendoLivros/","title":"Amadurecendo uma API de Gerenciamento de Livros","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/02-rest/exercicios/AmadurecendoLivros/#exercicio-transformando-uma-api-nivel-0-para-nivel-2-no-modelo-de-maturidade-de-richardson","title":"Exerc\u00edcio: Transformando uma API N\u00edvel 0 para N\u00edvel 2 no Modelo de Maturidade de Richardson","text":""},{"location":"aulas/02-rest/exercicios/AmadurecendoLivros/#api-de-gerenciamento-de-livros","title":"API de Gerenciamento de Livros","text":"<p>Voc\u00ea tem uma API RESTful de gerenciamento de livros que atualmente est\u00e1 no n\u00edvel 0 do modelo de maturidade de Richardson. Isso significa que a API usa um \u00fanico endpoint para todas as opera\u00e7\u00f5es e n\u00e3o faz uso adequado dos m\u00e9todos HTTP. O objetivo deste exerc\u00edcio \u00e9 transformar essa API em uma API de n\u00edvel 2, onde cada recurso (livro) tem seu pr\u00f3prio endpoint, e os m\u00e9todos HTTP (GET, POST, PUT, DELETE) s\u00e3o usados corretamente.</p> <p>Estrutura do Livro:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o livro.</li> <li>T\u00edtulo: Uma string que representa o t\u00edtulo do livro.</li> <li>Autor: Uma string que representa o autor do livro.</li> <li>Status: Uma string que indica se o livro est\u00e1 \"Dispon\u00edvel\" ou \"Emprestado\".</li> </ul>"},{"location":"aulas/02-rest/exercicios/AmadurecendoLivros/#codigo-nivel-0","title":"C\u00f3digo N\u00edvel 0:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\nbooks = [\n    {\"id\": 1, \"title\": \"1984\", \"author\": \"George Orwell\", \"status\": \"Dispon\u00edvel\"},\n    {\"id\": 2, \"title\": \"Dom Casmurro\", \"author\": \"Machado de Assis\", \"status\": \"Emprestado\"},\n]\n\n@app.route('/api/books', methods=['POST'])\ndef handle_books():\n    data = request.json\n    action = data.get('action')\n\n    if action == 'get_all':\n        return jsonify(books)\n    elif action == 'get_book':\n        book_id = data.get('id')\n        book = next((b for b in books if b['id'] == book_id), None)\n        if book:\n            return jsonify(book)\n        else:\n            return {\"error\": \"Book not found\"}, 404\n    elif action == 'add_book':\n        new_book = {\n            \"id\": len(books) + 1,\n            \"title\": data.get('title'),\n            \"author\": data.get('author'),\n            \"status\": data.get('status', \"Dispon\u00edvel\")\n        }\n        books.append(new_book)\n        return jsonify(new_book), 201\n    elif action == 'update_book':\n        book_id = data.get('id')\n        book = next((b for b in books if b['id'] == book_id), None)\n        if book:\n            book.update(data)\n            return jsonify(book)\n        else:\n            return {\"error\": \"Book not found\"}, 404\n    elif action == 'delete_book':\n        book_id = data.get('id')\n        book = next((b for b in books if b['id'] == book_id), None)\n        if book:\n            books.remove(book)\n            return {\"message\": \"Book deleted\"}, 200\n        else:\n            return {\"error\": \"Book not found\"}, 404\n\n    return {\"error\": \"Invalid action\"}, 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/AmadurecendoLivros/#tarefas-do-exercicio","title":"Tarefas do Exerc\u00edcio","text":"<ol> <li>Transformar para N\u00edvel 1:<ul> <li>Separe as funcionalidades da API em m\u00faltiplos endpoints, cada um representando um recurso espec\u00edfico, como <code>/books</code>.</li> <li>Exemplo: Crie endpoints separados como <code>GET /books</code> para listar todos os livros, <code>POST /books</code> para adicionar um novo livro, etc.</li> </ul> </li> <li>Transformar para N\u00edvel 2:<ul> <li>Use os m\u00e9todos HTTP adequados para cada opera\u00e7\u00e3o. Por exemplo, use <code>GET</code> para recuperar dados, <code>POST</code> para criar novos recursos, <code>PUT</code> para atualizar recursos e <code>DELETE</code> para deletar recursos.</li> <li>Garanta que os endpoints usem URLs que representem corretamente os recursos, como <code>/books/&lt;id&gt;</code> para opera\u00e7\u00f5es em um livro espec\u00edfico.</li> </ul> </li> <li>Testar a API no Postman:<ul> <li>Ap\u00f3s transformar a API para o n\u00edvel 2, use o Postman para testar cada endpoint. Verifique se os m\u00e9todos HTTP corretos est\u00e3o sendo usados e se as URLs seguem as conven\u00e7\u00f5es RESTful.</li> </ul> </li> </ol>"},{"location":"aulas/02-rest/exercicios/AmadurecendoTarefas/","title":"Amadurecendo uma API de Gerenciamento de Tarefas","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/02-rest/exercicios/AmadurecendoTarefas/#exercicio-transformando-uma-api-nivel-0-para-nivel-2-no-modelo-de-maturidade-de-richardson","title":"Exerc\u00edcio: Transformando uma API N\u00edvel 0 para N\u00edvel 2 no Modelo de Maturidade de Richardson","text":""},{"location":"aulas/02-rest/exercicios/AmadurecendoTarefas/#api-de-gerenciamento-de-tarefas","title":"API de Gerenciamento de Tarefas","text":"<p>Voc\u00ea tem uma API RESTful de gerenciamento de tarefas que atualmente est\u00e1 no n\u00edvel 0 do modelo de maturidade de Richardson. Isso significa que a API trata todas as intera\u00e7\u00f5es por meio de um \u00fanico endpoint, usando m\u00e9todos HTTP inadequadamente ou sem diferencia\u00e7\u00e3o. O objetivo deste exerc\u00edcio \u00e9 transformar essa API em uma API de n\u00edvel 2, onde cada recurso tem seu pr\u00f3prio endpoint e os m\u00e9todos HTTP (GET, POST, PUT, DELETE) s\u00e3o usados de maneira adequada.</p> <p>Estrutura da Tarefa:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica a tarefa.</li> <li>T\u00edtulo: Uma string que representa o t\u00edtulo da tarefa.</li> <li>Descri\u00e7\u00e3o: Uma string que fornece mais detalhes sobre a tarefa.</li> <li>Status: Um valor booleano que indica se a tarefa est\u00e1 conclu\u00edda (True) ou n\u00e3o (False).</li> </ul>"},{"location":"aulas/02-rest/exercicios/AmadurecendoTarefas/#codigo-nivel-0","title":"C\u00f3digo N\u00edvel 0:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ntasks = [\n    {\"id\": 1, \"title\": \"Estudar para a prova\", \"description\": \"Estudar matem\u00e1tica e f\u00edsica\", \"status\": False},\n    {\"id\": 2, \"title\": \"Fazer compras\", \"description\": \"Comprar leite e p\u00e3o\", \"status\": True},\n]\n\n@app.route('/api', methods=['POST'])\ndef handle_requests():\n    data = request.json\n    action = data.get('action')\n\n    if action == 'get_all':\n        return jsonify(tasks)\n    elif action == 'get_task':\n        task_id = data.get('id')\n        task = next((t for t in tasks if t['id'] == task_id), None)\n        if task:\n            return jsonify(task)\n        else:\n            return {\"error\": \"Task not found\"}, 404\n    elif action == 'create_task':\n        new_task = {\n            \"id\": len(tasks) + 1,\n            \"title\": data.get('title'),\n            \"description\": data.get('description'),\n            \"status\": data.get('status', False)\n        }\n        tasks.append(new_task)\n        return jsonify(new_task), 201\n    elif action == 'update_task':\n        task_id = data.get('id')\n        task = next((t for t in tasks if t['id'] == task_id), None)\n        if task:\n            task.update(data)\n            return jsonify(task)\n        else:\n            return {\"error\": \"Task not found\"}, 404\n    elif action == 'delete_task':\n        task_id = data.get('id')\n        task = next((t for t in tasks if t['id'] == task_id), None)\n        if task:\n            tasks.remove(task)\n            return {\"message\": \"Task deleted\"}, 200\n        else:\n            return {\"error\": \"Task not found\"}, 404\n\n    return {\"error\": \"Invalid action\"}, 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/AmadurecendoTarefas/#tarefas-do-exercicio","title":"Tarefas do Exerc\u00edcio","text":"<ol> <li>Transformar para N\u00edvel 1:<ul> <li>Divida as funcionalidades da API em m\u00faltiplos endpoints, cada um representando um recurso espec\u00edfico (como <code>/tasks</code>).</li> <li>Exemplo: Crie endpoints separados como <code>GET /tasks</code> para listar todas as tarefas, <code>POST /tasks</code> para criar uma nova tarefa, etc.</li> </ul> </li> <li>Transformar para N\u00edvel 2:<ul> <li>Use os m\u00e9todos HTTP apropriados para cada opera\u00e7\u00e3o. Por exemplo, use <code>GET</code> para buscar dados, <code>POST</code> para criar novos recursos, <code>PUT</code> para atualizar recursos e <code>DELETE</code> para deletar recursos.</li> <li>Garanta que os endpoints utilizem URLs adequadas que representem os recursos, como <code>/tasks/&lt;id&gt;</code> para opera\u00e7\u00f5es em uma tarefa espec\u00edfica.</li> </ul> </li> <li>Testar a API no Postman:<ul> <li>Ap\u00f3s transformar a API para o n\u00edvel 2, use o Postman para testar cada endpoint. Certifique-se de que os m\u00e9todos HTTP corretos est\u00e3o sendo usados e que as URLs seguem as conven\u00e7\u00f5es RESTful.</li> </ul> </li> </ol>"},{"location":"aulas/02-rest/exercicios/AplicacaoContatos/","title":"Aplica\u00e7\u00e3o de Gerenciamento de Contatos","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Voc\u00ea est\u00e1 desenvolvendo uma API RESTful para gerenciar contatos pessoais. O objetivo \u00e9 permitir que os usu\u00e1rios possam criar, visualizar, atualizar e excluir contatos da sua lista de contatos. Cada contato ter\u00e1 um identificador \u00fanico, um nome, um e-mail, e um n\u00famero de telefone.</p> <p>Estrutura do Contato:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o contato.</li> <li>Nome: Uma string que representa o nome completo do contato.</li> <li>E-mail: Uma string que cont\u00e9m o endere\u00e7o de e-mail do contato.</li> <li>Telefone: Uma string que cont\u00e9m o n\u00famero de telefone do contato.</li> </ul> <p>Exemplo de Dados Iniciais:</p> <pre><code>contacts = [\n    {\n        \"id\": 1,\n        \"name\": \"Alice Souza\",\n        \"email\": \"alice.souza@example.com\",\n        \"phone\": \"11987654321\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Bruno Carvalho\",\n        \"email\": \"bruno.carvalho@example.com\",\n        \"phone\": \"11998765432\"\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Carlos Almeida\",\n        \"email\": \"carlos.almeida@example.com\",\n        \"phone\": \"21987654321\"\n    }\n]\n</code></pre>"},{"location":"aulas/02-rest/exercicios/AplicacaoContatos/#_1","title":"Aplica\u00e7\u00e3o de Gerenciamento de Contatos","text":"<ol> <li>GET /contacts: Retorna a lista de todos os contatos.</li> <li>POST /contacts: Adiciona um novo contato.</li> <li>GET /contacts/: Retorna um contato espec\u00edfico pelo ID. <li>PUT /contacts/: Atualiza um contato espec\u00edfico. <li>DELETE /contacts/: Deleta um contato espec\u00edfico."},{"location":"aulas/02-rest/exercicios/AplicacaoContatos/#instrucoes","title":"Instru\u00e7\u00f5es:","text":"<ol> <li>Implementar os Endpoints: Com base na estrutura de dados fornecida e utilizando o Flask, crie os endpoints para as opera\u00e7\u00f5es listadas.</li> <li>Testar os Endpoints no Postman: Ap\u00f3s implementar cada endpoint, use o Postman para enviar requisi\u00e7\u00f5es e verificar se est\u00e3o funcionando corretamente. Teste tamb\u00e9m cen\u00e1rios de erro, como tentar acessar um contato que n\u00e3o existe.</li> <li>Refinar o C\u00f3digo: Ap\u00f3s os testes, fa\u00e7a ajustes no c\u00f3digo conforme necess\u00e1rio para lidar com poss\u00edveis erros e garantir que o servi\u00e7o esteja robusto.</li> </ol> <p>Resultado Esperado: Um servi\u00e7o web funcional que permite a manipula\u00e7\u00e3o completa da lista de contatos, operando corretamente com as requisi\u00e7\u00f5es testadas no Postman.</p>"},{"location":"aulas/02-rest/exercicios/AplicacaoLivros/","title":"Aplica\u00e7\u00e3o de Gerenciamento de Livros","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Voc\u00ea est\u00e1 desenvolvendo uma API RESTful para gerenciar o acervo de livros de uma biblioteca. O objetivo \u00e9 permitir que os bibliotec\u00e1rios possam adicionar novos livros, visualizar detalhes de livros existentes, atualizar informa\u00e7\u00f5es e remover livros do acervo. Cada livro ter\u00e1 um identificador \u00fanico, um t\u00edtulo, um autor e um status indicando se o livro est\u00e1 dispon\u00edvel ou emprestado.</p> <p>Estrutura do Livro:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o livro.</li> <li>T\u00edtulo: Uma string que representa o t\u00edtulo do livro.</li> <li>Autor: Uma string que representa o autor do livro.</li> <li>Status: Uma string que indica se o livro est\u00e1 \"Dispon\u00edvel\" ou \"Emprestado\".</li> </ul> <p>Exemplo de Dados Iniciais:</p> <pre><code>books = [\n    {\n        \"id\": 1,\n        \"title\": \"1984\",\n        \"author\": \"George Orwell\",\n        \"status\": \"Dispon\u00edvel\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Dom Casmurro\",\n        \"author\": \"Machado de Assis\",\n        \"status\": \"Emprestado\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"A Revolu\u00e7\u00e3o dos Bichos\",\n        \"author\": \"George Orwell\",\n        \"status\": \"Dispon\u00edvel\"\n    }\n]\n</code></pre>"},{"location":"aulas/02-rest/exercicios/AplicacaoLivros/#_1","title":"Aplica\u00e7\u00e3o de Gerenciamento de Livros","text":"<ol> <li>GET /books: Retorna a lista de todos os livros no acervo.</li> <li>POST /books: Adiciona um novo livro ao acervo.</li> <li>GET /books/: Retorna um livro espec\u00edfico pelo ID. <li>PUT /books/: Atualiza as informa\u00e7\u00f5es de um livro espec\u00edfico. <li>DELETE /books/: Remove um livro espec\u00edfico do acervo."},{"location":"aulas/02-rest/exercicios/AplicacaoLivros/#instrucoes","title":"Instru\u00e7\u00f5es:","text":"<ol> <li>Implementar os Endpoints: Com base na estrutura de dados fornecida e utilizando o Flask, crie os endpoints para as opera\u00e7\u00f5es listadas.</li> <li>Testar os Endpoints no Postman: Ap\u00f3s implementar cada endpoint, use o Postman para enviar requisi\u00e7\u00f5es e verificar se est\u00e3o funcionando corretamente. Certifique-se de testar cen\u00e1rios de sucesso e erro, como tentar atualizar o status de um livro que n\u00e3o existe.</li> <li>Refinar o C\u00f3digo: Ap\u00f3s os testes, fa\u00e7a ajustes no c\u00f3digo conforme necess\u00e1rio para lidar com poss\u00edveis erros e garantir que o servi\u00e7o esteja robusto.</li> </ol> <p>Resultado Esperado: Um servi\u00e7o web funcional que permite a manipula\u00e7\u00e3o completa do acervo de livros, operando corretamente com as requisi\u00e7\u00f5es testadas no Postman.</p>"},{"location":"aulas/02-rest/exercicios/AplicacaoTarefas/","title":"Aplica\u00e7\u00e3o de Gerenciamento de Tarefas","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Voc\u00ea foi contratado para desenvolver o backend de uma API RESTful para gerenciar uma lista de tarefas di\u00e1rias. O objetivo \u00e9 permitir que os usu\u00e1rios possam criar, visualizar, atualizar e excluir tarefas de maneira f\u00e1cil e r\u00e1pida. Cada tarefa ter\u00e1 um identificador \u00fanico, um t\u00edtulo, uma descri\u00e7\u00e3o e um status que indica se a tarefa foi conclu\u00edda ou n\u00e3o.</p> <p>Estrutura da Tarefa:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica a tarefa.</li> <li>T\u00edtulo: Uma string que descreve o t\u00edtulo da tarefa.</li> <li>Descri\u00e7\u00e3o: Uma string que fornece mais detalhes sobre a tarefa.</li> <li>Status: Um valor booleano que indica se a tarefa est\u00e1 conclu\u00edda (True) ou n\u00e3o (False).</li> </ul> <p>Exemplo de Dados Iniciais:</p> <pre><code>tasks = [\n    {\n        \"id\": 1,\n        \"title\": \"Estudar Python\",\n        \"description\": \"Ler o cap\u00edtulo sobre Flask e APIs RESTful\",\n        \"status\": False\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Comprar comida\",\n        \"description\": \"comprar frutas e vegetais para a semana\",\n        \"status\": False\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Passear com o pet\",\n        \"description\": \"Caminhar por 30 minutos no parque\",\n        \"status\": True\n    }\n]\n</code></pre> <ol> <li>GET /tarefa: Retorna a lista de todas as tarefas.</li> <li>POST /tarefa: Adiciona uma nova tarefa.</li> <li>GET /tasks/: Retorna uma tarefa espec\u00edfica pelo ID. <li>PUT /tasks/: Atualiza uma tarefa espec\u00edfica. <li>DELETE /tasks/: Deleta uma tarefa espec\u00edfica."},{"location":"aulas/02-rest/exercicios/AplicacaoTarefas/#instrucoes","title":"Instru\u00e7\u00f5es:","text":"<ol> <li>Implementar os Endpoints: Com base na estrutura de dados fornecida e utilizando o Flask, crie os endpoints para as opera\u00e7\u00f5es listadas.</li> <li>Testar os Endpoints no Postman: Ap\u00f3s implementar cada endpoint, use o Postman para enviar requisi\u00e7\u00f5es e verificar se est\u00e3o funcionando corretamente. Certifique-se de testar todos os cen\u00e1rios, incluindo erros (por exemplo, tentar acessar uma tarefa com um ID que n\u00e3o existe).</li> <li>Refinar o C\u00f3digo: Ap\u00f3s os testes, fa\u00e7a ajustes no c\u00f3digo conforme necess\u00e1rio para lidar com poss\u00edveis erros e garantir que o servi\u00e7o esteja robusto.</li> </ol> <p>Resultado Esperado: Um servi\u00e7o web funcional que permite a manipula\u00e7\u00e3o completa da lista de tarefas, operando corretamente com as requisi\u00e7\u00f5es testadas no Postman.</p>"},{"location":"aulas/02-rest/exercicios/CorrigindoProdutos/","title":"Corrigindo Erros em uma API de Gerenciamento de Produtos","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/02-rest/exercicios/CorrigindoProdutos/#api-de-gerenciamento-de-produtos","title":"API de Gerenciamento de Produtos","text":"<p>Voc\u00ea recebeu uma API RESTful de gerenciamento de produtos que j\u00e1 foi desenvolvida, mas cont\u00e9m alguns erros que precisam ser corrigidos. A API deve permitir adicionar novos produtos, visualizar produtos existentes, atualizar detalhes de produtos e remover produtos. Cada produto tem um identificador \u00fanico, um nome, uma descri\u00e7\u00e3o e um pre\u00e7o.</p> <p>Estrutura do Produto:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o produto.</li> <li>Nome: Uma string que representa o nome do produto.</li> <li>Descri\u00e7\u00e3o: Uma string que descreve o produto.</li> <li>Pre\u00e7o: Um n\u00famero de ponto flutuante que representa o pre\u00e7o do produto.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoProdutos/#codigo-bugado","title":"C\u00f3digo bugado:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Lista de produtos de exemplo\nproducts = [\n    {\"id\": 1, \"name\": \"Laptop\", \"description\": \"Um laptop poderoso\", \"price\": 1500.00},\n    {\"id\": 2, \"name\": \"Mouse\", \"description\": \"Mouse sem fio\", \"price\": 50.00},\n]\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    return products  \n\n@app.route('/products', methods=['POST'])\ndef add_product():\n    new_product = request.json\n    products.append(new_product)\n    return jsonify(new_product), 201\n\n@app.route('/products/&lt;int:id&gt;', methods=['GET'])\ndef get_product(id):\n    for product in products:\n        if product[\"id\"] == id:\n            return product  \n    return {\"error\": \"Product not found\"}, 404\n\n@app.route('/products/&lt;int:id&gt;', methods=['PUT'])\ndef update_product(id):\n    updated_product = request.json\n    for product in products:\n        if product[\"id\"] == id:\n            product = updated_product  \n            return jsonify(product)\n    return {\"error\": \"Product not found\"}, 404\n\n@app.route('/products/&lt;int:id&gt;', methods=['DELETE'])\ndef delete_product(id):\n    for product in products:\n        if product[\"id\"] == id:\n            products.remove(product)\n            return {\"message\": \"Product deleted\"}, 200\n    return {\"error\": \"Product not found\"}, 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/CorrigindoProdutos/#testar-a-api-no-postman","title":"Testar a API no Postman:","text":"<ul> <li>Ap\u00f3s corrigir os erros, use o Postman para testar cada endpoint. Eles devem garantir que todas as opera\u00e7\u00f5es funcionem conforme o esperado, incluindo cen\u00e1rios de sucesso e falha.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoProdutos/#dica-sobre-os-bugs-no-exercicio","title":"Dica sobre os bugs no exercicio:","text":"<ul> <li>Dica 1: Verifique se o endpoint <code>GET /products</code> est\u00e1 retornando a informa\u00e7\u00e3o no formato JSON.</li> <li>Dica 2: Verifique se o endpoint <code>POST /products</code> est\u00e1 validando todos os campos antes de adicionar um novo produto.</li> <li>Dica 3: Verifique se o endpoint <code>GET /products/&lt;id&gt;</code> est\u00e1 retornando a resposta no formato JSON. Al\u00e9m disso, verifique se o c\u00f3digo est\u00e1 tratando poss\u00edveis requisi\u00e7\u00f5es com IDs que n\u00e3o existem.</li> <li>Dica 4: Verifique se o endpoint <code>PUT /products/&lt;id&gt;</code> permite a atualiza\u00e7\u00e3o parcial dos dados do produto, sem substituir o produto inteiro.</li> <li>Dica 5: Verifique se o endpoint <code>DELETE /products/&lt;id&gt;</code>  remove corretamente o produto e verifica se o produto existe.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoRestaurante/","title":"Corrigindo Erros em uma API de Gerenciamento de Pedidos de Restaurante","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Voc\u00ea recebeu uma API RESTful para o gerenciamento de pedidos em um restaurante, que j\u00e1 foi desenvolvida, mas cont\u00e9m alguns erros que precisam ser corrigidos. A API deve permitir criar novos pedidos, visualizar pedidos existentes, atualizar o status dos pedidos e remover pedidos. Cada pedido tem um identificador \u00fanico, o nome do cliente, os itens do pedido e o status (ex: \"Em preparo\", \"Pronto\", \"Entregue\").</p> <p>Estrutura do Pedido:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o pedido.</li> <li>Nome do Cliente: Uma string que representa o nome do cliente.</li> <li>Itens: Uma lista de strings que descreve os itens do pedido.</li> <li>Status: Uma string que representa o status do pedido.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoRestaurante/#codigo-bugado","title":"C\u00f3digo bugado:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Lista de pedidos de exemplo\norders = [\n    {\"id\": 1, \"customer_name\": \"Jo\u00e3o Silva\", \"items\": [\"Pizza\", \"Refrigerante\"], \"status\": \"Em preparo\"},\n    {\"id\": 2, \"customer_name\": \"Maria Oliveira\", \"items\": [\"Hamb\u00farguer\", \"Batata Frita\"], \"status\": \"Pronto\"},\n]\n\n@app.route('/orders', methods=['GET'])\ndef get_orders():\n    if len(orders) == 0:\n        return {\"error\": \"No orders found\"}  \n    return jsonify(orders)\n\n@app.route('/orders', methods=['POST'])\ndef add_order():\n    new_order = request.json\n    if not new_order[\"customer_name\"] or not new_order[\"items\"]:\n        return {\"error\": \"Invalid data\"}, 400  \n    new_order[\"id\"] = len(orders) + 1\n    orders.append(new_order)\n    return jsonify(new_order), 201\n\n@app.route('/orders/&lt;int:id&gt;', methods=['GET'])\ndef get_order(id):\n    for order in orders:\n        if order[\"id\"] == id:\n            return order  \n    return {\"error\": \"Order not found\"}, 404\n\n@app.route('/orders/&lt;int:id&gt;', methods=['PUT'])\ndef update_order(id):\n    updated_order = request.json\n    for order in orders:\n        if order[\"id\"] == id:\n            order.update(updated_order)  \n            return jsonify(order)\n    return {\"error\": \"Order not found\"}, 404\n\n@app.route('/orders/&lt;int:id&gt;', methods=['DELETE'])\ndef delete_order(id):\n    for order in orders:\n        if order[\"id\"] == id:\n            orders.remove(order)\n            return {\"message\": \"Order deleted\"}, 200\n    return {\"error\": \"Order not found\"}, 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/CorrigindoRestaurante/#testar-a-api-no-postman","title":"Testar a API no Postman:","text":"<ul> <li>Ap\u00f3s corrigir os erros, use o Postman para testar cada endpoint. Eles devem garantir que todas as opera\u00e7\u00f5es funcionem conforme o esperado, incluindo cen\u00e1rios de sucesso e falha.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoRestaurante/#dica-sobre-os-bugs-no-exercicio","title":"Dica sobre os bugs no exerc\u00edcio:","text":"<ul> <li>Dica 1: Verifique se o endpoint <code>GET /orders</code> est\u00e1 retornando a informa\u00e7\u00e3o no formato JSON e lidando corretamente quando n\u00e3o h\u00e1 pedidos.</li> <li>Dica 2: Verifique se o endpoint <code>POST /orders</code> est\u00e1 validando corretamente todos os campos obrigat\u00f3rios antes de criar um novo pedido.</li> <li>Dica 3: Verifique se o endpoint <code>GET /orders/&lt;id&gt;</code> est\u00e1 retornando a resposta no formato JSON e tratando adequadamente pedidos que n\u00e3o existem.</li> <li>Dica 4: Verifique se o endpoint <code>PUT /orders/&lt;id&gt;</code> permite a atualiza\u00e7\u00e3o parcial dos dados do pedido, preservando os dados que n\u00e3o foram enviados.</li> <li>Dica 5: Verifique se o endpoint <code>DELETE /orders/&lt;id&gt;</code> remove corretamente o pedido e verifica se o pedido existe.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoUsuarios/","title":"Corrigindo Erros em uma API de Gerenciamento de Usu\u00e1rios","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Voc\u00ea recebeu uma API RESTful de gerenciamento de usu\u00e1rios que j\u00e1 foi desenvolvida, mas cont\u00e9m alguns erros que precisam ser corrigidos. A API deve permitir adicionar novos usu\u00e1rios, visualizar usu\u00e1rios existentes, atualizar detalhes dos usu\u00e1rios e remover usu\u00e1rios. Cada usu\u00e1rio tem um identificador \u00fanico, um nome, um e-mail e uma idade.</p> <p>Estrutura do Usu\u00e1rio:</p> <ul> <li>ID: Um n\u00famero inteiro \u00fanico que identifica o usu\u00e1rio.</li> <li>Nome: Uma string que representa o nome do usu\u00e1rio.</li> <li>E-mail: Uma string que representa o endere\u00e7o de e-mail do usu\u00e1rio.</li> <li>Idade: Um n\u00famero inteiro que representa a idade do usu\u00e1rio.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoUsuarios/#codigo-bugado","title":"C\u00f3digo bugado:","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Lista de usu\u00e1rios de exemplo\nusers = [\n    {\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\", \"age\": 30},\n    {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\", \"age\": 25},\n]\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    return users  \n\n@app.route('/users', methods=['POST'])\ndef add_user():\n    new_user = request.json\n    users.append(new_user)\n    return jsonify(new_user), 201\n\n@app.route('/users/&lt;int:id&gt;', methods=['GET'])\ndef get_user(id):\n    for user in users:\n        if user[\"id\"] == id:\n            return user \n    return {\"error\": \"User not found\"}, 404\n\n@app.route('/users/&lt;int:id&gt;', methods=['PUT'])\ndef update_user(id):\n    updated_user = request.json\n    for user in users:\n        if user[\"id\"] == id:\n            user = updated_user \n            return jsonify(user)\n    return {\"error\": \"User not found\"}, 404\n\n@app.route('/users/&lt;int:id&gt;', methods=['DELETE'])\ndef delete_user(id):\n    for user in users:\n        if user[\"id\"] == id:\n            users.remove(user)\n            return {\"message\": \"User deleted\"}, 200\n    return {\"error\": \"User not found\"}, 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/02-rest/exercicios/CorrigindoUsuarios/#testar-a-api-no-postman","title":"Testar a API no Postman:","text":"<ul> <li>Ap\u00f3s corrigir os erros, use o Postman para testar cada endpoint. Eles devem garantir que todas as opera\u00e7\u00f5es funcionem conforme o esperado, incluindo cen\u00e1rios de sucesso e falha.</li> </ul>"},{"location":"aulas/02-rest/exercicios/CorrigindoUsuarios/#dica-sobre-os-bugs-no-exercicio","title":"Dica sobre os bugs no exerc\u00edcio:","text":"<ul> <li>Dica 1: Verifique se o endpoint <code>GET /users</code> est\u00e1 retornando a informa\u00e7\u00e3o no formato JSON.</li> <li>Dica 2: Verifique se o endpoint <code>POST /users</code> est\u00e1 validando todos os campos antes de adicionar um novo usu\u00e1rio.</li> <li>Dica 3: Verifique se o endpoint <code>GET /users/&lt;id&gt;</code> est\u00e1 retornando a resposta no formato JSON. Al\u00e9m disso, verifique se o c\u00f3digo est\u00e1 tratando poss\u00edveis requisi\u00e7\u00f5es com IDs que n\u00e3o existem.</li> <li>Dica 4: Verifique se o endpoint <code>PUT /users/&lt;id&gt;</code> permite a atualiza\u00e7\u00e3o parcial dos dados do usu\u00e1rio, sem substituir o usu\u00e1rio inteiro.</li> <li>Dica 5: Verifique se o endpoint <code>DELETE /users/&lt;id&gt;</code> remove corretamente o usu\u00e1rio e verifica se o usu\u00e1rio existe.</li> </ul>"},{"location":"aulas/03-postman/como-usar/","title":"Ferramentas B\u00e1sicas: Postman - Como Usar","text":"<p>Respons\u00e1vel: Sarti</p> <p>Este t\u00f3pico \u00e9 complementar \u00e0 instala\u00e7\u00e3o do Postman. Caso ainda n\u00e3o tenha o programa baixado, inicie pelo outro guia. Continuaremos de onde paramos, com o request criado.</p>"},{"location":"aulas/03-postman/como-usar/#requests-geral","title":"Requests - Geral","text":"<p>Requests s\u00e3o requisi\u00e7\u00f5es totalmente personaliz\u00e1veis. Utilizamos elas para simular o que vai ser enviado pelo nosso site ao nosso sistema. Sendo assim, todos os nossos testes de requisi\u00e7\u00f5es, assim como o estudo de c\u00f3digos de erro, v\u00e3o girar em torno das requisi\u00e7\u00f5es realizadas pelo request. Existem v\u00e1rios tipos de requisi\u00e7\u00f5es, sendo as 4 principais: Get, Put, Post e Delete. Elas ser\u00e3o abordadas de melhor maneira pelo professor durante as aulas. Aqui, abordarei apenas o m\u00ednimo para entender como criar testes utilizando o Postman.</p>"},{"location":"aulas/03-postman/como-usar/#testes","title":"Testes","text":"<p>Apesar de usarmos o Postman para testes, diferentemente do pytest onde nos \u00e9 dito se estamos certos ou errados, o Postman apenas testa e nos exibe um resultado. Se ele est\u00e1 correto ou n\u00e3o, n\u00f3s como desenvolvedores teremos que decicir, se o programa se comporta como queremos. </p>"},{"location":"aulas/03-postman/como-usar/#status-codes","title":"Status Codes","text":"<p>Os c\u00f3digos de status, ou Status Codes, s\u00e3o alguns c\u00f3digos comuns e padronizados na internet, o que nos permite ter um meio universal de debugar e compreender uma Request, bem ou mal-sucedida. Existem v\u00e1rios erros de Status que devem ser consultados na internet, mas como regra a cada 100 status code, seu significado muda. E cada sub c\u00f3digo, indica com detalhes a opera\u00e7\u00e3o. </p> <p>100-199: Resposta informacional.</p> <p>200-299: Request bem sucedido.</p> <p>300-399: Redirect. Requisi\u00e7\u00e3o bem sucedida, mas precisou/retornou um redirect.</p> <p>400-499: Erro no client side, desde erro de conex\u00e3o at\u00e9 input invalido de informa\u00e7\u00f5es.</p> <p>500+: Erro no server side, um problema diretamente com a empresa e o servidor.</p> <p>Obs: N\u00e3o existem TANTOS c\u00f3digos assim, n\u00e3o existem 100 c\u00f3digos de sucesso diferentes por exemplo. Apenas temos o espa\u00e7o reservado para manter o padr\u00e3o.</p>"},{"location":"aulas/03-postman/como-usar/#requests-get","title":"Requests: Get","text":"<p>Por padr\u00e3o todo request criado vem como Get, podemos ver isso no texto \u00e0 esquerda da barra de busca. Essa barra de busca \u00e9 onde iremos escrever os links que estamos testando as requisi\u00e7\u00f5es, podemos testar tanto links da surface web como o nosso servidor em flask.</p> <p></p> <p>Ap\u00f3s clicar em Send com a URL necess\u00e1ria, podemos ver a resposta do servidor. Por enquanto ela \u00e9 bem simples, mas posteriormente pode vir cheia de informa\u00e7\u00f5es. De importante na resposta de uma requisi\u00e7\u00e3o Get temos duas informa\u00e7\u00f5es, a resposta em si, exibida na \u00e1rea similar com o terminal do VScode na parte de baixo da tela, neste caso um texto \u201cWeb service em execu\u00e7\u00e3o\u201d, assim como o Status Code da requisi\u00e7\u00e3o. Podemos ver o Status Code na parte superior direita desta mesma \u00e1rea, onde podemos ver \u201cStatus: 200 Ok\u201d. </p>"},{"location":"aulas/03-postman/como-usar/#requests-post","title":"Requests: Post","text":"<p>Post \u00e9 a requisi\u00e7\u00e3o respons\u00e1vel por enviar um JSON para o servidor, ou seja, receber algo do cliente. Para enviarmos um Post v\u00e1lido, primeiro criamos um teste e, em seguida, precisamos mudar o tipo de requisi\u00e7\u00e3o de Get para Post no bot\u00e3o \u00e0 esquerda. Ap\u00f3s isso, temos que escrever o que ser\u00e1 enviado. Para isso, clique em \u201cBody\u201d abaixo da barra da URL e selecione a op\u00e7\u00e3o \u201cRaw\u201d. Uma vez feito isso, temos nossa \u00e1rea de escrita dispon\u00edvel. Certifique-se de selecionar JSON entre as op\u00e7\u00f5es do seletor azul \u00e0 direita.</p> <p>Obs: Podemos enviar em outros formatos, mas como ir\u00e3o perceber ao longo do semestre, JSON \u00e9 um padr\u00e3o para requisi\u00e7\u00f5es web, por ser super simples, intuitivo e organizado. Para quem nunca usou antes, \u00e9 basicamente um dicion\u00e1rio do Python, e existem diversos sites documentando JSON e ajudando a criar os seus pr\u00f3prios.</p> <p></p> <p>Observer que dessa vez o request retornou um erro, 500 Internal Server Error, isso quer dizer que eu enviei informa\u00e7\u00f5es validas, mas que o servidor n\u00e3o conseguia lidar com elas (pois o c\u00f3digo n\u00e3o estava preparado). Note que agora os campos estar\u00e3o adequados, o que exibira um texto valido na parte de baixo e minha resposta ser\u00e1 \u201c201 Created\u201d, indicando que criei um usu\u00e1rio com sucesso. </p> <p></p>"},{"location":"aulas/03-postman/como-usar/#request-put-delete","title":"Request: Put &amp; Delete","text":"<p>Ambos os m\u00e9todos operam de maneira id\u00eantica ao Post e Get, respectivamente. No entanto, estes s\u00e3o dedicados a editar e apagar informa\u00e7\u00f5es do servidor. Para n\u00f3s, usu\u00e1rios de uma API, n\u00e3o muda nada entre us\u00e1-los ou os m\u00e9todos Post e Get, mas para o servidor e o c\u00f3digo, essa \u00e9 uma distin\u00e7\u00e3o muito importante, pois \u00e9 ela que diferencia editar e criar um usu\u00e1rio, por exemplo.</p>"},{"location":"aulas/03-postman/como-usar/#exportando-testes","title":"Exportando testes:","text":"<p>Ap\u00f3s todos os testes estarem feitos e SALVOS, clique nos \u201c\u2026\u201d da sua collection e ao inv\u00e9s de criar um request, selecione \u201cExport\u201d, e selecione \u201cCollection V2.1\u201d. Ent\u00e3o ele ir\u00e1 salvar um arquivo com os testes realizados na sua m\u00e1quina, este arquivo deve ser compartilhado quando quiser mostrar seus testes para os outros (inclusive em provas).\u00a0</p>"},{"location":"aulas/03-postman/como-usar/#conclusao","title":"Conclus\u00e3o","text":"<p>No fim, mesmo que tenhamos feitos poucos testes, n\u00e3o usamos nenhum front-end para test\u00e1-los. Sem precisar fazer um formul\u00e1rio para enviar informa\u00e7\u00f5es, apenas intera\u00e7\u00f5es diretas com o Back. Isso em um uso de larga escala, como no desenvolvimento de um projeto inteiro, nos permite salvar muito tempo testando diretamente o que queremos.</p>"},{"location":"aulas/03-postman/instalacao/","title":"Ferramentas B\u00e1sicas: Postman - Instala\u00e7\u00e3o","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"aulas/03-postman/instalacao/#por-que-postman","title":"Por que Postman?","text":"<p>A partir do segundo semestre, uma das ferramentas que vai nos acompanhar pelo resto do curso s\u00e3o as Aplica\u00e7\u00f5es de Teste de API, dentre as v\u00e1rias existentes no segundo semestre utilizamos a Postman especificamente. </p> <p>O principal motivo de precisarmos de aplica\u00e7\u00f5es como essa \u00e9 o teste isolado do Backend de um sistema API. Como devem lembrar ao longo do seu projeto de sprint session em Django no semestre passado, sempre que test\u00e1vamos uma nova rota, uma nova fun\u00e7\u00e3o ou qualquer coisa nova, precis\u00e1vamos abrir o navegador, entrar no link e ver as mudan\u00e7as no HTML/Frontend da aplica\u00e7\u00e3o. E se eu falasse que esse \u00e9 um m\u00e9todo muito pouco eficiente de testar um sistema? Apesar de funcional, ele requer que percamos muito tempo trabalhando em um frontend que serve apenas para nos mostrar se o backend funciona ou n\u00e3o, e nem mostra todas as informa\u00e7\u00f5es (al\u00e9m de que dev backend odeia front n\u00e9\u2026)</p> <p>Para resolver esse problema, utilizamos o Postman, que nos permite realizar requisi\u00e7\u00f5es para qualquer link e nos exibe o seu retorno completo. Assim, podemos pular a etapa de ficar testando no HTML do site, al\u00e9m de conseguirmos mais informa\u00e7\u00f5es. Principalmente, pois como iremos ver depois do curso, Back e Frontend s\u00e3o coisas distintas e independentes, e o Postman \u00e9 essencial para esta separa\u00e7\u00e3o do Back.</p>"},{"location":"aulas/03-postman/instalacao/#instalacao-e-setup","title":"Instala\u00e7\u00e3o e Setup:","text":"<p>Para instalar o Postman, baixe os arquivos necess\u00e1rios do site (https://www.postman.com/) e siga os passos.\u00a0</p> <p></p> <p>Windows, Mac e Linux:</p> <p>Baixe o execut\u00e1vel x64, ele deve por padr\u00e3o ir para sua pasta de Download. Execute e o programa deve ser instalado automaticamente. </p> <p>Linux (Se n\u00e3o der certo o passo acima):</p> <p>Para estes passos presumo que seja uma plataforma x64 baseada em Debian, caso contr\u00e1rio busque os passos para sua m\u00e1quina. Baixe o arquivo, ele por padr\u00e3o estar\u00e1 em sua aba de Downloads e deve vir no formato de compress\u00e3o \u201c.tar.gz.\u201d </p> <p>Ap\u00f3s isso abra seu terminal e realoque para a aba onde estiver o \u201carquivo .tar.gz\u201d, no exemplo Downloads. Ap\u00f3s isso execute no terminal os seguintes comandos: </p> <p>1) \u201ctar -xzf postman.tar.gz\u201d Obs: O seu arquivo provavelmente se chamara postman\u2026 onde os pontos s\u00e3o outras palavras referentes ao OS ou vers\u00e3o. Basta escrever postman e apertar Tab para o Auto Complete.</p> <p>2) \u201csudo mv Postman /opt\u201d</p> <p>3)\u201dsudo ln -s /opt/Postman/Postman /usr/local/bin/postman\u201d</p> <p></p> <p>Com estes comandos estamos, respectivamente, descompactando o programa na sua aba de Download (ele ja estaria funcional), movendo-o para alguma outra pasta de nossa escolha (por padr\u00e3o deixei a pasta /opt, por estar pr\u00f3ximo ao root e ser onde eu costumo guardar symbolic links, mas pode ser a pasta que quiser) e por fim criamos um link simb\u00f3lico do postman. Caso queira aprender como links simb\u00f3licos funcionam, vale a pesquisa mais tarde, mas basicamente atribu\u00edmos uma palavra para a execu\u00e7\u00e3o do programa via terminal (assim como \u201ccode\u201d inicia o vscode). Agora basta escreve \u201cpostman\u201d no terminal para abrir ele. </p>"},{"location":"aulas/03-postman/instalacao/#setup","title":"Setup:","text":"<p>Ap\u00f3s baixar o postman, ser\u00e1 necess\u00e1rio criar uma conta e logar para ter acesso \u00e0 algumas features, dentre elas as collections que vamos utilizar em provas e testes. Crie sua conta e fa\u00e7a login, este \u00e9 o \u00fanico setup necess\u00e1rio. </p>"},{"location":"aulas/03-postman/instalacao/#como-utilizar-o-postman-primeiros-passos","title":"Como utilizar o Postman - Primeiros Passos:","text":"<p>Ao longo da disciplina o uso do postman vai ficar mais intuitivo, tal como a necessidade dele mais clara, mas por enquanto podemos focar no passo a passo b\u00e1sico. J\u00e1 estando logado, sua tela inicial deve estar vazia (sem testes) e pronta para uso. Iniciamos criando uma collection, que \u00e9 basicamente uma pasta que ir\u00e1 guardar nossos testes. Basta clicar em \u201cNew\u201d no bot\u00e3o do lado superior esquerdo da tela que um menu aparecera, selecione \u201cCollection\u201d. </p> <p></p> <p>Ap\u00f3s criar nossa collection, passe o mouse por cima dela na aba esquerda da tela e clique nos \u201c\u2026\u201d. Selecione \u201cAdd request\u201d. Assim criaremos um request, nossa unidade de testes.</p> <p>Para um guia de como utilizar o postman, siga para \u201cFerramentas B\u00e1sicas: Postman - Como Usar\u201d</p>"},{"location":"aulas/04-persistencia/instalacao-mysql/","title":"MySQL Workbench: Instala\u00e7\u00e3o","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"aulas/04-persistencia/instalacao-mysql/#aviso","title":"AVISO:","text":"<p>Este guia serve para ajudar voc\u00eas a baixar e configurar o ambiente utilizado ao longo do semestre para MySQL. Para quest\u00f5es te\u00f3ricas relacionadas a Bancos de Dados Relacionais, consulte o outro material.</p> <p>Neste semestre do curso, utilizaremos o MySQL como banco de dados relacional para nossos estudos. Este guia serve para ajud\u00e1-los a baixar o MySQL Workbench e o Aiven, que ser\u00e1 nosso banco de dados em nuvem.</p> <p>Podemos iniciar tanto pelo Aiven quanto pelo MySQL Workbench; escolha por onde desejar come\u00e7ar.</p> <p>O tutorial est\u00e1 sendo feito em um Fedora Linux, podendo ser levemente diferente de acordo com o seu sistema operacional. Atenha-se a pequenos detalhes.</p>"},{"location":"aulas/04-persistencia/instalacao-mysql/#mysql-workbench","title":"MySQL Workbench","text":"<p>MySQL Workbench \u00e9 a plataforma de UI que utilizaremos para queries durante o semestre. O processo de instala\u00e7\u00e3o pode variar dependendo do seu sistema operacional, mas est\u00e1 todo documentado e guiado no site.</p> <ul> <li>Acesse o site oficial do MySQL Workbench (https://www.mysql.com/products/workbench/)</li> <li>Ao acessar o site, clique em \u201cDownload Now\u201d. Voc\u00ea ser\u00e1 redirecionado para uma p\u00e1gina de download.</li> <li> <p>Escolha o sistema operacional do seu computador e a vers\u00e3o correspondente, e baixe o respectivo pacote (em caso de d\u00favida, geralmente \u00e9 o primeiro):</p> <p></p> <p>IMPORTANTE: Usu\u00e1rios de Windows notar\u00e3o uma tela levemente diferente, oferecendo o MySQL Installer. Este pode ser utilizado, mas recomendo baixar primeiro o arquivo MSI Installer, oferecido logo abaixo.</p> </li> <li> <p>Ao clicar em Download, o site ir\u00e1 pedir para voc\u00ea realizar um login. Esta etapa \u00e9 desnecess\u00e1ria; basta clicar em \u201cNo, just start my download\u201d e ele ir\u00e1 baixar o arquivo.</p> <p></p> </li> <li> <p>Tendo o arquivo baixado, siga os passos de instala\u00e7\u00e3o defaults de seu sistema operacional:</p> <ul> <li>Windows: Execute o arquivo como administrador e siga os passsos</li> <li>Linux (Ubuntu): $ sudo apt-get install Downloads/nome do arquivo.rpm</li> <li>Linux (Fedora): $ sudo dnf install Downloads/nome do arquivo.rpm</li> </ul> </li> </ul> <p>Ap\u00f3s isso, o programa deve estar baixado em seu computador e funcionando normalmente. Tente abrir e ir\u00e1 se deparar com a tela inicial:</p> <p></p>"},{"location":"aulas/04-persistencia/instalacao-mysql/#aiven","title":"Aiven","text":"<p>Aiven ser\u00e1 a plataforma que utilizaremos para hospedar nosso banco de dados MySQL. Todos os passos de cria\u00e7\u00e3o de conta aqui demonstrados utilizam um e-mail tempor\u00e1rio descart\u00e1vel para o tutorial.</p> <p>UTILIZE SEU EMAIL E N\u00c3O PERCA O SEU BANCO DE DADOS</p> <ul> <li> <p>Acesse o site oficial do Aiven e crie sua conta (https://console.aiven.io/signup) ou fa\u00e7a login com seu GitHub.</p> <p></p> </li> <li> <p>Ap\u00f3s criar sua conta, prossiga para fazer login na plataforma. No seu primeiro login, ela pedir\u00e1 para selecionar se sua conta \u00e9 Pessoal ou Empresarial. Selecione Pessoal.</p> <p></p> </li> <li> <p>Ap\u00f3s essa etapa, voc\u00ea ser\u00e1 direcionado para um painel com v\u00e1rios servi\u00e7os dispon\u00edveis. Selecione a op\u00e7\u00e3o MySQL.</p> </li> <li> <p>Nas configura\u00e7\u00f5es do seu banco de dados, selecione o plano gratuito e configure seu banco da seguinte maneira:</p> <p></p> </li> <li> <p>Ap\u00f3s criar seu banco gratuito, ele ir\u00e1 te direcionar para uma tela de conex\u00f5es. Em seguida, baixe o MySQL Workbench, se ainda n\u00e3o o tiver, e prossiga para a etapa de conex\u00e3o.</p> </li> </ul>"},{"location":"aulas/04-persistencia/instalacao-mysql/#conectando","title":"Conectando","text":"<p>Ap\u00f3s criar seu banco de dados e baixar o MySQL Workbench, vamos realizar a conex\u00e3o entre as duas plataformas.</p> <ul> <li>Para isso, abra ambas em sua tela inicial (no caso do Aiven, abra a p\u00e1gina de vis\u00e3o geral do seu banco de dados)</li> <li> <p>No painel de vis\u00e3o geral do seu banco de dados no Aiven, voc\u00ea ter\u00e1 todas as informa\u00e7\u00f5es necess\u00e1rias para conectar ao banco, como na imagem abaixo.</p> <p></p> </li> <li> <p>Opcionalmente, voc\u00ea tamb\u00e9m pode clicar em Quick Connect para ver um passo a passo de como conectar ao banco de diversas maneiras. Selecione MySQL Workbench e siga os passos.</p> </li> <li>No seu workbench, clique no \u201c+\u201d em \u201cMySQL Connections\u201d para adicionar uma nova conex\u00e3o.</li> <li> <p>Na tela de nova conex\u00e3o, preencha os campos com as informa\u00e7\u00f5es do seu banco de dados (listadas no passo a passo do Quick Connect).</p> <p></p> </li> <li> <p>Ap\u00f3s preencher os campos, baixe o CA certificate no site do Aiven (veja o Quick Connect se precisar de ajuda) e fa\u00e7a o upload do CA certificate na aba SSL.</p> <p></p> </li> <li> <p>Ap\u00f3s isso, clique em \u201cTest Connection\u201d. Se funcionar, clique em Ok para criar a conex\u00e3o.</p> <p>AVISO: O Workbench provavelmente pedir\u00e1 uma senha para voc\u00ea; essa senha est\u00e1 na aba de vis\u00e3o geral do seu banco de dados. Tamb\u00e9m pode ser encontrada na aba Users do Aiven.</p> <p>Ap\u00f3s realizar a conex\u00e3o, se tudo der certo, voc\u00ea se deparar\u00e1 com esta tela. A partir daqui, siga as instru\u00e7\u00f5es do professor:</p> <p></p> </li> </ul>"},{"location":"aulas/04-persistencia/mysql-overview/","title":"MySQL - Overview","text":"<p>Respons\u00e1vel: Licia Sales</p>"},{"location":"aulas/04-persistencia/mysql-overview/#mysql","title":"MySQL","text":"<p>A ideia deste material \u00e9 explicar como o Python, o MySQL na nuvem (usando Aiven), e o MySQL Workbench trabalham juntos para gerenciar os dados das nossas aplica\u00e7\u00f5es.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#o-python","title":"O Python","text":"<p>O c\u00f3digo que voc\u00eas est\u00e3o escrevendo em Python \u00e9 respons\u00e1vel por gerenciar a aplica\u00e7\u00e3o e se comunicar com o banco de dados. Quando escrevemos um c\u00f3digo para criar, ler, atualizar ou deletar dados (o famoso CRUD), o Python envia essas instru\u00e7\u00f5es para o banco de dados MySQL que est\u00e1 na nuvem, hospedado no Aiven.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#aiven","title":"Aiven","text":"<p>O Aiven \u00e9 o servi\u00e7o que est\u00e1 hospedando o MySQL na nuvem. Ele \u00e9 o \u201ccora\u00e7\u00e3o\u201d do nosso sistema de dados, onde tudo o que voc\u00eas manipulam atrav\u00e9s do c\u00f3digo \u00e9 realmente armazenado. Quando o Python faz uma requisi\u00e7\u00e3o, como \u201cadicionar um novo item\u201d, \u201cbuscar dados\u201d ou \u201catualizar um registro\u201d, essa requisi\u00e7\u00e3o vai para o MySQL que est\u00e1 na nuvem. O Aiven garante que o banco de dados est\u00e1 sempre dispon\u00edvel, seguro e funcionando corretamente. Isso facilita o acesso aos dados de qualquer lugar, j\u00e1 que est\u00e1 na nuvem.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#mysql-workbench","title":"MySQL Workbench","text":"<p>O MySQL Workbench \u00e9 a ferramenta gr\u00e1fica para visualizar e gerenciar o banco de dados. Pense nele como uma janela que nos permite ver o que est\u00e1 acontecendo dentro do MySQL que est\u00e1 na nuvem. Ele se conecta ao MySQL no Aiven e permite que voc\u00eas visualizem as tabelas, rodem queries, fa\u00e7am backups e at\u00e9 criem novas tabelas manualmente. Isso \u00e9 muito \u00fatil para ver se o que voc\u00eas programaram em Python realmente funcionou. Muitas vezes, o c\u00f3digo n\u00e3o d\u00e1 o feedback visual que a gente precisa. O Workbench permite ver os dados em tempo real e verificar se o que o Python fez est\u00e1 correto. Ele \u00e9 uma ferramenta de apoio essencial para garantir que o banco de dados est\u00e1 configurado e operando corretamente.</p> <p></p>"},{"location":"aulas/04-persistencia/mysql-overview/#como-tudo-funciona-junto","title":"Como Tudo Funciona Junto","text":"<p>O Python \u00e9 o nosso ponto de partida. Escrevemos o c\u00f3digo que manda as instru\u00e7\u00f5es para o banco de dados.</p> <p>O Aiven (MySQL Server) na nuvem \u00e9 quem recebe essas instru\u00e7\u00f5es e faz o trabalho de armazenar, atualizar e gerenciar os dados.</p> <p>O MySQL Workbench \u00e9 a nossa interface gr\u00e1fica, onde conseguimos visualizar tudo isso acontecendo, verificar se os dados foram corretamente inseridos ou atualizados e gerenciar o banco de dados de uma maneira mais amig\u00e1vel.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#porque-aprender-isso","title":"Porque aprender isso?","text":"<ul> <li>Entender a Comunica\u00e7\u00e3o Completa: Voc\u00eas precisam entender como o Python conversa com o banco de dados na nuvem e como o Workbench nos ajuda a visualizar e gerenciar esses dados.</li> <li>Identificar e Corrigir Erros: Muitas vezes, os erros de c\u00f3digo se refletem no banco de dados. Com o Workbench, conseguimos visualizar o que deu certo ou errado e ajustar nosso c\u00f3digo Python.</li> <li>Prepara\u00e7\u00e3o para o Mundo Real: Este fluxo \u00e9 muito comum em ambientes profissionais. Saber como cada pe\u00e7a funciona \u00e9 essencial para quem quer trabalhar com desenvolvimento de software, APIs e bancos de dados.</li> </ul>"},{"location":"aulas/04-persistencia/mysql-overview/#sobre-registros-tabelas-e-relacionamentos","title":"Sobre Registros, Tabelas e Relacionamentos\u2026","text":"<p>Para entender como o Python interage com o banco de dados e como o MySQL Workbench nos auxilia, \u00e9 importante compreender como os registros, tabelas e relacionamentos funcionam dentro do banco de dados MySQL. </p>"},{"location":"aulas/04-persistencia/mysql-overview/#registros-no-banco-de-dados","title":"Registros no Banco de Dados","text":"<p>Registros s\u00e3o as linhas de dados que est\u00e3o armazenadas em uma tabela dentro do banco de dados. Cada registro representa uma entrada \u00fanica, com valores espec\u00edficos para cada coluna da tabela. </p> <p>Exemplo: Em uma tabela de \"Usu\u00e1rios\", cada linha (registro) poderia representar um usu\u00e1rio espec\u00edfico, contendo colunas como ID, Nome, E-mail, e Idade.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-usuarios","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email Idade 1 Alice alice@example.com 30 2 Bob bob@example.com 25 <p>Os registros s\u00e3o manipulados usando comandos SQL (ex: <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>) que o Python envia para o banco de dados. Esses comandos permitem adicionar novos registros, buscar informa\u00e7\u00f5es, atualizar dados existentes e remover registros.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tabelas-no-banco-de-dados","title":"Tabelas no Banco de Dados","text":"<p>Tabelas s\u00e3o a estrutura b\u00e1sica de armazenamento no banco de dados. Cada tabela armazena um conjunto de registros que compartilham a mesma estrutura (colunas).</p>"},{"location":"aulas/04-persistencia/mysql-overview/#relacionamentos-entre-tabelas","title":"Relacionamentos Entre Tabelas","text":"<p>Relacionamentos definem como as tabelas se conectam entre si. Isso \u00e9 importante para criar um banco de dados relacional onde as informa\u00e7\u00f5es devem ser ligadas e acessadas de forma eficiente.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tipos-de-relacionamentos","title":"Tipos de Relacionamentos:","text":"<p>Relacionamento 1:1 (Um para Um): Cada registro em uma tabela est\u00e1 associado a um e apenas um registro em outra tabela.</p> <p>Exemplo: Imagine duas tabelas, Usu\u00e1rios e Perfis, conectadas por uma linha direta entre dois registros. Cada Usu\u00e1rio tem um Perfil associado, e vice-versa</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-usuarios_1","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email 1 Alice alice@example.com"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-perfis","title":"Tabela de Perfis","text":"ID Foto Bio 1 foto1.jpg \"Developer\" <p>Relacionamento: Cada usu\u00e1rio tem um perfil exclusivo. </p> <p>Relacionamento 1:N (Um para Muitos)</p> <p>Um registro em uma tabela est\u00e1 associado a muitos registros em outra tabela, mas os registros na segunda tabela est\u00e3o associados a apenas um registro na primeira.</p> <p>Exemplo: Um \"Usu\u00e1rio\" pode ter muitos \"Pedidos\". Aqui, a tabela de \u201cUsu\u00e1rios\u201d tem um relacionamento 1:N com a tabela de \u201cPedidos\u201d. O relacionamento \u00e9 geralmente implementado adicionando uma chave estrangeira na tabela dos \u201cPedidos\u201d que aponta para o \u201cID do Usu\u00e1rio\u201d.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-usuarios_2","title":"Tabela de Usu\u00e1rios","text":"ID Nome Email 1 Alice alice@example.com"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-pedidos","title":"Tabela de Pedidos","text":"ID Produto Data Usuario_ID 1 Laptop 2023-01-15 1 2 Mouse 2023-01-20 1 <p>Relacionamento: O usu\u00e1rio \"Alice\" (ID 1) fez dois pedidos (Laptop e Mouse). </p> <p>Relacionamento N:M (Muitos para Muitos)</p> <p>Muitos registros em uma tabela est\u00e3o associados a muitos registros em outra tabela.</p> <p>Exemplo: Uma tabela \u201cAlunos\u201d e uma tabela \u201cCursos\u201d podem ter um relacionamento N:M, onde um aluno pode estar inscrito em v\u00e1rios cursos e cada curso pode ter muitos alunos inscritos. Esse tipo de relacionamento geralmente requer uma tabela intermedi\u00e1ria (ex: \u201cInscri\u00e7\u00f5es\u201d) para armazenar as chaves estrangeiras de ambas as tabelas.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-alunos","title":"Tabela de Alunos","text":"ID Nome Email 1 Alice alice@example.com 2 Bob bob@example.com"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-de-cursos","title":"Tabela de Cursos","text":"ID Nome Curso 101 Python 102 SQL 103 Design"},{"location":"aulas/04-persistencia/mysql-overview/#tabela-intermediaria-inscricoes","title":"Tabela Intermedi\u00e1ria (Inscri\u00e7\u00f5es)","text":"Aluno_ID Curso_ID Nota 1 101 A 1 102 B+ 2 103 A- <p>Relacionamento: A tabela de Inscri\u00e7\u00f5es conecta alunos a cursos, criando um relacionamento N:M. </p>"},{"location":"aulas/04-persistencia/mysql-overview/#e-o-mysql-workbench","title":"E o MySQL Workbench?","text":"<p>No MySQL Workbench, voc\u00eas podem visualizar todas as tabelas do banco de dados e ver como elas est\u00e3o conectadas. Ele oferece ferramentas visuais para criar e ajustar esses relacionamentos de maneira gr\u00e1fica. Atrav\u00e9s do Workbench, \u00e9 poss\u00edvel criar chaves prim\u00e1rias e estrangeiras que estabelecem essas conex\u00f5es entre tabelas, garantindo a integridade dos dados e a correta estrutura\u00e7\u00e3o das informa\u00e7\u00f5es.</p>"},{"location":"aulas/04-persistencia/mysql-overview/#por-que-isso-e-importante","title":"Por que isso \u00e9 importante?","text":"<ul> <li>Organiza\u00e7\u00e3o de Dados: Relacionamentos permitem que os dados sejam organizados de forma l\u00f3gica e estruturada, o que facilita a recupera\u00e7\u00e3o de informa\u00e7\u00f5es complexas.</li> <li>Efici\u00eancia e Consist\u00eancia: Usar relacionamentos evita a duplica\u00e7\u00e3o de dados e mant\u00e9m o banco de dados consistente, o que \u00e9 crucial para opera\u00e7\u00f5es complexas e integridade dos dados.</li> <li>Facilita a Programa\u00e7\u00e3o: Com um banco de dados bem estruturado, o c\u00f3digo Python se torna mais simples e eficiente, pois voc\u00eas podem buscar e manipular os dados com menos esfor\u00e7o e de maneira mais intuitiva.</li> </ul>"},{"location":"aulas/05-TDD/0-tdd/","title":"O que \u00e9 TDD?","text":"<p>TDD (Test-Driven Development), ou Desenvolvimento Orientado a Testes, \u00e9 uma metodologia de programa\u00e7\u00e3o que segue a ideia de escrever testes antes do c\u00f3digo. Em vez de simplesmente criar a funcionalidade e testar depois, no TDD primeiro escrevemos um teste que define o comportamento esperado do c\u00f3digo e, s\u00f3 ent\u00e3o, implementamos a solu\u00e7\u00e3o. Se quiser se aprofundar mais sobre TDD, recomendo a leitura do artigo How To Practice Test-Driven Development In Python?.</p>"},{"location":"aulas/05-TDD/0-tdd/#como-funciona-o-tdd","title":"Como funciona o TDD?","text":"<p>O TDD segue um ciclo de tr\u00eas passos, conhecido como Red-Green-Refactor:  </p> <ol> <li> <p>Red (Vermelho) - Escreva um teste que falha </p> <ul> <li>Antes de criar a funcionalidade, escrevemos um teste automatizado que descreve o comportamento esperado.  </li> <li>Como o c\u00f3digo ainda n\u00e3o existe, o teste vai falhar. Isso indica que o teste est\u00e1 funcionando corretamente e que precisamos implementar a funcionalidade.  </li> </ul> </li> <li> <p>Green (Verde) - Fa\u00e7a o teste passar </p> <ul> <li>Agora escrevemos o c\u00f3digo mais simples poss\u00edvel para fazer o teste passar.  </li> <li>O objetivo aqui n\u00e3o \u00e9 criar a solu\u00e7\u00e3o perfeita, mas apenas garantir que o teste seja aprovado.  </li> </ul> </li> <li> <p>Refactor (Refatora\u00e7\u00e3o) - Melhore o c\u00f3digo </p> <ul> <li>Com o teste passando, podemos melhorar o c\u00f3digo sem medo, pois os testes garantem que ele ainda funciona corretamente.  </li> <li>Esse processo evita c\u00f3digos desnecess\u00e1rios e ajuda a manter o programa limpo e organizado.  </li> </ul> </li> </ol> <p>Esse ciclo se repete continuamente, garantindo que cada nova funcionalidade seja testada antes mesmo de ser escrita.  </p> <p>A metodologia TDD (Test-Driven Development) tem vantagens e desvantagens que devem ser consideradas ao adot\u00e1-la.</p>"},{"location":"aulas/05-TDD/0-tdd/#pros-do-tdd","title":"\u2705 Pr\u00f3s do TDD","text":"<ol> <li> <p>C\u00f3digo mais confi\u00e1vel e menos bugs </p> <ul> <li>Como os testes s\u00e3o escritos antes do c\u00f3digo, os desenvolvedores s\u00e3o for\u00e7ados a pensar em poss\u00edveis falhas desde o in\u00edcio. Isso reduz significativamente a quantidade de bugs.</li> </ul> </li> <li> <p>Melhor design e modularidade </p> <ul> <li>Como o c\u00f3digo \u00e9 escrito para passar em testes pequenos e isolados, ele tende a ser mais modular e desacoplado, facilitando manuten\u00e7\u00e3o e refatora\u00e7\u00e3o.</li> </ul> </li> <li> <p>Documenta\u00e7\u00e3o viva </p> <ul> <li>Os testes atuam como uma documenta\u00e7\u00e3o do comportamento esperado do c\u00f3digo, ajudando outros desenvolvedores a entenderem como cada parte do sistema deve funcionar.</li> </ul> </li> <li> <p>Facilidade de refatora\u00e7\u00e3o </p> <ul> <li>Como h\u00e1 uma base s\u00f3lida de testes automatizados, \u00e9 poss\u00edvel refatorar o c\u00f3digo com mais confian\u00e7a, pois os testes indicar\u00e3o se algo quebrou.</li> </ul> </li> <li> <p>Redu\u00e7\u00e3o de tempo gasto em depura\u00e7\u00e3o </p> <ul> <li>O feedback r\u00e1pido dos testes ajuda a detectar e corrigir problemas antes que se tornem complexos.</li> </ul> </li> <li> <p>Melhor cobertura de testes </p> <ul> <li>Como os testes s\u00e3o criados antes do c\u00f3digo, a cobertura tende a ser mais completa do que quando os testes s\u00e3o escritos depois (ou nem s\u00e3o escritos).</li> </ul> </li> <li> <p>Facilita a colabora\u00e7\u00e3o </p> <ul> <li>Outros desenvolvedores podem trabalhar no c\u00f3digo sem medo de quebr\u00e1-lo, pois os testes indicam se algo n\u00e3o est\u00e1 funcionando corretamente.</li> </ul> </li> </ol>"},{"location":"aulas/05-TDD/0-tdd/#contras-do-tdd","title":"\u274c Contras do TDD","text":"<ol> <li> <p>Maior tempo inicial de desenvolvimento </p> <ul> <li>Escrever testes antes do c\u00f3digo pode tornar o in\u00edcio do projeto mais lento, o que pode ser um problema em prazos apertados.</li> </ul> </li> <li> <p>Curva de aprendizado </p> <ul> <li>Desenvolvedores que n\u00e3o est\u00e3o acostumados com TDD podem ter dificuldade inicial em estruturar os testes corretamente e entender a l\u00f3gica por tr\u00e1s da abordagem.</li> </ul> </li> <li> <p>Dificuldade com c\u00f3digo legado </p> <ul> <li>Aplicar TDD em projetos que j\u00e1 existem e n\u00e3o possuem uma base de testes pode ser dif\u00edcil, pois pode ser necess\u00e1rio refatorar o c\u00f3digo antes de escrever os testes.</li> </ul> </li> <li> <p>Excesso de testes desnecess\u00e1rios </p> <ul> <li>\u00c0s vezes, os desenvolvedores acabam escrevendo testes para tudo, mesmo para funcionalidades triviais, o que pode tornar a su\u00edte de testes dif\u00edcil de manter.</li> </ul> </li> <li> <p>Falsa sensa\u00e7\u00e3o de seguran\u00e7a </p> <ul> <li>Testes bem escritos reduzem bugs, mas n\u00e3o garantem que o sistema atender\u00e1 \u00e0s necessidades do usu\u00e1rio final. Al\u00e9m disso, testes mal planejados podem n\u00e3o cobrir todos os cen\u00e1rios importantes.</li> </ul> </li> <li> <p>Testes podem se tornar um fardo </p> <ul> <li>Manter testes atualizados conforme o c\u00f3digo evolui pode demandar tempo. Se mudan\u00e7as frequentes ocorrerem na arquitetura ou nas regras de neg\u00f3cio, os testes precisar\u00e3o ser constantemente reescritos.</li> </ul> </li> </ol>"},{"location":"aulas/05-TDD/0-tdd/#vale-a-pena-usar-tdd","title":"\ud83d\udccc Vale a pena usar TDD?","text":"<p>Depende do contexto. - Se o projeto exige alta qualidade, manuten\u00e7\u00e3o f\u00e1cil e desenvolvimento colaborativo, TDD pode ser um grande aliado. - Para projetos r\u00e1pidos ou prot\u00f3tipos, pode ser mais pr\u00e1tico desenvolver primeiro e testar depois. - Para equipes experientes, TDD funciona melhor, enquanto para iniciantes pode ser um desafio.</p>"},{"location":"aulas/05-TDD/0-tdd/#teste-de-unidade-teste-de-integracao-e-teste-de-ponta-a-ponta","title":"Teste de Unidade, Teste de Integra\u00e7\u00e3o e Teste de Ponta a Ponta","text":"<p>Garantir a qualidade de um software \u00e9 essencial, e para isso existem diferentes tipos de testes automatizados. Tr\u00eas dos mais importantes s\u00e3o: teste de unidade, teste de integra\u00e7\u00e3o e teste de ponta a ponta (E2E \u2013 End-to-End). Cada um deles tem um prop\u00f3sito espec\u00edfico dentro do processo de desenvolvimento.  </p>"},{"location":"aulas/05-TDD/0-tdd/#teste-de-unidade","title":"\ud83d\udd39 Teste de Unidade","text":"<p>O teste de unidade \u00e9 o mais b\u00e1sico e foca em validar pequenas partes do c\u00f3digo de forma isolada, como fun\u00e7\u00f5es ou m\u00e9todos individuais. Ele verifica se cada unidade do programa funciona corretamente sem considerar suas depend\u00eancias externas.  </p>"},{"location":"aulas/05-TDD/0-tdd/#cenario-tipico","title":"Cen\u00e1rio t\u00edpico:","text":"<p>Imagine que um sistema tenha uma fun\u00e7\u00e3o para calcular descontos em uma loja virtual. Um teste de unidade garantiria que a fun\u00e7\u00e3o retorna o resultado correto para diferentes valores de compra e regras de desconto.</p>"},{"location":"aulas/05-TDD/0-tdd/#quando-usar","title":"Quando usar?","text":"<ul> <li>Para testar regras de neg\u00f3cio individuais, como c\u00e1lculos matem\u00e1ticos e valida\u00e7\u00f5es simples.  </li> <li>Para garantir que uma fun\u00e7\u00e3o espec\u00edfica continua funcionando conforme esperado ap\u00f3s altera\u00e7\u00f5es no c\u00f3digo.  </li> <li>Para evitar que pequenos erros se propaguem para outras partes do sistema.  </li> </ul>"},{"location":"aulas/05-TDD/0-tdd/#teste-de-integracao","title":"\ud83d\udd39 Teste de Integra\u00e7\u00e3o","text":"<p>O teste de integra\u00e7\u00e3o verifica como diferentes partes do sistema trabalham juntas. Ele avalia a comunica\u00e7\u00e3o entre m\u00f3dulos, banco de dados, APIs externas e outros componentes.  </p>"},{"location":"aulas/05-TDD/0-tdd/#cenario-tipico_1","title":"Cen\u00e1rio t\u00edpico:","text":"<p>Suponha que uma aplica\u00e7\u00e3o tenha um m\u00f3dulo que recebe dados do usu\u00e1rio e os armazena no banco de dados. O teste de integra\u00e7\u00e3o verificaria se essa opera\u00e7\u00e3o acontece corretamente, garantindo que os dados s\u00e3o armazenados e recuperados conforme esperado.  </p>"},{"location":"aulas/05-TDD/0-tdd/#quando-usar_1","title":"Quando usar?","text":"<ul> <li>Quando h\u00e1 depend\u00eancias entre m\u00f3dulos, como chamadas a um banco de dados ou a servi\u00e7os externos.  </li> <li>Para verificar se APIs e bibliotecas externas est\u00e3o sendo utilizadas corretamente.  </li> <li>Para garantir que componentes do sistema se comunicam sem falhas.  </li> </ul>"},{"location":"aulas/05-TDD/0-tdd/#teste-de-ponta-a-ponta-e2e-end-to-end","title":"\ud83d\udd39 Teste de Ponta a Ponta (E2E \u2013 End-to-End)","text":"<p>O teste de ponta a ponta verifica todo o fluxo da aplica\u00e7\u00e3o, simulando a experi\u00eancia do usu\u00e1rio real. Ele garante que o sistema funciona como um todo, testando desde a interface at\u00e9 o processamento dos dados no backend e a resposta do banco de dados.  </p>"},{"location":"aulas/05-TDD/0-tdd/#cenario-tipico_2","title":"Cen\u00e1rio t\u00edpico:","text":"<p>Em um sistema de e-commerce, um teste E2E validaria o processo completo de compra: um usu\u00e1rio acessa a p\u00e1gina de um produto, adiciona-o ao carrinho, preenche os dados de pagamento, conclui a compra e recebe a confirma\u00e7\u00e3o. O teste garantiria que todas as etapas funcionam corretamente e que o pedido \u00e9 registrado no sistema. Apesar de muito \u00fatil, o teste de ponta a ponta \u00e9 mais lento e fr\u00e1gil do que os testes de unidade e de integra\u00e7\u00e3o, pois envolvem a execu\u00e7\u00e3o de todas as etapas do sistema e mudan\u00e7as na interface do usu\u00e1rio podem quebrar os testes facilmente.</p>"},{"location":"aulas/05-TDD/0-tdd/#quando-usar_2","title":"Quando usar?","text":"<ul> <li>Para garantir que todas as partes do sistema operam corretamente do ponto de vista do usu\u00e1rio.  </li> <li>Para testar fluxos de navega\u00e7\u00e3o e processos cr\u00edticos, como login, compras e pagamentos.  </li> <li>Para validar a integra\u00e7\u00e3o completa entre frontend, backend e banco de dados.  </li> </ul>"},{"location":"aulas/05-TDD/0-tdd/#resumo","title":"\ud83d\udd39 Resumo","text":"Tipo de Teste O que verifica? Exemplo de cen\u00e1rio Vantagens Desvantagens Ferramentas Teste de Unidade Uma fun\u00e7\u00e3o ou m\u00e9todo isolado Validar o c\u00e1lculo de desconto em uma compra R\u00e1pido, f\u00e1cil de rodar e de manter N\u00e3o testa a intera\u00e7\u00e3o com outros m\u00f3dulos pytest, unittest Teste de Integra\u00e7\u00e3o Comunica\u00e7\u00e3o entre m\u00f3dulos do sistema Verificar se um cadastro de usu\u00e1rio \u00e9 salvo corretamente no banco de dados Detecta problemas entre componentes Mais lento e exige mais configura\u00e7\u00e3o pytest + requests, Postman + Newman Teste de Ponta a Ponta (E2E) Fluxo completo da aplica\u00e7\u00e3o Simular um processo de compra, do login ao pagamento Testa o sistema como um usu\u00e1rio real Lento e pode quebrar facilmente Selenium <p>Cada tipo de teste tem seu papel dentro do processo de desenvolvimento. Us\u00e1-los em conjunto ajuda a garantir que o sistema seja confi\u00e1vel, desde a menor fun\u00e7\u00e3o at\u00e9 o fluxo completo do usu\u00e1rio. \ud83d\ude80</p> <p>E como aplicamos TDD na pr\u00e1tica? Vamos ver em detalhes no pr\u00f3ximo conte\u00fado!</p>"},{"location":"aulas/05-TDD/1-pytest/","title":"Introdu\u00e7\u00e3o ao pytest","text":"<p>O pytest \u00e9 um dos frameworks de teste mais populares para Python. Ele \u00e9 simples de usar, mas poderoso o suficiente para escrever testes complexos. Com pytest, voc\u00ea pode testar fun\u00e7\u00f5es, classes e at\u00e9 mesmo aplica\u00e7\u00f5es inteiras com facilidade.  </p>"},{"location":"aulas/05-TDD/1-pytest/#o-que-e-pytest","title":"O que \u00e9 pytest?","text":"<p>O pytest \u00e9 um framework que facilita a escrita e execu\u00e7\u00e3o de testes automatizados em Python. Ele \u00e9 mais intuitivo do que o m\u00f3dulo padr\u00e3o <code>unittest</code>, permitindo que voc\u00ea escreva testes com menos c\u00f3digo e mais clareza.  </p>"},{"location":"aulas/05-TDD/1-pytest/#como-instalar-o-pytest","title":"Como instalar o pytest","text":"<p>Para come\u00e7ar a usar o <code>pytest</code>, primeiro voc\u00ea precisa instal\u00e1-lo. Dentro do ambiente virtual, basta rodar:  </p> <pre><code>pip install pytest\n</code></pre> <p>Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode verificar se o <code>pytest</code> est\u00e1 dispon\u00edvel com:  </p> <pre><code>pytest --version\n</code></pre>"},{"location":"aulas/05-TDD/1-pytest/#como-escrever-um-teste-basico","title":"Como escrever um teste b\u00e1sico","text":"<p>Os testes no <code>pytest</code> s\u00e3o escritos como fun\u00e7\u00f5es normais e utilizam assertivas (<code>assert</code>) para verificar se os resultados s\u00e3o os esperados.  </p>"},{"location":"aulas/05-TDD/1-pytest/#exemplo-de-um-teste-simples","title":"\ud83d\udccc Exemplo de um teste simples","text":"<p>Crie um arquivo chamado <code>test_math.py</code> e adicione o seguinte c\u00f3digo:  </p> <pre><code>def soma(a, b):\n    return a + b\n\ndef test_soma():\n    assert soma(2, 3) == 5\n    assert soma(-1, 1) == 0\n    assert soma(0, 0) == 0\n</code></pre> <p>Aqui, estamos testando se a fun\u00e7\u00e3o <code>soma(a, b)</code> retorna os valores corretos para diferentes entradas.  </p>"},{"location":"aulas/05-TDD/1-pytest/#como-rodar-os-testes","title":"Como rodar os testes","text":"<p>Para executar os testes, basta rodar o seguinte comando no terminal:  </p> <pre><code>pytest\n</code></pre> <p>Se tudo estiver correto, voc\u00ea ver\u00e1 uma sa\u00edda semelhante a:  </p> <pre><code>============================= test session starts =============================\ncollected 1 item                                                               \n\ntest_math.py .                                                       [100%]\n\n============================== 1 passed in 0.01s ==============================\n</code></pre> <p>Mas como o <code>pytest</code> sabe que o arquivo <code>test_math.py</code> cont\u00e9m testes? Ele segue uma conven\u00e7\u00e3o de nomenclatura: os arquivos de teste devem come\u00e7ar com <code>test_</code> ou terminar com <code>_test</code>. Por causa disso, n\u00e3o \u00e9 comum que tenhamos testes e o c\u00f3digo principal no mesmo arquivo.</p> <p>O mais usual seria ter um arquivo <code>math.py</code> com a implementa\u00e7\u00e3o da fun\u00e7\u00e3o <code>soma</code> e um arquivo <code>test_math.py</code> com os testes.</p>"},{"location":"aulas/05-TDD/1-pytest/#red-green-refactor","title":"Red-Green-Refactor","text":"<p>Para exemplificar o fluxo Red-Green-Refactor com <code>pytest</code>, vamos criar testes para uma fun\u00e7\u00e3o chamada <code>calcula_media</code>. Essa fun\u00e7\u00e3o deve receber uma lista de inteiros e retornar a m\u00e9dia dos valores na lista. Primeiramente, crie os arquivos necess\u00e1rios:</p> <ol> <li>Crie um arquivo <code>funcoes.py</code>.</li> <li>Crie um arquivo chamado <code>test_funcoes.py</code>.</li> </ol>"},{"location":"aulas/05-TDD/1-pytest/#ciclo-1-criar-a-funcao-de-media","title":"\ud83d\udd39 Ciclo 1 - Criar a fun\u00e7\u00e3o de m\u00e9dia","text":""},{"location":"aulas/05-TDD/1-pytest/#1-red-escrevemos-um-teste-que-falha","title":"1\ufe0f\u20e3 Red (Escrevemos um teste que falha)","text":"<p>Antes de criar a fun\u00e7\u00e3o, escrevemos um teste no arquivo <code>test_funcoes.py</code> para garantir que a m\u00e9dia de <code>[2, 4, 6]</code> seja <code>4.0</code>:</p> <pre><code>from funcoes import calcula_media\ndef test_calcula_media():\n    assert calcula_media([2, 4, 6]) == 4.0\n</code></pre> <p>\ud83d\udea8 O teste falha porque <code>calcula_media</code> ainda n\u00e3o existe.</p>"},{"location":"aulas/05-TDD/1-pytest/#2-green-fazemos-o-teste-passar-com-o-codigo-mais-simples-possivel","title":"2\ufe0f\u20e3 Green (Fazemos o teste passar com o c\u00f3digo mais simples poss\u00edvel)","text":"<p>Agora criamos a fun\u00e7\u00e3o mais simples poss\u00edvel no arquivo <code>funcoes.py</code> para passar no teste:</p> <pre><code>def calcula_media(lista):\n    total = 0\n    for num in lista:\n        total += num\n    return total / len(lista)\n</code></pre> <p>\u2705 Agora o teste passa!</p>"},{"location":"aulas/05-TDD/1-pytest/#3-refactor-melhoramos-o-codigo-se-necessario","title":"3\ufe0f\u20e3 Refactor (Melhoramos o c\u00f3digo, se necess\u00e1rio)","text":"<p>Agora que sa\u00edmos de DevLife, podemos utilizar as fun\u00e7\u00f5es prontas do Python para simplificar o c\u00f3digo:</p> <pre><code>def calcula_media(lista):\n    return sum(lista) / len(lista)\n</code></pre>"},{"location":"aulas/05-TDD/1-pytest/#ciclo-2-lidar-com-listas-vazias","title":"\ud83d\udd39 Ciclo 2 - Lidar com listas vazias","text":"<p>Agora, queremos melhorar a fun\u00e7\u00e3o para que n\u00e3o quebre caso receba uma lista vazia.</p>"},{"location":"aulas/05-TDD/1-pytest/#1-red-escrevemos-um-novo-teste-que-falha","title":"1\ufe0f\u20e3 Red (Escrevemos um novo teste que falha)","text":"<p>Adicionamos um novo caso de teste para listas vazias:</p> <pre><code>def test_calcula_media_lista_vazia():\n    assert calcula_media([]) == 0  # Esperamos que a m\u00e9dia de uma lista vazia seja 0\n</code></pre> <p>\ud83d\udea8 O teste falha! O c\u00f3digo atual gera um erro de divis\u00e3o por zero.</p>"},{"location":"aulas/05-TDD/1-pytest/#2-green-fazemos-o-teste-passar-com-a-solucao-mais-simples-possivel","title":"2\ufe0f\u20e3 Green (Fazemos o teste passar com a solu\u00e7\u00e3o mais simples poss\u00edvel)","text":"<p>Agora, alteramos a fun\u00e7\u00e3o para tratar listas vazias:</p> <pre><code>def calcula_media(lista):\n    if lista == []:\n        return 0\n    else:\n        return sum(lista) / len(lista)\n</code></pre> <p>\u2705 Agora o teste passa!</p>"},{"location":"aulas/05-TDD/1-pytest/#3-refactor-melhoramos-a-implementacao","title":"3\ufe0f\u20e3 Refactor (Melhoramos a implementa\u00e7\u00e3o)","text":"<p>A fun\u00e7\u00e3o funciona, mas podemos utilizar t\u00e9cnicas mais avan\u00e7adas para simplificar o c\u00f3digo:</p> <pre><code>def calcula_media(lista):\n    return 0 if lista == [] else sum(lista) / len(lista)\n</code></pre>"},{"location":"aulas/05-TDD/1-pytest/#resumo-do-processo","title":"\ud83d\udd39 Resumo do Processo","text":"<p>\ud83d\udd34 Red \u2013 Criamos um teste antes da implementa\u00e7\u00e3o e verificamos que ele falha. \ud83d\udfe2 Green \u2013 Implementamos o c\u00f3digo mais simples poss\u00edvel para fazer o teste passar. \ud83d\udee0\ufe0f Refactor \u2013 Melhoramos o c\u00f3digo sem alterar o comportamento esperado.  </p> <p>E qual \u00e9 a melhor maneira de estruturarmos os testes? Vamos ver isso a seguir!</p>"},{"location":"aulas/05-TDD/2-boaspraticas/","title":"Boas pr\u00e1ticas","text":"<p>Uma maneira eficaz de garantir a qualidade dos testes \u00e9 seguir a metodologia Given-When-Then (Dado-Quando-Ent\u00e3o). Ela ajuda a estruturar os testes de forma clara e objetiva, facilitando a compreens\u00e3o e manuten\u00e7\u00e3o do c\u00f3digo. Voc\u00ea pode ler mais sobre esse padr\u00e3o aqui.</p>"},{"location":"aulas/05-TDD/2-boaspraticas/#padrao-given-when-then","title":"\ud83d\udcdd Padr\u00e3o Given-When-Then","text":"<ol> <li> <p>Dado um cen\u00e1rio espec\u00edfico</p> <ul> <li>Inicialize os dados necess\u00e1rios para o teste.</li> </ul> </li> <li> <p>Quando uma a\u00e7\u00e3o \u00e9 executada</p> </li> <li> <p>Ent\u00e3o um resultado \u00e9 esperado</p> <ul> <li>Verifique se o resultado da a\u00e7\u00e3o corresponde ao esperado.</li> </ul> </li> </ol>"},{"location":"aulas/05-TDD/2-boaspraticas/#exemplo-de-teste-com-given-when-then","title":"\ud83d\udccc Exemplo de teste com Given-When-Then","text":"<p>Utilizando esse padr\u00e3o, podemos reescrever o teste da fun\u00e7\u00e3o <code>calcula_media</code> de uma maneira mais estruturada, isolando o que \u00e9 dado, a execu\u00e7\u00e3o da fun\u00e7\u00e3o e o resultado esperado:</p> <pre><code>def test_calcula_media():\n    # Given\n    lista = [2, 4, 6]\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == 4\n</code></pre> <p>A primeira vista, pode parecer que essa abordagem torna o c\u00f3digo mais verboso, mas ela traz benef\u00edcios significativos em termos de organiza\u00e7\u00e3o e legibilidade, principalmente conforme os testes forem ficando mais complexos. Al\u00e9m disso, facilita a identifica\u00e7\u00e3o de poss\u00edveis falhas e a manuten\u00e7\u00e3o dos testes no futuro.</p>"},{"location":"aulas/05-TDD/2-boaspraticas/#nomes-dos-testes","title":"\ud83d\udcdd Nomes dos testes","text":"<p>Outro ponto importante \u00e9 a nomenclatura dos testes. \u00c9 recomendado seguir um padr\u00e3o que descreva claramente o comportamento testado, como no exemplo acima (<code>test_calcula_media</code>). Isso ajuda a identificar rapidamente o prop\u00f3sito de cada teste e a localizar poss\u00edveis problemas. Poder\u00edamos at\u00e9 mesmo ser mais espec\u00edficos, como <code>test_calcula_media_lista_com_tres_elementos_positivos</code>.</p>"},{"location":"aulas/05-TDD/2-boaspraticas/#repeticao","title":"\ud83d\udcddRepeti\u00e7\u00e3o","text":"<p>Como vimos em DevLife, sabemos que para realmente saber se uma fun\u00e7\u00e3o est\u00e1 correta, precisamos test\u00e1-la em diferentes cen\u00e1rios. Portanto, \u00e9 importante criar testes que cubram v\u00e1rios casos poss\u00edveis, incluindo casos extremos e limites. Isso garante que a fun\u00e7\u00e3o se comporte corretamente em todas as situa\u00e7\u00f5es.</p> <p>Vamos pensar agora qual a melhor maneira de testar nossa fun\u00e7\u00e3o com outras listas. Uma possibilidade seria adicionar v\u00e1rios blocos Given-When-Then no nosso teste:</p> <pre><code>def test_calcula_media():\n    # Given\n    lista = [2, 4, 6]\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == 4\n\n    # Given\n    lista = [1, 2, 3]\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == 2\n</code></pre> <p>No entanto, essa abordagem pode se tornar repetitiva e dif\u00edcil de manter conforme adicionamos mais casos de teste, al\u00e9m de n\u00e3o ser muito leg\u00edvel. Uma segunda possibilidade seria utilizar um teste para cada cen\u00e1rio, o que pode ser mais organizado:</p> <pre><code>def test_calcula_media_lista_com_tres_elementos_positivos():\n    # Given\n    lista = [2, 4, 6]\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == 4\n\ndef test_calcula_media_lista_com_tres_elementos_crescentes():\n    # Given\n    lista = [1, 2, 3]\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == 2\n</code></pre> <p>Essa abordagem \u00e9 mais clara e facilita a identifica\u00e7\u00e3o de falhas em cen\u00e1rios espec\u00edficos. No entanto, pode gerar uma grande quantidade de testes, o que pode ser dif\u00edcil de gerenciar. \u00c9 por esse motivo, que o pytest oferece uma maneira mais eficiente de lidar com esses casos, chamada de testes parametrizados.</p>"},{"location":"aulas/05-TDD/2-boaspraticas/#testes-parametrizados","title":"\ud83d\udccc Testes parametrizados","text":"<p>Os testes parametrizados permitem que voc\u00ea execute o mesmo teste com diferentes conjuntos de dados, evitando a repeti\u00e7\u00e3o de c\u00f3digo e facilitando a manuten\u00e7\u00e3o. Vamos ver como isso funciona:</p> <pre><code>import pytest\n\n@pytest.mark.parametrize(\"lista, esperado\", [\n    ([2, 4, 6], 4),\n    ([1, 2, 3], 2), \n])\ndef test_calcula_media_lista_com_tres_elementos_positivos(lista, esperado):\n    # Given\n    # Nesse caso, o \"Given\" \u00e9 passado como par\u00e2metro\n    # When\n    resultado = calcula_media(lista)\n    # Then\n    assert resultado == esperado\n</code></pre> <p>Nesse exemplo, utilizamos o <code>@pytest.mark.parametrize</code> para definir diferentes conjuntos de dados e resultados esperados. A fun\u00e7\u00e3o de teste ser\u00e1 executada para cada combina\u00e7\u00e3o, verificando se a fun\u00e7\u00e3o <code>calcula_media</code> se comporta corretamente em todos os cen\u00e1rios.</p> <p>Se estiver gostando do assunto, voc\u00ea pode ler um pouquinho mais sobre boas pr\u00e1ticas de testes aqui.</p> <p>A seguir, vamos ver como lidar com exce\u00e7\u00f5es.</p>"},{"location":"aulas/05-TDD/3-exceptions/","title":"Lidando com exce\u00e7\u00f5es","text":"<p>Em Python, exce\u00e7\u00f5es s\u00e3o erros que ocorrem durante a execu\u00e7\u00e3o de um programa. Elas podem ser causadas por diversos motivos, como divis\u00e3o por zero, acesso a \u00edndices inv\u00e1lidos em listas ou dicion\u00e1rios, entre outros. Quando uma exce\u00e7\u00e3o \u00e9 lan\u00e7ada, o programa interrompe sua execu\u00e7\u00e3o e tenta encontrar um bloco de c\u00f3digo que a trate.</p>"},{"location":"aulas/05-TDD/3-exceptions/#gerando-excecoes","title":"Gerando exce\u00e7\u00f5es","text":"<p>Execute o c\u00f3digo abaixo e veja qual a exce\u00e7\u00e3o gerada:</p> <pre><code>lista = [1, 2, 3]\nprint(lista[3])\n</code></pre> <p>Executar esse c\u00f3digo deve fazer aparecer a seguinte mensagem no terminal:</p> <pre><code>IndexError: list index out of range\n</code></pre> <p>A exce\u00e7\u00e3o <code>IndexError</code> \u00e9 lan\u00e7ada quando tentamos acessar um \u00edndice inexistente em uma lista. Acredito que j\u00e1 tenham visto essa exce\u00e7\u00e3o antes, n\u00e3o \u00e9 mesmo? Al\u00e9m da exce\u00e7\u00e3o, o Python tamb\u00e9m exibe uma mensagem de erro que nos ajuda a entender o que aconteceu. Nesse caso, a mensagem diz que o \u00edndice est\u00e1 fora do alcance da lista.</p> <p>Da mesma maneira que o Python exibe mensagens de erro, n\u00f3s tamb\u00e9m podemos gerar nossas pr\u00f3prias exce\u00e7\u00f5es. Isso \u00e9 \u00fatil quando queremos sinalizar que algo deu errado em nosso c\u00f3digo. Por exemplo, podemos criar uma exce\u00e7\u00e3o personalizada para indicar que um valor inv\u00e1lido foi passado para uma fun\u00e7\u00e3o:</p> <pre><code>def divide(a, b):\n    if b == 0:\n        raise Exception(\"Divis\u00e3o por zero!\")\n    return a / b\n</code></pre> <p>Chamar essa fun\u00e7\u00e3o com <code>divide(10, 0)</code> resultar\u00e1 na seguinte exce\u00e7\u00e3o:</p> <pre><code>Exception: Divis\u00e3o por zero!\n</code></pre>"},{"location":"aulas/05-TDD/3-exceptions/#testando-excecoes","title":"Testando exce\u00e7\u00f5es","text":"<p>Se queremos que nossa fun\u00e7\u00e3o lance uma exce\u00e7\u00e3o em determinadas situa\u00e7\u00f5es, precisamos testar se ela realmente faz isso. Para isso, podemos usar o m\u00e9todo <code>pytest.raises()</code> do Pytest. Esse m\u00e9todo verifica se uma exce\u00e7\u00e3o espec\u00edfica \u00e9 lan\u00e7ada durante a execu\u00e7\u00e3o de um bloco de c\u00f3digo.</p> <p>Vamos criar um teste para a fun\u00e7\u00e3o <code>divide()</code> que verifica se ela lan\u00e7a uma exce\u00e7\u00e3o <code>Exception</code> quando tentamos dividir por zero:</p> <pre><code>import pytest\n\ndef test_divide_por_zero_gera_exception():\n    with pytest.raises(Exception):\n        # Given\n        a = 10\n        b = 0\n        # When\n        solucao = divide(a, b)\n        # Then\n        #aqui n\u00e3o \u00e9 necess\u00e1rio fazer nada, pois o teste passa se a exce\u00e7\u00e3o for lan\u00e7ada\n</code></pre> <p>Nesse teste, utilizamos o bloco <code>with pytest.raises(Exception):</code> para verificar se a fun\u00e7\u00e3o <code>divide()</code> lan\u00e7a uma exce\u00e7\u00e3o do tipo <code>Exception</code>. Se a exce\u00e7\u00e3o for lan\u00e7ada, o teste passa. Caso contr\u00e1rio, ele falha.</p>"},{"location":"aulas/05-TDD/3-exceptions/#se-recuperando-de-excecoes","title":"Se recuperando de exce\u00e7\u00f5es","text":"<p>At\u00e9 hoje, toda vez que uma exce\u00e7\u00e3o era lan\u00e7ada, o programa parava de executar. Isso acaba sendo um grande problema quando um usu\u00e1rio est\u00e1 usando seu programa. Geralmente queremos evitar que o usu\u00e1rio perca o que est\u00e1 fazendo por conta de um problema isolado em alguma fun\u00e7\u00e3o.</p> <p>Para isso, podemos usar o bloco <code>try</code>/<code>except</code> para capturar exce\u00e7\u00f5es e tratar erros de forma mais elegante. Veja o exemplo abaixo:</p> <pre><code>def divide(a, b):\n    if b == 0:\n        raise Exception(\"Divis\u00e3o por zero!\")\n    return a / b \n\na = int(input(\"Digite um n\u00famero\"))\nb = int(input(\"Digite outro n\u00famero\"))\n\nwhile True:\n    try:\n        resultado = divide(a,b)\n        print(f\"O resultado da divis\u00e3o \u00e9 {resultado}\")\n    except Exception as e:\n        print(f\"Ocorreu um erro: {e}\")\n</code></pre> <p>Neste momento voc\u00ea pode estar pensando: \"Eu n\u00e3o poderia simplesmente colocar um if antes de chamar a fun\u00e7\u00e3o?\". A resposta seria Sim!, um if resolveria o problema nesse cen\u00e1rio. Geralmente queremos usar o bloco <code>try</code>/<code>except</code> quando existem muitos cen\u00e1rios poss\u00edveis que v\u00e3o gerar erros e n\u00e3o queremos ou n\u00e3o podemos prever todos eles.</p> <p>Agora que estamos pegando o jeito, vamos para os t\u00f3picos mais avan\u00e7ados.</p>"},{"location":"aulas/05-TDD/4-fixtures/","title":"Entendendo e Usando Fixtures no pytest","text":""},{"location":"aulas/05-TDD/4-fixtures/#o-que-sao-fixtures-e-por-que-usa-las","title":"\ud83d\udccc O que s\u00e3o Fixtures e por que us\u00e1-las?","text":"<p>Quando escrevemos testes, frequentemente precisamos preparar um ambiente de teste antes de rod\u00e1-los. Isso pode envolver a cria\u00e7\u00e3o de objetos, a configura\u00e7\u00e3o de vari\u00e1veis ou a inicializa\u00e7\u00e3o de servi\u00e7os.  </p> <p>Podemos fazer isso dentro de cada teste, mas isso gera c\u00f3digo repetitivo. Para evitar essa repeti\u00e7\u00e3o e tornar os testes mais organizados, usamos Fixtures no <code>pytest</code>.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#o-que-e-uma-fixture","title":"\ud83d\udd39 O que \u00e9 uma Fixture?","text":"<p>No <code>pytest</code>, uma Fixture \u00e9 uma fun\u00e7\u00e3o especial que: - Configura um ambiente de teste antes do teste rodar. - Fornece dados ou objetos necess\u00e1rios para o teste. - Pode incluir c\u00f3digo de limpeza (teardown) para rodar ap\u00f3s o teste.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#vantagens-das-fixtures","title":"Vantagens das Fixtures:","text":"<p>\u2705 Evita repeti\u00e7\u00e3o de c\u00f3digo entre testes. \u2705 Facilita a manuten\u00e7\u00e3o, pois todas as configura\u00e7\u00f5es ficam centralizadas. \u2705 Torna os testes mais organizados e modulares. \u2705 Pode ser configurada para rodar automaticamente em v\u00e1rios testes.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#exemplo-pratico-testando-um-sistema-de-pedidos","title":"\ud83d\udccc Exemplo Pr\u00e1tico: Testando um Sistema de Pedidos","text":""},{"location":"aulas/05-TDD/4-fixtures/#cenario","title":"Cen\u00e1rio:","text":"<p>Temos um sistema que gerencia pedidos de um restaurante. Cada pedido tem um nome do cliente, uma lista de itens e um status (<code>\"pendente\"</code>, <code>\"em preparo\"</code> ou <code>\"entregue\"</code>).  </p> <p>Queremos testar a funcionalidade de: 1. Criar pedidos. 2. Alterar o status do pedido.  </p> <p>Se n\u00e3o usarmos Fixtures, ter\u00edamos que criar objetos de pedido manualmente em cada teste. Isso tornaria o c\u00f3digo repetitivo.  </p> <p>Com Fixtures, podemos criar automaticamente um pedido de teste antes de cada teste rodar.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#passo-1-criando-a-fixture","title":"\ud83d\udd39 Passo 1: Criando a Fixture","text":"<p>Aqui, criamos uma Fixture chamada <code>pedido_teste</code> que retorna um pedido pronto para ser usado nos testes.</p> <p>No arquivo <code>pedidos.py</code>, temos a classe <code>Pedido</code> que representa um pedido do restaurante: <pre><code>class Pedido:\n    def __init__(self, cliente, itens):\n        self.cliente = cliente\n        self.itens = itens\n        self.status = \"pendente\"\n\n    def atualizar_status(self, novo_status):\n        self.status = novo_status\n</code></pre></p> <p>Agora, vamos criar a Fixture no arquivo <code>test_pedidos.py</code>:</p> <pre><code>import pytest\n\n@pytest.fixture\ndef pedido_teste():\n    \"\"\"Cria um pedido de teste antes de cada teste rodar.\"\"\"\n    return Pedido(cliente=\"Jo\u00e3o\", itens=[\"Pizza\", \"Suco\"])\n</code></pre>"},{"location":"aulas/05-TDD/4-fixtures/#o-que-acontece-aqui","title":"O que acontece aqui?","text":"<p>\ud83d\udd39 Criamos a classe <code>Pedido</code>, que cont\u00e9m um cliente, itens e um status inicial como <code>\"pendente\"</code>. \ud83d\udd39 Criamos uma Fixture chamada <code>pedido_teste</code>, que retorna um pedido pronto para ser usado nos testes. \ud83d\udd39 Como essa Fixture ser\u00e1 chamada antes de cada teste, evitamos repeti\u00e7\u00e3o de c\u00f3digo nos testes.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#passo-2-usando-a-fixture-nos-testes","title":"\ud83d\udd39 Passo 2: Usando a Fixture nos Testes","text":"<p>Agora podemos usar <code>pedido_teste</code> simplesmente passando-a como argumento nas fun\u00e7\u00f5es de teste.</p> <pre><code>def test_criacao_pedido(pedido_teste):\n    \"\"\"Testa se um pedido \u00e9 criado corretamente.\"\"\"\n    assert pedido_teste.cliente == \"Jo\u00e3o\"\n    assert pedido_teste.itens == [\"Pizza\", \"Suco\"]\n    assert pedido_teste.status == \"pendente\"\n\ndef test_atualizar_status_pedido(pedido_teste):\n    \"\"\"Testa se conseguimos atualizar o status do pedido.\"\"\"\n    pedido_teste.atualizar_status(\"em preparo\")\n    assert pedido_teste.status == \"em preparo\"\n</code></pre>"},{"location":"aulas/05-TDD/4-fixtures/#o-que-acontece-aqui_1","title":"O que acontece aqui?","text":"<p>\u2705 Em <code>test_criacao_pedido</code>, verificamos se o pedido foi criado corretamente. \u2705 Em <code>test_atualizar_status_pedido</code>, testamos se conseguimos mudar o status do pedido corretamente.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#por-que-usar-a-fixture-aqui","title":"Por que usar a Fixture aqui?","text":"<p>Sem a Fixture, precisar\u00edamos criar um novo <code>Pedido</code> em cada teste, assim:  </p> <pre><code>def test_criacao_pedido():\n    pedido = Pedido(cliente=\"Jo\u00e3o\", itens=[\"Pizza\", \"Suco\"])\n    assert pedido.cliente == \"Jo\u00e3o\"\n    assert pedido.itens == [\"Pizza\", \"Suco\"]\n    assert pedido.status == \"pendente\"\n\ndef test_atualizar_status_pedido():\n    pedido = Pedido(cliente=\"Jo\u00e3o\", itens=[\"Pizza\", \"Suco\"])\n    pedido.atualizar_status(\"em preparo\")\n    assert pedido.status == \"em preparo\"\n</code></pre> <p>Isso repetiria o c\u00f3digo de cria\u00e7\u00e3o do pedido em cada teste.  </p> <p>Com a Fixture, garantimos que o objeto de teste sempre existe e est\u00e1 pronto antes dos testes rodarem.  </p>"},{"location":"aulas/05-TDD/4-fixtures/#passo-3-melhorando-a-fixture-com-multiplos-pedidos","title":"\ud83d\udccc Passo 3: Melhorando a Fixture com m\u00faltiplos pedidos","text":"<p>Se quisermos testar diferentes pedidos, podemos modificar a Fixture para receber par\u00e2metros e criar pedidos com diferentes clientes e itens.  </p> <pre><code>@pytest.fixture\ndef pedido_teste(request):\n    \"\"\"Cria um pedido com diferentes valores, dependendo do teste.\"\"\"\n    cliente, itens = request.param\n    return Pedido(cliente=cliente, itens=itens)\n</code></pre> <p>Agora, podemos criar m\u00faltiplos pedidos sem duplicar c\u00f3digo:  </p> <pre><code>import pytest\n\n@pytest.mark.parametrize(\"pedido_teste\", [\n    (\"Jo\u00e3o\", [\"Pizza\", \"Suco\"]),\n    (\"Maria\", [\"Hamb\u00farguer\", \"Refrigerante\"]),\n    (\"Carlos\", [\"Salada\", \"\u00c1gua\"])\n], indirect=True)\ndef test_atualizar_status_pedido(pedido_teste):\n    pedido.atualizar_status(\"em preparo\")\n    assert pedido.status == \"em preparo\"\n</code></pre> <p>Agora testamos v\u00e1rios pedidos diferentes sem precisar criar cada um manualmente! O argumento <code>indirect=True</code> indica que os dados devem ser passados para a Fixture, e n\u00e3o para a fun\u00e7\u00e3o de teste diretamente.</p>"},{"location":"aulas/05-TDD/4-fixtures/#resumo","title":"\ud83d\udd39 Resumo","text":"O que as Fixtures fazem? Vantagens Criam objetos de teste automaticamente antes de cada teste Evita c\u00f3digo repetitivo Permitem configurar e limpar recursos Facilita a manuten\u00e7\u00e3o Melhoram a organiza\u00e7\u00e3o dos testes C\u00f3digo mais limpo e reutiliz\u00e1vel"},{"location":"aulas/05-TDD/4-fixtures/#quando-usar-fixtures","title":"Quando usar Fixtures?","text":"<ul> <li>Quando um mesmo objeto ou configura\u00e7\u00e3o \u00e9 necess\u00e1ria para v\u00e1rios testes.  </li> <li>Quando precisamos configurar um ambiente antes de testar.  </li> <li>Quando queremos manter os testes organizados e f\u00e1ceis de modificar.  </li> </ul> <p>Aqui complicou um pouco, mas n\u00e3o se preocupe! Se precisar, levante, tome uma \u00e1gua e releia o que n\u00e3o ficou claro. Depois de relaxar um pouco, vamos falar um pouco sobre o pr\u00f3ximo conte\u00fado.</p>"},{"location":"aulas/05-TDD/5-mocks/","title":"Entendendo e Usando Mocks no pytest","text":""},{"location":"aulas/05-TDD/5-mocks/#o-que-sao-mocks-e-por-que-usa-los","title":"\ud83d\udccc O que s\u00e3o Mocks e por que us\u00e1-los?","text":"<p>Quando escrevemos testes, \u00e0s vezes precisamos testar c\u00f3digo que depende de recursos externos, como:  </p> <p>\u2705 Chamadas a APIs externas. \u2705 Intera\u00e7\u00f5es com arquivos ou sistemas de terceiros. \u2705 Fun\u00e7\u00f5es que consomem muito tempo ou recursos.  </p> <p>Esses componentes podem ser dif\u00edceis de testar diretamente porque: \u274c S\u00e3o lentos \u2013 Uma API pode demorar segundos para responder. \u274c S\u00e3o imprevis\u00edveis \u2013 Um servi\u00e7o externo pode estar fora do ar. \u274c N\u00e3o queremos modificar dados reais \u2013 Testar algo que pode afetar usu\u00e1rios reais pode ser perigoso.  </p> <p>Para resolver isso, usamos Mocks.  </p>"},{"location":"aulas/05-TDD/5-mocks/#o-que-e-um-mock","title":"\ud83d\udd39 O que \u00e9 um Mock?","text":"<p>Um Mock \u00e9 um objeto falso que simula o comportamento de um objeto real. Ele permite testar c\u00f3digo sem precisar da depend\u00eancia real.  </p> <p>Em Python, podemos usar a biblioteca <code>unittest.mock</code>, que permite criar Mocks para substituir fun\u00e7\u00f5es e objetos reais nos testes.  </p> <p>\u2705 Vantagens dos Mocks: - Testamos apenas o c\u00f3digo que queremos validar, sem depender de APIs, arquivos ou servi\u00e7os externos. - Os testes ficam r\u00e1pidos, pois n\u00e3o precisam esperar por respostas externas. - Podemos simular diferentes cen\u00e1rios, como erros ou respostas inesperadas.  </p>"},{"location":"aulas/05-TDD/5-mocks/#exemplo-inicial-testando-uma-funcao-que-depende-de-outra","title":"\ud83d\udccc Exemplo inicial: Testando uma Fun\u00e7\u00e3o que Depende de Outra","text":""},{"location":"aulas/05-TDD/5-mocks/#cenario","title":"Cen\u00e1rio:","text":"<p>Temos uma fun\u00e7\u00e3o que depende de outra fun\u00e7\u00e3o para funcionar. Queremos testar a primeira fun\u00e7\u00e3o sem chamar a segunda.</p>"},{"location":"aulas/05-TDD/5-mocks/#funcao-principal","title":"Fun\u00e7\u00e3o Principal:","text":"<pre><code>def funcao_secundaria(valor):\n    \"\"\"Fun\u00e7\u00e3o que a fun\u00e7\u00e3o principal depende.\"\"\"\n    return valor + 10\n\ndef funcao_principal(valor):\n    \"\"\"Depende de outra fun\u00e7\u00e3o para funcionar.\"\"\"\n    resultado = funcao_secundaria(valor)\n    return resultado * 2\n</code></pre>"},{"location":"aulas/05-TDD/5-mocks/#o-problema","title":"O problema:","text":"<p>Quando testamos <code>funcao_principal</code>, ela chama <code>funcao_secundaria</code> de verdade. Se houver um problema em <code>funcao_secundaria</code>, nosso teste falhar\u00e1, mesmo que <code>funcao_principal</code> esteja correta.</p>"},{"location":"aulas/05-TDD/5-mocks/#solucao-usar-um-mock-para-funcao_secundaria","title":"Solu\u00e7\u00e3o: Usar um Mock para <code>funcao_secundaria</code>","text":"<pre><code>from unittest.mock import patch\n\ndef test_funcao_principal():\n    \"\"\"Testa a fun\u00e7\u00e3o principal sem chamar a secund\u00e1ria.\"\"\"\n\n    # Criamos um Mock para funcao_secundaria\n    with patch(\"__main__.funcao_secundaria\") as mock_secundaria:\n        # Definimos um comportamento falso para o mock\n        mock_secundaria.return_value = 20\n\n        # Agora, quando chamarmos a fun\u00e7\u00e3o principal, ela usar\u00e1 o Mock em vez da real\n        resultado = funcao_principal(10)\n\n        assert resultado == 40\n</code></pre>"},{"location":"aulas/05-TDD/5-mocks/#explicando-o-codigo-do-mock","title":"Explicando o C\u00f3digo do Mock","text":"<ol> <li><code>patch(\"__main__.funcao_secundaria\")</code> \u2192 Substitui temporariamente <code>funcao_secundaria</code> por um Mock.</li> <li><code>mock_secundaria.return_value = 20</code> \u2192 Simula o retorno da fun\u00e7\u00e3o secund\u00e1ria.</li> <li>Chamamos <code>funcao_principal(10)</code>, mas agora a fun\u00e7\u00e3o secund\u00e1ria n\u00e3o \u00e9 chamada de verdade.</li> <li>O teste verifica se a fun\u00e7\u00e3o retorna <code>40</code> como esperado.</li> </ol> <p>Fa\u00e7a um teste mudando a fun\u00e7\u00e3o <code>funcao_secundaria</code> para retornar outra coisa e veja se o teste continua funcionando.</p>"},{"location":"aulas/05-TDD/5-mocks/#exemplo-pratico-testando-uma-funcao-que-faz-requisicoes-http","title":"\ud83d\udccc Exemplo Pr\u00e1tico: Testando uma Fun\u00e7\u00e3o que Faz Requisi\u00e7\u00f5es HTTP","text":""},{"location":"aulas/05-TDD/5-mocks/#cenario_1","title":"Cen\u00e1rio:","text":"<p>Temos uma fun\u00e7\u00e3o que obt\u00e9m a previs\u00e3o do tempo de uma API externa. Queremos test\u00e1-la sem realmente chamar a API.  </p> <p>Se n\u00e3o usarmos Mocks, cada vez que rodarmos o teste, ele chamar\u00e1 a API de verdade, o que pode ser: \u274c Lento (depende da resposta da API). \u274c Inst\u00e1vel (a API pode estar fora do ar). \u274c Caro (se a API for paga).  </p> <p>Com Mocks, podemos substituir a chamada real por uma resposta simulada, garantindo que o teste sempre rode r\u00e1pido e previs\u00edvel.  </p>"},{"location":"aulas/05-TDD/5-mocks/#passo-1-criando-a-funcao-que-depende-da-api","title":"\ud83d\udd39 Passo 1: Criando a Fun\u00e7\u00e3o que Depende da API","text":"<p>Esta fun\u00e7\u00e3o faz uma requisi\u00e7\u00e3o a uma API externa para obter a previs\u00e3o do tempo.  </p> <pre><code>import requests\n\ndef obter_previsao_tempo(cidade):\n    \"\"\"Consulta uma API externa para obter a previs\u00e3o do tempo.\"\"\"\n    url = f\"https://api.previsao-tempo.com/{cidade}\"\n    resposta = requests.get(url)\n\n    if resposta.status_code == 200:\n        return resposta.json()[\"previsao\"]\n    else:\n        return \"Erro ao obter previs\u00e3o\"\n</code></pre>"},{"location":"aulas/05-TDD/5-mocks/#o-problema_1","title":"O problema:","text":"<p>Quando testamos essa fun\u00e7\u00e3o, ela faz uma requisi\u00e7\u00e3o real para a API. Queremos test\u00e1-la sem depender da API externa.  </p>"},{"location":"aulas/05-TDD/5-mocks/#passo-2-criando-um-mock-para-a-requisicao","title":"\ud83d\udd39 Passo 2: Criando um Mock para a Requisi\u00e7\u00e3o","text":"<p>Usamos Mocks para substituir <code>requests.get()</code> por uma vers\u00e3o falsa que retorna sempre a mesma resposta.  </p> <pre><code>from unittest.mock import patch\n\ndef test_obter_previsao_tempo():\n    \"\"\"Testa a fun\u00e7\u00e3o sem chamar a API de verdade.\"\"\"\n\n    # Criamos um Mock para requests.get\n    with patch(\"requests.get\") as mock_get:\n        # Definimos um comportamento falso para o mock\n        mock_get.return_value.status_code = 200\n        mock_get.return_value.json.return_value = {\"previsao\": \"Ensolarado\"}\n\n        # Agora, quando chamarmos a fun\u00e7\u00e3o, ela usar\u00e1 o Mock em vez da API real\n        resultado = obter_previsao_tempo(\"S\u00e3o Paulo\")\n\n        assert resultado == \"Ensolarado\"\n</code></pre>"},{"location":"aulas/05-TDD/5-mocks/#explicando-o-codigo-do-mock_1","title":"\ud83d\udd39 Explicando o C\u00f3digo do Mock","text":""},{"location":"aulas/05-TDD/5-mocks/#o-que-o-mock-esta-fazendo","title":"\ud83d\udee0\ufe0f O que o Mock est\u00e1 fazendo?","text":"<ol> <li><code>patch(\"requests.get\")</code> \u2192 Substitui temporariamente <code>requests.get</code> por um Mock.  </li> <li><code>mock_get.return_value.status_code = 200</code> \u2192 Simula uma resposta bem-sucedida da API.  </li> <li><code>mock_get.return_value.json.return_value = {\"previsao\": \"Ensolarado\"}</code> \u2192 Simula o JSON retornado pela API.  </li> <li>Chamamos <code>obter_previsao_tempo(\"S\u00e3o Paulo\")</code>, mas agora a API n\u00e3o \u00e9 chamada de verdade.  </li> <li>O teste verifica se a fun\u00e7\u00e3o retorna <code>\"Ensolarado\"</code> como esperado. </li> </ol>"},{"location":"aulas/05-TDD/5-mocks/#testando-um-erro-da-api","title":"\ud83d\udd39 Testando um Erro da API","text":"<p>Podemos testar diferentes cen\u00e1rios, como a API retornando erro:  </p> <pre><code>def test_obter_previsao_tempo_erro():\n    \"\"\"Testa o que acontece se a API falhar.\"\"\"\n\n    with patch(\"requests.get\") as mock_get:\n        mock_get.return_value.status_code = 500  # Simulamos um erro da API\n\n        resultado = obter_previsao_tempo(\"S\u00e3o Paulo\")\n\n        assert resultado == \"Erro ao obter previs\u00e3o\"\n</code></pre> <p>Agora garantimos que a fun\u00e7\u00e3o lida corretamente com falhas na API.</p>"},{"location":"aulas/05-TDD/5-mocks/#resumo","title":"\ud83d\udccc Resumo","text":"O que os Mocks fazem? Vantagens Substituem fun\u00e7\u00f5es ou objetos reais nos testes Testes mais r\u00e1pidos e previs\u00edveis Simulam diferentes respostas (sucesso, erro, timeout) Testamos cen\u00e1rios dif\u00edceis de simular com c\u00f3digo real Evitam depend\u00eancias externas como APIs ou arquivos Testes independentes de servidores externos"},{"location":"aulas/05-TDD/5-mocks/#quando-usar-mocks","title":"Quando usar Mocks?","text":"<p>\u2705 Quando o c\u00f3digo depende de APIs externas. \u2705 Quando queremos simular erros sem realmente causar falhas. \u2705 Quando precisamos testar c\u00f3digo que depende de outros c\u00f3digos.  </p> <p>Chegamos ent\u00e3o no passo final. Agora que sabemos tudo sobre testes automatizados, vamos aplicar esse conhecimento construindo Testes para APIs Flask.</p>"},{"location":"aulas/05-TDD/6-flask/","title":"Testando APIs Flask com pytest e Mocks","text":"<p>Assim como qualquer outro c\u00f3digo, APIs Flask precisam ser testadas para garantir que funcionem corretamente. No entanto, testar APIs que dependem de um banco de dados real pode ser complicado. Felizmente, j\u00e1 temos todas as ferramentas necess\u00e1rias!</p> <p>Para esse exemplo, vamos considerar a seguinte API Flask:</p> <pre><code>from flask import Flask, request\nimport os\nimport mysql.connector\nfrom mysql.connector import Error\nfrom dotenv import load_dotenv\n\n# Carrega as vari\u00e1veis de ambiente do arquivo .cred (se dispon\u00edvel)\nload_dotenv('.cred')\n\n# Configura\u00e7\u00f5es para conex\u00e3o com o banco de dados usando vari\u00e1veis de ambiente\nconfig = {\n    'host': os.getenv('DB_HOST', 'localhost'),  # Obt\u00e9m o host do banco de dados da vari\u00e1vel de ambiente\n    'user': os.getenv('DB_USER'),  # Obt\u00e9m o usu\u00e1rio do banco de dados da vari\u00e1vel de ambiente\n    'password': os.getenv('DB_PASSWORD'),  # Obt\u00e9m a senha do banco de dados da vari\u00e1vel de ambiente\n    'database': os.getenv('DB_NAME', 'db_escola'),  # Obt\u00e9m o nome do banco de dados da vari\u00e1vel de ambiente\n    'port': int(os.getenv('DB_PORT', 3306)),  # Obt\u00e9m a porta do banco de dados da vari\u00e1vel de ambiente\n    'ssl_ca': os.getenv('SSL_CA_PATH')  # Caminho para o certificado SSL\n}\n\n\n# Fun\u00e7\u00e3o para conectar ao banco de dados\ndef connect_db():\n    \"\"\"Estabelece a conex\u00e3o com o banco de dados usando as configura\u00e7\u00f5es fornecidas.\"\"\"\n    try:\n        # Tenta estabelecer a conex\u00e3o com o banco de dados usando mysql-connector-python\n        conn = mysql.connector.connect(**config)\n        if conn.is_connected():\n            return conn\n    except Error as err:\n        # Em caso de erro, imprime a mensagem de erro\n        print(f\"Erro: {err}\")\n        return None\n\n\napp = Flask(__name__)\n\n\n@app.route('/alunos', methods=['GET'])\ndef get_alunos():\n\n    # conectar com a base de dados\n    conn = connect_db()\n\n    if conn is None:\n        resp = {\"erro\": \"Erro ao conectar ao banco de dados\"}\n        return resp, 500\n\n    # se chegou at\u00e9 aqui, tenho uma conex\u00e3o v\u00e1lida\n    cursor = conn.cursor()\n\n    sql = \"SELECT * from tbl_alunos\"\n    cursor.execute(sql)\n\n    results = cursor.fetchall()\n    if not results:\n        resp = {\"erro\": \"Nenhum aluno encontrado\"}\n        return resp, 404\n    else:\n        alunos = []\n        for aluno in results:\n            aluno_dict = {\n                \"id\": aluno[0],\n                \"nome\": aluno[1],\n                \"email\": aluno[2]\n            }\n            alunos.append(aluno_dict)\n\n        resp = {\"alunos\": alunos}\n        return resp, 200\n\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>Neste exemplo, temos uma API Flask que se conecta a um banco de dados MySQL para obter informa\u00e7\u00f5es sobre alunos. A rota <code>/alunos</code> retorna uma lista de alunos do banco de dados.</p>"},{"location":"aulas/05-TDD/6-flask/#introducao","title":"\ud83d\udccc Introdu\u00e7\u00e3o","text":"<p>Testar APIs Flask \u00e9 essencial para garantir que as rotas funcionam corretamente e retornam as respostas esperadas. No entanto, como essa API depende de um banco de dados MySQL, precisamos garantir que os testes n\u00e3o dependam de um banco real.</p> <p>Para isso, usaremos:</p> <ul> <li>pytest \u2192 para rodar os testes.</li> <li>Flask's test client \u2192 para fazer requisi\u00e7\u00f5es \u00e0 API durante os testes.</li> <li>Mocks (<code>unittest.mock</code>) \u2192 para substituir a conex\u00e3o real com o banco de dados por um objeto simulado.</li> </ul>"},{"location":"aulas/05-TDD/6-flask/#1-configuracao-do-ambiente-de-teste","title":"1\ufe0f\u20e3 Configura\u00e7\u00e3o do Ambiente de Teste","text":"<p>Crie um arquivo de testes chamado <code>test_api.py</code>.</p>"},{"location":"aulas/05-TDD/6-flask/#2-criando-o-teste-para-a-rota-alunos","title":"2\ufe0f\u20e3 Criando o Teste para a Rota <code>/alunos</code>","text":"<p>O objetivo do teste \u00e9:</p> <ul> <li>Simular uma requisi\u00e7\u00e3o GET para <code>/alunos</code>.</li> <li>Garantir que a API retorna os dados esperados.</li> <li>Substituir a conex\u00e3o com o banco de dados por um Mock para que o teste rode sem um banco real.</li> </ul>"},{"location":"aulas/05-TDD/6-flask/#codigo-do-teste","title":"\ud83d\udccc C\u00f3digo do Teste","text":"<pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\nfrom api import app, connect_db  # Importamos a aplica\u00e7\u00e3o Flask e a fun\u00e7\u00e3o de conex\u00e3o\n\n@pytest.fixture\ndef client():\n    \"\"\"Cria um cliente de teste para a API.\"\"\"\n    app.config[\"TESTING\"] = True\n    with app.test_client() as client:\n        yield client\n\n@patch(\"api.connect_db\")  # Substitu\u00edmos a fun\u00e7\u00e3o que conecta ao banco por um Mock\ndef test_get_alunos(mock_connect_db, client):\n    \"\"\"Testa a rota /alunos sem acessar o banco de dados real.\"\"\"\n\n    # Criamos um Mock para a conex\u00e3o e o cursor\n    mock_conn = MagicMock()\n    mock_cursor = MagicMock()\n\n    # Configuramos o Mock para retornar o cursor quando chamarmos conn.cursor()\n    mock_conn.cursor.return_value = mock_cursor\n\n    # Simulamos o retorno do banco de dados\n    mock_cursor.fetchall.return_value = [\n        (1, \"Alice\", \"alice@email.com\"),\n        (2, \"Bob\", \"bob@email.com\"),\n    ]\n\n    # Substitu\u00edmos a fun\u00e7\u00e3o `connect_db` para retornar nosso Mock em vez de uma conex\u00e3o real\n    mock_connect_db.return_value = mock_conn\n\n    # Fazemos a requisi\u00e7\u00e3o para a API\n    response = client.get(\"/alunos\")\n\n    # Verificamos se o c\u00f3digo de status da resposta \u00e9 200 (OK)\n    assert response.status_code == 200\n\n    # Verificamos se os dados retornados est\u00e3o corretos\n    expected_response = {\n        \"alunos\": [\n            {\"id\": 1, \"nome\": \"Alice\", \"email\": \"alice@email.com\"},\n            {\"id\": 2, \"nome\": \"Bob\", \"email\": \"bob@email.com\"},\n        ]\n    }\n    assert response.get_json() == expected_response\n</code></pre>"},{"location":"aulas/05-TDD/6-flask/#3-explicando-o-teste","title":"3\ufe0f\u20e3 Explicando o Teste","text":""},{"location":"aulas/05-TDD/6-flask/#1-criamos-um-cliente-de-teste","title":"\ud83d\udd39 1. Criamos um Cliente de Teste","text":"<p>A fixture <code>client</code> cria um cliente de teste Flask, que nos permite fazer requisi\u00e7\u00f5es \u00e0 API sem precisar rod\u00e1-la de verdade.</p>"},{"location":"aulas/05-TDD/6-flask/#2-usamos-um-mock-para-connect_db","title":"\ud83d\udd39 2. Usamos um Mock para <code>connect_db</code>","text":"<p>A linha: <pre><code>@patch(\"api.connect_db\")\n</code></pre> substitui a fun\u00e7\u00e3o <code>connect_db()</code> por um Mock, impedindo que a API tente conectar ao banco de dados real.</p>"},{"location":"aulas/05-TDD/6-flask/#3-criamos-uma-conexao-e-cursor-falsos","title":"\ud83d\udd39 3. Criamos uma Conex\u00e3o e Cursor Falsos","text":"<p>Usamos Mocks para simular o comportamento do banco: <pre><code>mock_conn = MagicMock()\nmock_cursor = MagicMock()\nmock_conn.cursor.return_value = mock_cursor\n</code></pre> Isso significa que sempre que a API chamar <code>.cursor()</code>, ela receber\u00e1 nosso Mock em vez de um cursor real.</p>"},{"location":"aulas/05-TDD/6-flask/#4-simulamos-os-dados-retornados-pelo-banco","title":"\ud83d\udd39 4. Simulamos os Dados Retornados pelo Banco","text":"<p><pre><code>mock_cursor.fetchall.return_value = [\n    (1, \"Alice\", \"alice@email.com\"),\n    (2, \"Bob\", \"bob@email.com\"),\n]\n</code></pre> Isso faz com que a API pense que o banco retornou esses valores, permitindo test\u00e1-la sem um banco real.</p>"},{"location":"aulas/05-TDD/6-flask/#5-verificamos-a-resposta-da-api","title":"\ud83d\udd39 5. Verificamos a Resposta da API","text":"<p>Chamamos a rota: <pre><code>response = client.get(\"/alunos\")\n</code></pre> E verificamos se:</p> <ul> <li>O c\u00f3digo de status \u00e9 <code>200 OK</code>.</li> <li>O JSON retornado corresponde aos valores simulados.</li> </ul>"},{"location":"aulas/05-TDD/6-flask/#4-testando-um-caso-de-erro-nenhum-aluno-encontrado","title":"4\ufe0f\u20e3 Testando um Caso de Erro (Nenhum Aluno Encontrado)","text":"<p>Podemos simular um banco de dados vazio para testar se a API retorna corretamente o erro <code>404</code>.</p> <pre><code>@patch(\"api.connect_db\")\ndef test_get_alunos_vazio(mock_connect_db, client):\n    \"\"\"Testa a rota /alunos quando o banco de dados n\u00e3o tem alunos.\"\"\"\n\n    # Criamos um Mock para a conex\u00e3o e o cursor\n    mock_conn = MagicMock()\n    mock_cursor = MagicMock()\n    mock_conn.cursor.return_value = mock_cursor\n\n    # Simulamos que o banco de dados n\u00e3o retorna nenhum aluno\n    mock_cursor.fetchall.return_value = []\n\n    mock_connect_db.return_value = mock_conn\n\n    # Fazemos a requisi\u00e7\u00e3o para a API\n    response = client.get(\"/alunos\")\n\n    # Verificamos se o c\u00f3digo de status da resposta \u00e9 404 (Nenhum aluno encontrado)\n    assert response.status_code == 404\n    assert response.get_json() == {\"erro\": \"Nenhum aluno encontrado\"}\n</code></pre>"},{"location":"aulas/05-TDD/6-flask/#resumo","title":"\ud83d\udccc Resumo","text":"O que fizemos? Por que isso \u00e9 \u00fatil? Criamos um cliente de teste com Flask Permite testar a API sem rod\u00e1-la de verdade Usamos <code>patch(\"api.connect_db\")</code> Evita que os testes se conectem a um banco real Criamos Mocks para a conex\u00e3o e cursor do banco Permite simular diferentes respostas da API Testamos a API em diferentes cen\u00e1rios Garantimos que o c\u00f3digo lida bem com dados normais e erros"},{"location":"aulas/05-TDD/6-flask/#5-executando-os-testes","title":"5\ufe0f\u20e3 Executando os Testes","text":"<p>Agora podemos rodar nossos testes com:</p> <pre><code>pytest test_api.py -v\n</code></pre> <p>Se tudo estiver correto, veremos uma sa\u00edda como:</p> <pre><code>test_api.py::test_get_alunos PASSED\ntest_api.py::test_get_alunos_vazio PASSED\n</code></pre>"},{"location":"aulas/05-TDD/6-flask/#conclusao","title":"\ud83d\udccc Conclus\u00e3o","text":"<p>\u2705 Aprendemos a testar APIs Flask sem precisar de um banco de dados real. \u2705 Usamos Mocks para simular conex\u00f5es com o banco e diferentes cen\u00e1rios. \u2705 Agora temos testes que garantem que a API funciona corretamente! \ud83d\ude80  </p> <p>Isso facilita a manuten\u00e7\u00e3o do c\u00f3digo, garantindo que a API continue funcionando conforme esperado, mesmo com futuras mudan\u00e7as. \ud83d\ude80</p> <p>Agora que voc\u00ea j\u00e1 aprendeu tudo sobre testes autom\u00e1ticos, que tal praticar um pouco mais? Vamos para os Exerc\u00edcios no Prairie Learn!</p>"},{"location":"aulas/06-Deploy/","title":"06 - Deploy na AWS","text":"<p>Vamos subir o jogo da cobrinha na AWS!</p>"},{"location":"aulas/06-Deploy/#configurar-as-chaves-de-acesso-a-aws","title":"Configurar as chaves de acesso a AWS","text":"<p>Fa\u00e7a o download do arquivo .pem enviado por email.</p> <p>Depois, abra um terminal git bash para acessar a m\u00e1quina na AWS via SSH com sua chave pem e IP p\u00fablico:</p> <pre><code>ssh -i \"caminho-para-o-seu-arquivo.pem\" ubuntu@SEU_IP_PUBLICO\n</code></pre> <p></p>"},{"location":"aulas/06-Deploy/#atualize-e-instale-as-dependencias","title":"Atualize e Instale as depend\u00eancias:","text":"<p>Agora, instale os pacotes necess\u00e1rios no servidor:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n\nsudo apt install python3 python3-pip python3-venv git nginx ufw -y\n</code></pre>"},{"location":"aulas/06-Deploy/#configure-o-firewall-ufw","title":"Configure o Firewall (UFW)","text":"<p>Liberamos apenas portas necess\u00e1rias para seguran\u00e7a:</p> <pre><code>sudo ufw allow OpenSSH\nsudo ufw allow 5000  # Para testar o Flask\nsudo ufw allow 'Nginx Full'  # Para a aplica\u00e7\u00e3o rodar na porta 80 depois\nsudo ufw enable\n</code></pre>"},{"location":"aulas/06-Deploy/#clonar-o-codigo-no-servidor","title":"Clonar o C\u00f3digo no Servidor","text":"<p>Agora, vamos trazer o c\u00f3digo para o servidor:</p> <pre><code>git clone https://github.com/mfstabile/cobrinha\ncd cobrinha\n</code></pre>"},{"location":"aulas/06-Deploy/#criar-o-ambiente-virtual-e-instalar-dependencias","title":"\ud83d\udc0d Criar o Ambiente Virtual e Instalar Depend\u00eancias","text":"<p>Agora, configuramos um ambiente virtual Python para evitar conflitos:</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"aulas/06-Deploy/#configurar-o-gunicorn-para-rodar-o-flask","title":"Configurar o Gunicorn para Rodar o Flask","text":"<p>Gunicorn \u00e9 um servidor mais eficiente e seguro do que o Flask padr\u00e3o.</p> <p>Criamos um servi\u00e7o para ele:</p> <pre><code>sudo nano /etc/systemd/system/gunicorn.service\n</code></pre> <p>Coloque o seguinte conte\u00fado no editor:</p> <pre><code>[Unit]\nDescription=Gunicorn instance to serve snake game\nAfter=network.target\n\n[Service]\nUser=ubuntu\nGroup=ubuntu\nWorkingDirectory=/home/ubuntu/cobrinha\nEnvironment=\"PATH=/home/ubuntu/cobrinha/venv/bin\"\nExecStart=/home/ubuntu/cobrinha/venv/bin/gunicorn -w 3 -b 0.0.0.0:5000 backend:app\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Salve (<code>CTRL+X</code>, <code>Y</code>, <code>Enter</code>) e inicie:</p> <pre><code>sudo systemctl start gunicorn\nsudo systemctl enable gunicorn\nsudo systemctl status gunicorn\n</code></pre> <p>Se aparecer <code>active (running)</code>, est\u00e1 funcionando!</p>"},{"location":"aulas/06-Deploy/#configurar-o-nginx-como-proxy-reverso","title":"Configurar o Nginx como Proxy Reverso","text":"<p>Agora, vamos configurar o Nginx para redirecionar a porta <code>80</code> para o Gunicorn.</p> <pre><code>sudo nano /etc/nginx/sites-available/snake_game\n</code></pre> <p>Coloque o seguinte conte\u00fado alterando SEU_IP_PUBLICO pelo IP da sua inst\u00e2ncia:</p> <pre><code>server {\n    listen 80;\n    server_name SEU_IP_PUBLICO;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre> <p>Salve e ative a configura\u00e7\u00e3o:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/snake_game /etc/nginx/sites-enabled\nsudo systemctl restart nginx\n</code></pre> <p>Reinicie a inst\u00e2ncia:</p> <pre><code>sudo reboot\n</code></pre> <p>Espere uns 2 minutos at\u00e9 a inst\u00e2ncia subir novamente e acesse <code>http://SEU_IP_PUBLICO:5000</code> no navegador!</p> <p></p> <p>Voc\u00ea fez o deploy da aplica\u00e7\u00e3o na AWS!</p>"},{"location":"aulas/06-Deploy/#vamos-deixar-o-servidor-seguro","title":"Vamos deixar o Servidor Seguro","text":"<p>acesse novamente a sua inst\u00e2ncia via terminal git bash</p> <pre><code>ssh -i \"caminho-para-o-seu-arquivo.pem\" ubuntu@SEU_IP_PUBLICO\n</code></pre> <p>Desabilite o acesso direto \u00e0 porta 5000</p> <p>Agora que o Nginx est\u00e1 rodando, bloqueamos o acesso direto \u00e0 API Flask:</p> <pre><code>sudo ufw deny 5000\n</code></pre> <p>Ative o firewall</p> <pre><code>sudo ufw enable\n</code></pre> <p>Agora somente a porta 80 (HTTP) e a 22 (SSH) estar\u00e3o abertas, garantindo seguran\u00e7a. Sua aplica\u00e7\u00e3o est\u00e1 dispon\u00edvel em alguns instantes, na porta 80, basta acessar <code>http://SEU_IP_PUBLICO/</code> </p>"},{"location":"aulas/06-Deploy/#parabens-deploy-da-aplicacao-na-aws-finalizada","title":"\ud83d\ude80 Parab\u00e9ns! Deploy da aplica\u00e7\u00e3o na AWS Finalizada","text":""},{"location":"aulas/07-JS/assync/","title":"JavaScript Ass\u00edncrono e Requisi\u00e7\u00f5es HTTP","text":""},{"location":"aulas/07-JS/assync/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>At\u00e9 agora, tanto no Django quanto no Flask, toda vez que clicamos em um bot\u00e3o, a p\u00e1gina inteira \u00e9 recarregada. Isso \u00e9 chamado de comportamento s\u00edncrono, onde uma a\u00e7\u00e3o s\u00f3 \u00e9 executada ap\u00f3s a conclus\u00e3o da anterior. No entanto, em muitos casos, queremos que a p\u00e1gina seja atualizada sem recarregar. Isso acontece quando damos um like em uma postagem do Facebook, por exemplo. </p> <p>A tecnologia que permite isso \u00e9 o JavaScript ass\u00edncrono. Com ele, podemos fazer requisi\u00e7\u00f5es a servidores sem recarregar a p\u00e1gina, atualizar elementos da p\u00e1gina dinamicamente, e muito mais.</p> <p>Para podermos fazer requisi\u00e7\u00f5es a servidores, usamos o Axios, uma biblioteca que facilita o uso de requisi\u00e7\u00f5es HTTP. Neste handout, vamos aprender sobre Promises, async/await, Axios e como us\u00e1-los para fazer requisi\u00e7\u00f5es HTTP. Isso ser\u00e1 \u00fatil para a APS2, onde voc\u00eas v\u00e3o precisar fazer requisi\u00e7\u00f5es a um servidor para resolver exerc\u00edcios e para entender o React, que \u00e9 uma biblioteca JavaScript muito usada para criar interfaces de usu\u00e1rio.</p>"},{"location":"aulas/07-JS/assync/#axios-biblioteca-para-requisicoes","title":"Axios: Biblioteca para Requisi\u00e7\u00f5es","text":"<p>O Axios \u00e9 uma biblioteca para realizar requisi\u00e7\u00f5es HTTP com suporte a Promises e async/await.</p> <p>Para poder executar c\u00f3digo JavaScript pelo terminal \u00e9 necess\u00e1rio instalar o Node.js. Baixe e instale o Noje.js neste link.</p>"},{"location":"aulas/07-JS/assync/#instalando-o-axios","title":"Instalando o Axios:","text":"<pre><code>npm install axios\n</code></pre>"},{"location":"aulas/07-JS/assync/#criando-uma-instancia-do-axios","title":"Criando uma Inst\u00e2ncia do Axios","text":"<p>Podemos criar uma inst\u00e2ncia do Axios para configurar op\u00e7\u00f5es padr\u00f5es. <pre><code>const axios = require(\"axios\");\nconst instance = axios.create({\n  baseURL: \"https://api.exemplo.com\",\n  headers: { \"Content-Type\": \"application/json\" }\n});\n</code></pre></p>"},{"location":"aulas/07-JS/assync/#fazendo-uma-requisicao-get","title":"Fazendo uma Requisi\u00e7\u00e3o GET","text":"<pre><code>async function getData() {\n    try {\n        let response = await instance.get(\"/dados\");\n        console.log(response.data);\n    } catch (error) {\n        console.error(\"Erro na requisi\u00e7\u00e3o:\", error);\n    }\n}\ngetData();\n</code></pre>"},{"location":"aulas/07-JS/assync/#fazendo-uma-requisicao-post","title":"Fazendo uma Requisi\u00e7\u00e3o POST","text":"<pre><code>async function postData() {\n    try {\n        let response = await instance.post(\"/enviar\", { nome: \"Marcio\" });\n        console.log(\"Dados enviados com sucesso:\", response.status);\n    } catch (error) {\n        console.error(\"Erro ao enviar dados:\", error);\n    }\n}\npostData();\n</code></pre>"},{"location":"aulas/07-JS/assync/#promises","title":"Promises","text":"<p>Quando executamos uma linha como a seguir:</p> <pre><code>let response = instance.get(\"/dados\");\n</code></pre> <p>A fun\u00e7\u00e3o <code>instance.get</code> retorna uma Promise, que \u00e9 um objeto que representa o resultado de uma opera\u00e7\u00e3o ass\u00edncrona.</p> <p>Uma Promise representa um valor que pode estar dispon\u00edvel agora, no futuro ou nunca.</p>"},{"location":"aulas/07-JS/assync/#estados-de-uma-promise","title":"Estados de uma Promise:","text":"<ul> <li>Pending (Pendente): A opera\u00e7\u00e3o ainda n\u00e3o foi conclu\u00edda.</li> <li>Fulfilled (Realizada): A opera\u00e7\u00e3o foi bem-sucedida.</li> <li>Rejected (Rejeitada): A opera\u00e7\u00e3o falhou.</li> </ul> <p>Diferentemente do python, onde esperamos que a opera\u00e7\u00e3o seja conclu\u00edda para continuar o c\u00f3digo, quando usamos JavaScript ass\u00edncrono isso n\u00e3o \u00e9 verdade.</p> <p>Se executarmos o seguinte c\u00f3digo:</p> <pre><code>let response = instance.get(\"/dados\");\nconsole.log(response.data);\n</code></pre> <p>Podemos ter comportamentos diferentes dependendo do tempo que a requisi\u00e7\u00e3o demora para ser conclu\u00edda. Se a requisi\u00e7\u00e3o for respondida imediatamente, o c\u00f3digo acima imprime os dados que voltaram do servidor. No entanto, se a requisi\u00e7\u00e3o demorar, o c\u00f3digo acima imprime <code>undefined</code>. Isso acontece porque o que \u00e9 armazenado na veri\u00e1vel <code>response</code> \u00e9 uma Promise, e n\u00e3o o valor retornado pelo servidor. Como lidamos com esse problema ent\u00e3o?</p> <p>Uma possibilidade \u00e9 utilizar o comando <code>await</code>. O comando <code>await</code> pausa a execu\u00e7\u00e3o da fun\u00e7\u00e3o at\u00e9 que a Promise seja resolvida. Veja o exemplo abaixo:</p> <pre><code>let response = await instance.get(\"/dados\");\nconsole.log(response.data);\n</code></pre> <p>Dessa forma, o c\u00f3digo acima imprime os dados que voltaram do servidor, independentemente do tempo que a requisi\u00e7\u00e3o demorar para ser conclu\u00edda.</p> <p>O problema \u00e9 que n\u00e3o temos nenhuma garantia de quanto tempo a requisi\u00e7\u00e3o vai demorar para ser conclu\u00edda. Se a requisi\u00e7\u00e3o demorar muito, o c\u00f3digo acima vai travar a execu\u00e7\u00e3o do programa. \u00c9 como se o Facebook travasse at\u00e9 que o like fosse computado no servidor. Essa n\u00e3o \u00e9 uma boa experi\u00eancia para o usu\u00e1rio.</p> <p>Para resolver esse problema, podemos usar o comando <code>then</code>. O comando <code>then</code> \u00e9 executado quando a Promise \u00e9 resolvida. Veja o exemplo abaixo:</p> <pre><code>instance.get(\"/dados\").then(response =&gt; {\n    console.log(response.data);\n});\n</code></pre> <p>Esse c\u00f3digo apresenta uma novidade para quem n\u00e3o est\u00e1 acostumado com JavaScript. O comando <code>then</code> \u00e9 uma fun\u00e7\u00e3o que recebe outra fun\u00e7\u00e3o como argumento. Essa fun\u00e7\u00e3o \u00e9 chamada de callback. O callback \u00e9 executado quando a Promise \u00e9 resolvida. Olhando por partes, o c\u00f3digo que passamos dento do <code>then</code> \u00e9 o seguinte:</p> <pre><code>response =&gt; {\n    console.log(response.data);\n}\n</code></pre> <p>Esse c\u00f3digo \u00e9 uma fun\u00e7\u00e3o an\u00f4nima (veja que n\u00e3o definimos nome nenhum) que recebe um argumento <code>response</code> e executa o c\u00f3digo que est\u00e1 entre as chaves <code>{}</code>. O c\u00f3digo acima \u00e9 equivalente ao seguinte:</p> <pre><code>function callback(response) {\n    console.log(response.data);\n}\ninstance.get(\"/dados\").then(callback);\n</code></pre> <p>Como a fun\u00e7\u00e3o <code>callback</code> \u00e9 simples e s\u00f3 \u00e9 usada uma vez, \u00e9 comum passar a fun\u00e7\u00e3o diretamente como argumento do <code>then</code>. Essa \u00e9 uma maneira muito mais limpa de escrever o c\u00f3digo. O m\u00e9todo <code>then</code> \u00e9 respons\u00e1vel por receber o valor retornado pela Promise e executar a fun\u00e7\u00e3o de callback passando o valor retornado como par\u00e2metro para a fun\u00e7\u00e3o de callback.</p>"},{"location":"aulas/07-JS/assync/#asyncawait","title":"Async/Await","text":"<p>A palavra-chave async permite definir fun\u00e7\u00f5es ass\u00edncronas, enquanto await pausa a execu\u00e7\u00e3o da fun\u00e7\u00e3o at\u00e9 que uma Promise seja resolvida.</p> <p>Exemplo: <pre><code>async function fetchData() {\n    try {\n        let response = await fetch(\"https://api.exemplo.com/dados\");\n        let data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error(\"Erro na requisi\u00e7\u00e3o:\", error);\n    }\n}\nfetchData();\n</code></pre></p> <p>\u00c9 importante lembrar que a palavra-chave await s\u00f3 pode ser usada dentro de fun\u00e7\u00f5es ass\u00edncronas. Se tentarmos usar await fora de uma fun\u00e7\u00e3o ass\u00edncrona, um erro acontecer\u00e1.</p>"},{"location":"aulas/07-JS/assync/#erros-comuns","title":"Erros Comuns","text":""},{"location":"aulas/07-JS/assync/#1-nao-usar-await-em-chamadas-assincronas","title":"1. N\u00e3o usar <code>await</code> em chamadas ass\u00edncronas","text":"<p>Errado: <pre><code>function getData() {\n    let response = instance.get(\"/dados\");\n    console.log(response.data);\n}\ngetData();\n</code></pre> Correto: <pre><code>async function getData() {\n    let response = await instance.get(\"/dados\");\n    console.log(response.data);\n}\ngetData();\n</code></pre></p>"},{"location":"aulas/07-JS/assync/#2-esquecer-de-tratar-erros-com-trycatch","title":"2. Esquecer de tratar erros com <code>try/catch</code>","text":"<p>Errado: <pre><code>async function getData() {\n    let response = await instance.get(\"/dados\");\n    console.log(response.data);\n}\n</code></pre> Correto: <pre><code>async function getData() {\n    try {\n        let response = await instance.get(\"/dados\");\n        console.log(response.data);\n    } catch (error) {\n        console.error(\"Erro na requisi\u00e7\u00e3o:\", error);\n    }\n}\n</code></pre></p>"},{"location":"aulas/07-JS/assync/#conclusao","title":"Conclus\u00e3o","text":"<ul> <li>Axios \u00e9 uma ferramenta eficiente para realizar requisi\u00e7\u00f5es HTTP.</li> <li>Promises permitem executar c\u00f3digo ass\u00edncrono de forma encadeada.</li> <li>async/await simplifica a escrita de c\u00f3digo ass\u00edncrono.</li> <li>Boas pr\u00e1ticas incluem sempre tratar erros e garantir que await seja usado corretamente.</li> </ul> <p>Agora voc\u00ea j\u00e1 pode resolver a APS2!</p>"},{"location":"aulas/07-JS/intro/","title":"JavaScript","text":"<p>Existem diversos tutoriais/v\u00eddeos/posts muito mais completos sobre JavaScript dispon\u00edveis na internet. O objetivo deste handout \u00e9 oferecer uma breve introdu\u00e7\u00e3o ao JavaScript para aqueles que n\u00e3o estiverem familiarizados com a linguagem. \u00c9 esperado que voc\u00ea seja capaz de se aprofundar na linguagem por conta pr\u00f3pria a partir deste ponto. Para isso, disponibilizamos o servidor de exerc\u00edcios JS para voc\u00ea praticar. Importante: os exerc\u00edcios do servidor s\u00e3o considerados como atividade de aula e devem ser entregues at\u00e9 a data estipulada aqui.</p> <p>Vamos come\u00e7ar com um aquecimento. Para os exerc\u00edcios deste handout e do servidor de exerc\u00edcios JS voc\u00ea pode (e deve) pesquisar o que n\u00e3o souber na internet. Lembre-se de sempre validar as respostas que encontrar em documenta\u00e7\u00f5es ou p\u00e1ginas confi\u00e1veis.</p> <p>Question</p> <p>Selecione a alternativa verdadeira:</p> <ul> <li> Java e JavaScript s\u00e3o sin\u00f4nimos;</li> <li> JavaScript \u00e9 uma extens\u00e3o de Java;</li> <li> Java e JavaScript s\u00e3o duas linguagens diferentes;</li> <li> JavaScript \u00e9 a vers\u00e3o de Java para web.</li> </ul> <p>Resposta</p> <p>A \u00fanica rela\u00e7\u00e3o entre as linguagens Java e JavaScript \u00e9 a origem do nome. A linguagem JavaScript recebeu o seu nome como um truque de marketing para se aproveitar da popularidade da linguagem Java. A despeito desse fato, as duas linguagens s\u00e3o diferentes e n\u00e3o h\u00e1 muito ganho em tentar fazer uma compara\u00e7\u00e3o entre elas.</p>"},{"location":"aulas/07-JS/intro/#executando-codigo-javascript","title":"Executando c\u00f3digo JavaScript","text":"<p>No servidor de exerc\u00edcios apresentaremos uma maneira de executar c\u00f3digo pelo terminal, assim como fazemos com programas em Python. Entretanto, em muitos casos queremos apenas testar alguma express\u00e3o ou c\u00f3digo simples. Para isso \u00e9 poss\u00edvel utilizar o pr\u00f3prio navegador para executar o c\u00f3digo. Basta abrir o navegador de sua prefer\u00eancia e abrir o developer tools. Nele h\u00e1 um console no qual \u00e9 poss\u00edvel executar c\u00f3digo JavaScript diretamente.</p> <p>Developer Tool</p> <p>Cada navegador possui um atalho para abrir o developer tools. No link a seguir voc\u00ea encontra instru\u00e7\u00f5es para encontrar o developer tools no navegado Google Chrome: Abrir o Chrome DevTools</p> Abrir o Chrome DevTools <p>Example</p> <p>Abra o developer tools do seu navegador e execute o c\u00f3digo a seguir no console:</p> <pre><code>alert(\"Ol\u00e1 mundo!\")\n</code></pre>"},{"location":"aulas/07-JS/intro/#a-sintaxe-do-javascript","title":"A sintaxe do JavaScript","text":"<p>Vamos come\u00e7ar pela sintaxe da linguagem. Novamente, existem guias muito mais completos, ent\u00e3o vamos diretamente para um resumo, sem muitas explica\u00e7\u00f5es. Voc\u00ea deve se aprofundar em cada t\u00f3pico conforme a necessidade surgir.</p>"},{"location":"aulas/07-JS/intro/#imprimindo-strings-no-terminal","title":"Imprimindo strings no terminal","text":"<p>O JavaScript foi desenvolvido originalmente para ser executado no navegador. Por esse motivo, o equivalente ao <code>print</code> do Python \u00e9 o comando <code>console.log</code>. Ou seja, vamos fazer o log de uma string no console.</p> <p>Example</p> <p>Execute o c\u00f3digo a seguir no console:</p> <pre><code>console.log(\"Ol\u00e1 mundo!\")\n</code></pre>"},{"location":"aulas/07-JS/intro/#strings","title":"Strings","text":"<p>Assim como em Python, strings podem ser delimitadas por aspas simples ou duplas. Mas existe uma terceira maneira de definir strings que \u00e9 equivalente a uma jun\u00e7\u00e3o das strings de m\u00faltiplas linhas (<code>'''</code>) com f-strings do Python. Esse terceiro tipo de string \u00e9 conhecido como template literal e \u00e9 definido com o acento grave (`).</p> <p>Example</p> <p>Teste no console o c\u00f3digo a seguir (por enquanto basta voc\u00ea saber que o <code>let</code> \u00e9 utilizado para declarar uma nova vari\u00e1vel):</p> <pre><code>let nome = \"Insper\"\nlet mensagem = `Ol\u00e1 ${nome},\n\nEsta \u00e9 uma string com m\u00faltiplas linhas.`\nconsole.log(mensagem)\n</code></pre> <p>Question</p> <p>Considere o c\u00f3digo a seguir e responda qual ser\u00e1 a sa\u00edda no terminal:</p> <pre><code>let a = 'A'\nlet b = \"${a}\"\nlet c = `${a}`\n\nconsole.log(b);\nconsole.log(c);\n</code></pre> <ul> <li> <code>${a}</code> e <code>${a}</code>;</li> <li> <code>A</code> e <code>A</code>;</li> <li> <code>${a}</code> e <code>A</code>;</li> <li> <code>A</code> e <code>${a}</code>.</li> </ul> <p>Resposta</p> <p>Template literals s\u00e3o indicadas com o acento grave (`). Se utilizarmos aspas (' ou \"), o JavaScript n\u00e3o realizar\u00e1 nenhum processamento. Ou seja, a string ser\u00e1 aquela exata sequ\u00eancia de caracteres.</p>"},{"location":"aulas/07-JS/intro/#blocos-de-codigo","title":"Blocos de c\u00f3digo","text":"<p>Em JavaScript, assim como em muitas outras linguagens, blocos de c\u00f3digo s\u00e3o identificados com chaves. Entretanto, as chaves podem ser dispensadas se o bloco possuir apenas uma linha. Neste aspecto, o Python \u00e9 uma exce\u00e7\u00e3o \u00e0 regra, pois os blocos s\u00e3o identificados com indenta\u00e7\u00f5es. Aproveitando, em JavaScript \u00e9 mais comum utilizarmos indenta\u00e7\u00f5es de 2 espa\u00e7os.</p> <p>Question</p> <p>Considere os c\u00f3digos abaixo:</p> <p>a. <pre><code>let a = 2;\nif (a &gt; 0)\n  console.log(`A vari\u00e1vel a vale ${a}\na \u00e9 um n\u00famero positivo`);\nif (a &lt; 0)\n  console.log(`A vari\u00e1vel a vale ${a}\na \u00e9 um n\u00famero negativo`);\n</code></pre></p> <p>b. <pre><code>let a = 2;\nif (a &gt; 0)\n  console.log(`A vari\u00e1vel a vale ${a}`)\n  console.log(`a \u00e9 um n\u00famero positivo`)\nif (a &lt; 0)\n  console.log(`A vari\u00e1vel a vale ${a}`)\n  console.log(`a \u00e9 um n\u00famero negativo`)\n</code></pre></p> <p>c. <pre><code>let a = 2;\nif (a &gt; 0) {\n  console.log(`A vari\u00e1vel a vale ${a}`)\n  console.log(`a \u00e9 um n\u00famero positivo`)\n}\nif (a &lt; 0) {\n  console.log(`A vari\u00e1vel a vale ${a}`)\n  console.log(`a \u00e9 um n\u00famero negativo`)\n}\n</code></pre></p> <p>Qual dos c\u00f3digos acima gera uma sa\u00edda diferente no console:</p> <ul> <li> a</li> <li> b</li> <li> c</li> </ul> <p>Resposta</p> <p>Blocos em JavaScript s\u00e3o definidos por chaves. No item b, como n\u00e3o h\u00e1 chaves definindo o bloco, apenas a linha seguinte ao <code>if</code> \u00e9 considerada como parte do seu bloco. Assim, o segundo e quarto <code>console.log</code> sempre ser\u00e3o executados.</p>"},{"location":"aulas/07-JS/intro/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Existem duas maneiras de definir fun\u00e7\u00f5es em JavaScript. A primeira \u00e9 muito parecida com o que fazemos em Python, mas com <code>function</code> ao inv\u00e9s de <code>def</code>:</p> <pre><code>function minhaFuncao(a, b) {\n  return a + b\n}\n\nconsole.log(minhaFuncao(12, 30))\n</code></pre> <p>A segunda maneira \u00e9 chamada de arrow function, que define uma fun\u00e7\u00e3o que pode ser armazenada em uma vari\u00e1vel:</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir (n\u00e3o se preocupe com o <code>const</code>, n\u00f3s vamos explic\u00e1-lo mais para a frente):</p> <pre><code>const minhaFuncao = (a, b) =&gt; a + b;\nconsole.log(minhaFuncao); // A fun\u00e7\u00e3o \u00e9 um objeto armazenado na vari\u00e1vel minhaFuncao\nconsole.log(minhaFuncao(10, 20));\n\nconst aMesmaFuncao = minhaFuncao;\nconsole.log(aMesmaFuncao(30, 40));\n</code></pre> <p>Question</p> <p>Qual \u00e9 o resultado do c\u00f3digo a seguir?</p> <pre><code>let funcaoA = (a, b) =&gt; a + b;\nlet funcaoB = (a, b) =&gt; a - b;\nfuncaoA = funcaoB;\nlet funcaoC = (f, a, b) =&gt; f(a, b);\nconsole.log(funcaoC(funcaoA, 2, 3));\nconsole.log(funcaoC(funcaoB, 2, 3));\n</code></pre> <ul> <li> <code>-1</code> e <code>-1</code>;</li> <li> <code>-1</code> e <code>5</code>;</li> <li> <code>5</code> e <code>-1</code>;</li> <li> <code>5</code> e <code>5</code>.</li> </ul> <p>Resposta</p> <p>A vari\u00e1vel <code>funcaoA</code> recebe o objeto armazenado na vari\u00e1vel <code>funcaoB</code>, portanto ambas guardam a fun\u00e7\u00e3o que subtrai os elementos. A <code>funcaoC</code> recebe uma fun\u00e7\u00e3o e mais dois argumentos e devolve o resultado da aplica\u00e7\u00e3o da fun\u00e7\u00e3o aos dois argumentos.</p>"},{"location":"aulas/07-JS/intro/#o-ponto-e-virgula","title":"O ponto e v\u00edrgula","text":"<p>Em Python n\u00e3o utilizamos ponto e v\u00edrgula (<code>;</code>) no final das linhas. Em Java o ponto e v\u00edrgula \u00e9 obrigat\u00f3rio. Em JavaScript o ponto e v\u00edrgula \u00e9 opcional, pois a engine os insere automaticamente. Entretanto, voc\u00ea n\u00e3o deve confiar na inser\u00e7\u00e3o autom\u00e1tica do ponto e v\u00edrgula, pois resultados inesperados podem ocorrer.</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir no console:</p> <pre><code>function montaNomeCompleto(nome, sobrenome) {\n    return\n    `\n    ${nome} ${sobrenome}\n    `\n}\nconsole.log(montaNomeCompleto(\"Fulano\", \"Silva\"))\n</code></pre> <p>No c\u00f3digo acima, o ponto e v\u00edrgula foi inserido automaticamente ap\u00f3s o <code>return</code>.</p> <p>Example</p> <p>Para corrigir o c\u00f3digo acima, modifique-o da seguinte maneira:</p> <pre><code>function montaNomeCompleto(nome, sobrenome) {\n    return `\n    ${nome} ${sobrenome}\n    `;\n}\nconsole.log(montaNomeCompleto(\"Fulano\", \"Silva\"))\n</code></pre>"},{"location":"aulas/07-JS/intro/#escopo-de-variaveis","title":"Escopo de vari\u00e1veis","text":"<p>Existem 4 maneiras de declarar vari\u00e1veis em JavaScript. Se definirmos uma vari\u00e1vel como fazemos normalmente em Python, a vari\u00e1vel ser\u00e1 global.</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir no console:</p> <pre><code>a = 10;\n\nfunction modificaVariavelGlobal() {\n  a = 20;\n  b = 30;\n}\n\nmodificaVariavelGlobal();\nconsole.log(a);\nconsole.log(b);\n</code></pre> <p>A segunda maneira de declarar vari\u00e1veis \u00e9 utilizando o <code>var</code>. Vari\u00e1veis declaradas com <code>var</code> s\u00e3o globais apenas quando declaradas no contexto global (fora das fun\u00e7\u00f5es):</p> <p>Tip</p> <p>Recarregue a p\u00e1gina do navegador para que as vari\u00e1veis dos exemplos anteriores que voc\u00ea criou n\u00e3o influencie no comportamento do pr\u00f3ximo exemplo.</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir:</p> <pre><code>console.log(a) // A vari\u00e1vel a j\u00e1 existe, apesar de ter sido declarada depois. Isso s\u00f3 acontece porque ela foi declarada com var.\nvar a = 10;\n\nfunction modificaVariavelGlobal() {\n  a = 20;\n  var b = 30;\n}\n\nmodificaVariavelGlobal();\nconsole.log(a); // Esta vari\u00e1vel \u00e9 a mesma fora e dentro da fun\u00e7\u00e3o\nconsole.log(b); // Esta vari\u00e1vel n\u00e3o existe fora da fun\u00e7\u00e3o, ent\u00e3o ocorrer\u00e1 um erro\n</code></pre> <p>A terceira maneira \u00e9 utilizando o <code>let</code>, que declara uma vari\u00e1vel local (em geral \u00e9 esse tipo de vari\u00e1vel que voc\u00ea vai usar em seu c\u00f3digo):</p> <p>Tip</p> <p>Recarregue a p\u00e1gina do navegador para que as vari\u00e1veis dos exemplos anteriores que voc\u00ea criou n\u00e3o influencie no comportamento do pr\u00f3ximo exemplo.</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir (se voc\u00ea colocar o <code>console.log(a)</code> no come\u00e7o do c\u00f3digo - como no c\u00f3digo acima - ocorrer\u00e1 um erro):</p> <pre><code>let a = 10;\n\nfunction modificaVariavelGlobal() {\n  a += 10;\n  let b = 30;\n}\n\nmodificaVariavelGlobal();\nconsole.log(a); // Esta vari\u00e1vel \u00e9 a mesma fora e dentro da fun\u00e7\u00e3o\nconsole.log(b); // Esta vari\u00e1vel n\u00e3o existe fora da fun\u00e7\u00e3o, ent\u00e3o ocorrer\u00e1 um erro\n</code></pre> <p>A \u00faltima maneira \u00e9 utilizando o <code>const</code>, que declara uma vari\u00e1vel que n\u00e3o pode receber outro valor (os seus atributos ainda podem ser modificados).</p> <p>Tip</p> <p>Recarregue a p\u00e1gina do navegador para que as vari\u00e1veis dos exemplos anteriores que voc\u00ea criou n\u00e3o influencie no comportamento do pr\u00f3ximo exemplo.</p> <p>Example</p> <p>Teste o c\u00f3digo a seguir:</p> <pre><code>const a = 10;\n\nconsole.log(a); // Esta vari\u00e1vel \u00e9 a mesma fora e dentro da fun\u00e7\u00e3o\n\na = 20; // Erro, pois a n\u00e3o pode ser modificada\n</code></pre> <p>Question</p> <p>Qual \u00e9 o resultado do c\u00f3digo a seguir?</p> <pre><code>let a = 10;\nconst b = 20;\n\nconst modifica = () =&gt; {\n    const outraModificacao = () =&gt; {\n        let a = 100;\n    }\n    outraModificacao();\n\n    a += 5;\n    let b = 30;\n}\n\nmodifica();\nconsole.log(a);\nconsole.log(b);\n</code></pre> <ul> <li> <code>10</code> e <code>20</code>;</li> <li> <code>15</code> e <code>30</code>;</li> <li> <code>10</code> e <code>30</code>;</li> <li> <code>15</code> e <code>20</code>;</li> <li> <code>100</code> e <code>20</code>;</li> <li> <code>105</code> e <code>30</code>;</li> <li> <code>100</code> e <code>30</code>;</li> <li> <code>105</code> e <code>20</code>;</li> <li> Ocorrer\u00e1 um erro.</li> </ul> <p>Resposta</p> <p>A vari\u00e1vel <code>a</code> est\u00e1 dispon\u00edvel dentro da fun\u00e7\u00e3o <code>modifica</code> e o seu valor \u00e9 acrescentado em <code>5</code>.</p> <p>Dentro da fun\u00e7\u00e3o <code>outraModificacao</code> \u00e9 declarada uma nova vari\u00e1vel <code>a</code>, que s\u00f3 est\u00e1 dispon\u00edvel dentro dela mesma, pois seu escopo \u00e9 mais espec\u00edfico.</p> <p>O mesmo ocorre com a vari\u00e1vel <code>b</code> dentro da fun\u00e7\u00e3o <code>modifica</code>. Por esse motivo, n\u00e3o ocorre erro ao definir <code>b = 10</code>, pois a constante <code>b</code> declarada fora da fun\u00e7\u00e3o n\u00e3o est\u00e1 sendo modificada na fun\u00e7\u00e3o <code>modifica</code>.</p>"},{"location":"aulas/07-JS/intro/#operador-de-igualdade","title":"Operador de igualdade","text":"<p>Os operadores <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> funcionam da mesma forma que no Python. Entretanto, em JavaScript existe tamb\u00e9m o operador <code>===</code>, que \u00e9 o operador de igualdade. Vamos ver um exemplo:</p> <p>Example</p> <p>Teste no console:</p> <pre><code>console.log('2' == 2); // true\nconsole.log('2' === 2); // false\nconsole.log('2' != 2); // false\nconsole.log('2' !== 2); // true\n</code></pre> <p>O <code>==</code> e <code>!=</code> s\u00e3o comparadores \"fracos\". Eles verificam se os valores s\u00e3o iguais fazendo algumas concess\u00f5es para tipos diferentes. O <code>===</code> e <code>!==</code>, al\u00e9m de verificarem os valores, tamb\u00e9m comparam os tipos.</p>"},{"location":"aulas/07-JS/intro/#arrays-e-um-pouco-de-programacao-funcional","title":"Arrays e um pouco de programa\u00e7\u00e3o funcional","text":"<p>A sintaxe de arrays \u00e9 muito semelhante \u00e0 de listas em Python. Em JavaScript \u00e9 muito comum o uso de princ\u00edpios de programa\u00e7\u00e3o funcional. Por exemplo, podemos utilizar o m\u00e9todo <code>map</code>, que devolve um novo array com o resultado da aplica\u00e7\u00e3o de uma fun\u00e7\u00e3o a todos os elementos do array original. Por exemplo:</p> <pre><code>let numeros = [1, 2, 3, 4];\nlet dobro = numeros.map((n) =&gt; 2 * n); // O argumento do map \u00e9 uma fun\u00e7\u00e3o que recebe um n\u00famero e devolve o seu dobro\nconsole.log(dobro);\n</code></pre> <p>Temos tamb\u00e9m o <code>reduce</code>, que recebe uma fun\u00e7\u00e3o que recebe dois argumentos e um valor inicial. O <code>reduce</code> e percorre o array aplicando a fun\u00e7\u00e3o passando o valor atual e o resultado da aplica\u00e7\u00e3o anterior da fun\u00e7\u00e3o. Por exemplo:</p> <pre><code>let numeros = [1, 2, 3, 4];\nlet somaMaisVinte = numeros.reduce((a, b) =&gt; a + b, 20); // 20 \u00e9 o valor que ser\u00e1 passado na primeira chamada da fun\u00e7\u00e3o\nconsole.log(somaMaisVinte);\n</code></pre> <p>O m\u00e9todo <code>filter</code> recebe uma fun\u00e7\u00e3o que recebe um n\u00famero e devolve um booleano que indica se aquele elemento deve estar presente no resultado ou n\u00e3o. O resultado da aplica\u00e7\u00e3o do <code>filter</code> \u00e9 um novo array contendo apenas os elementos para os quais a fun\u00e7\u00e3o devolveu <code>true</code>. Por exemplo:</p> <pre><code>let numeros = [1, 2, 3, 4];\nlet pares = numeros.filter((n) =&gt; n % 2 === 0);\nconsole.log(pares)\n</code></pre> <p>Question</p> <p>Qual \u00e9 o resultado do c\u00f3digo a seguir?</p> <pre><code>let resultado = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(\n  (a) =&gt; a + 3).filter(\n  (b) =&gt; b % 2 === 0).reduce(\n  (c, d) =&gt; c + d, 0);\nconsole.log(resultado);\n</code></pre> <ul> <li> <code>[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</code>;</li> <li> <code>[2, 4, 6, 8, 10]</code>;</li> <li> <code>[4, 6, 8, 10, 12]</code>;</li> <li> <code>30</code>;</li> <li> <code>40</code>;</li> <li> <code>45</code>.</li> </ul> <p>Resposta</p> <p>A aplica\u00e7\u00e3o do <code>map</code> resultar\u00e1 no array <code>[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</code>. Nesse array ser\u00e1 aplicado o <code>filter</code>, filtrando apenas os n\u00fameros pares, resultando em <code>[4, 6, 8, 10, 12]</code>. Finalmente, o <code>reduce</code> realizar\u00e1 a soma de todos os elementos, come\u00e7ando com a soma igual a zero.</p>"},{"location":"aulas/07-JS/intro/#objetos","title":"Objetos","text":"<p>Em JavaScript n\u00e3o existe o conceito de classes (na verdade o conceito at\u00e9 existe, mas \u00e9 um pouco diferente do que estamos acostumados) e n\u00f3s lidamos diretamente com objetos e a sua sintaxe \u00e9 muito parecida com dicion\u00e1rios em Python. Por exemplo:</p> <pre><code>let cachorro = {\n    nome: \"Floquinho\",\n    idade: 5,\n    temDono: true,\n};\ncachorro.idade++; // Equivalente a cachorro.idade += 1;\ncachorro[\"idade\"]++; // As duas sintaxes s\u00e3o equivalentes\nconsole.log(cachorro);\n</code></pre> <p>Question</p> <p>Quais dos c\u00f3digos abaixo resultar\u00e3o em erro?</p> <p>a. <pre><code>let objeto = {};\nobjeto.atributo = \"Pode isso?\";\nconsole.log(objeto.atributo);\n</code></pre></p> <p>b. <pre><code>const objeto = {};\nobjeto[\"atributo\"] = \"E isso (olha o const l\u00e1)?\";\nconsole.log(objeto[\"atributo\"]);\n</code></pre></p> <p>c. <pre><code>const objeto = {atributo: \"valor inicial\"};\nobjeto.atributo = \"Pode mudar objeto const?\";\nconsole.log(objeto.atributo);\n</code></pre></p> <p>d. <pre><code>let objeto = {atributo: \"outro valor inicial\"};\nobjeto[\"atributo\"] = \"Agora pode?\";\nconsole.log(objeto[\"atributo\"]);\n</code></pre></p> <ul> <li> Nenhum;</li> <li> Apenas a;</li> <li> Apenas b;</li> <li> Apenas c;</li> <li> Apenas d;</li> <li> Apenas a e d;</li> <li> Apenas b e c;</li> <li> Apenas a e c;</li> <li> Apenas b e d;</li> <li> Apenas a e b;</li> <li> Apenas c e d;</li> <li> Todos.</li> </ul> <p>Resposta</p> <p>Vari\u00e1veis <code>const</code> n\u00e3o podem receber outro valor, mas todos os trechos de c\u00f3digo acima modificam um atributo do objeto armazenado naquela vari\u00e1vel. Assim, nenhum deles modifica a vari\u00e1vel em si e ent\u00e3o todos eles funcionam.</p>"},{"location":"aulas/07-JS/intro/#operacoes-assincronas","title":"Opera\u00e7\u00f5es ass\u00edncronas","text":"<p>Opera\u00e7\u00f5es ass\u00edncronas s\u00e3o muito comuns quando estamos trabalhando na web e por isso merecem uma se\u00e7\u00e3o \u00e0 parte. Na web \u00e9 importante que a sua p\u00e1gina seja carregada rapidamente. Para isso, uma t\u00e9cnica comum \u00e9 carregar o essencial e depois carregar os dados necess\u00e1rios conforme a demanda. Assim, \u00e9 necess\u00e1rio realizar opera\u00e7\u00f5es demoradas, como requisi\u00e7\u00f5es para algum servidor. Para n\u00e3o bloquear o processamento, o JavaScript disponibiliza um tipo especial de fun\u00e7\u00e3o, a fun\u00e7\u00e3o ass\u00edncrona.</p> <p>Example</p> <p>Teste o c\u00f3digo abaixo:</p> <pre><code>async function processaString(nome) {\n// Exemplo artificial. Isso na verdade \u00e9 instant\u00e2neo.\n  return `Ol\u00e1 ${nome}`;\n}\nlet oQueEleDevolveu = processaString(\"Fulano\");\nconsole.log(oQueEleDevolveu);\n</code></pre> <p>A fun\u00e7\u00e3o n\u00e3o devolveu a string <code>\"Ol\u00e1 Fulano\"</code> e sim uma coisa chamada promise. Uma promise \u00e9 um objeto que pode ser utilizado para esperar o resultado de uma opera\u00e7\u00e3o demorada. Voc\u00ea pode, por exemplo, esperar o resultado da promise com:</p> <pre><code>async function processaString(nome) {\n// Exemplo artificial. Isso na verdade \u00e9 instant\u00e2neo.\n  return `Ol\u00e1 ${nome}`;\n}\nlet promessa = processaString(\"Fulano\");\nlet resultado = await promessa; // O c\u00f3digo vai ficar parado nesta linha at\u00e9 a opera\u00e7\u00e3o ser concluida\nconsole.log(resultado);\n</code></pre> <p>Vamos trabalhar com um exemplo um pouco mais complexo. A fun\u00e7\u00e3o ass\u00edncrona <code>fetch</code> pode ser utilizada para realizar uma requisi\u00e7\u00e3o.</p> <p>Example</p> <p>Teste o c\u00f3digo abaixo:</p> <pre><code>let promesa = fetch(\"https://catfact.ninja/fact\");\nconsole.log(promesa);\nlet resultado = await promesa;\nconsole.log(resultado);\nlet jsonDaResposta = resultado.json(); // O resultado possui um m\u00e9todo json que carrega o json recebido na resposta\nconsole.log(jsonDaResposta); // Ele tamb\u00e9m \u00e9 uma promessa, pois precisa processar o texto para extrair o json\nlet objetoDaResposta = await jsonDaResposta;\nconsole.log(objetoDaResposta.fact); // Agora sim!\n</code></pre> <p>Hmmm... ainda n\u00e3o vi vantagem nesse tal de <code>async/await</code>. Vamos l\u00e1. Agora come\u00e7a a ficar mais interessante. A promise possui um m\u00e9todo <code>then</code> que recebe uma fun\u00e7\u00e3o que ser\u00e1 aplicada quando a promessa for cumprida. Reescrevendo o exemplo acima:</p> <pre><code>let objetoDaResposta = await fetch(\"https://catfact.ninja/fact\").then(\n  ((resultado) =&gt; resultado.json()))\nconsole.log(objetoDaResposta.fact);\n</code></pre> <p>Mas ainda d\u00e1 pra melhorar. N\u00f3s podemos montar uma sequ\u00eancia de <code>then</code>, pois ele tamb\u00e9m devolve uma promise:</p> <p>Example</p> <p>Teste o c\u00f3digo abaixo:</p> <pre><code>fetch(\"https://catfact.ninja/fact\").then(\n  ((resultado) =&gt; resultado.json())).then(\n  ((objetoDaResposta) =&gt; console.log(objetoDaResposta.fact)))\nconsole.log(\"Esse console.log vai aparecer antes do console.log da sequ\u00eancia de promises acima\");\n</code></pre> <p>No exemplo acima vemos uma vantagem de utilizar promises: voc\u00ea registra o que deve ser feito quando a promessa for cumprida e continuar executando o resto do c\u00f3digo.</p> <p>Question</p> <p>Qual ser\u00e1 a ordem impressa no console?</p> <pre><code>fetch(\"https://catfact.ninja/fact\").then(\n  ((resultado) =&gt; resultado.json())).then(\n  ((objetoDaResposta) =&gt; console.log(\"Resposta 1 OK\")));\n\nfetch(\"https://catfact.ninja/fact\").then(\n  ((resultado) =&gt; resultado.json())).then(\n  ((objetoDaResposta) =&gt; console.log(\"Resposta 2 OK\")));\n</code></pre> <ul> <li> <code>Resposta 1 OK</code> e depois <code>Resposta 2 OK</code>;</li> <li> <code>Resposta 2 OK</code> e depois <code>Resposta 1 OK</code>;</li> <li> Qualquer uma das anteriores pode ocorrer.</li> </ul> <p>Resposta</p> <p>N\u00e3o temos controle de quando as promessas ser\u00e3o cumpridas. \u00c9 poss\u00edvel que uma requisi\u00e7\u00e3o demore mais do que a outra. Portanto qualquer ordem \u00e9 poss\u00edvel.</p> <p>Question</p> <p>Qual ser\u00e1 a ordem impressa no console?</p> <pre><code>fetch(\"https://catfact.ninja/fact\").then(\n  ((resultado) =&gt; resultado.json())).then(\n  ((objetoDaResposta) =&gt; console.log(\"Resposta 1 OK\"))).then(\n  () =&gt; fetch(\"https://catfact.ninja/fact\")).then(\n  ((resultado) =&gt; resultado.json())).then(\n  ((objetoDaResposta) =&gt; console.log(\"Resposta 2 OK\")));\n</code></pre> <ul> <li> <code>Resposta 1 OK</code> e depois <code>Resposta 2 OK</code>;</li> <li> <code>Resposta 2 OK</code> e depois <code>Resposta 1 OK</code>;</li> <li> Qualquer uma das anteriores pode ocorrer.</li> </ul> <p>Resposta</p> <p>O segundo <code>fetch</code> s\u00f3 \u00e9 iniciado depois que a promise anterior for conclu\u00edda. Portanto, ele s\u00f3 ser\u00e1 iniciado depois do primeiro <code>console.log</code>.</p>"},{"location":"aulas/07-JS/intro/#agora-que-voce-ja-sabe-tudo-sobre-javascript","title":"Agora que voc\u00ea j\u00e1 sabe tudo sobre javascript...","text":"<p>... podemos seguir para o pr\u00f3ximo conceito, Requisi\u00e7\u00f5es Ass\u00edncronas.</p>"},{"location":"aulas/07-JS/intro/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Python vs JavaScript for Pythonistas</li> <li>JavaScript Guide</li> </ul>"},{"location":"aulas/autenticacao/","title":"Autentica\u00e7\u00e3o com JWT","text":"<p>Quando trabalhamos com o servidor de exerc\u00edcios JS, a primeira coisa que tivemos que fazer foi pedir para a API um token de autentica\u00e7\u00e3o. Nas requisi\u00e7\u00f5es seguintes, tivemos que passar esse token para a API, para que ela pudesse nos identificar e liberar o acesso aos dados. Esse processo de autentica\u00e7\u00e3o \u00e9 muito comum em aplica\u00e7\u00f5es web, e o JWT (JSON Web Token) \u00e9 uma das formas mais populares de implementar isso.</p>"},{"location":"aulas/autenticacao/#o-que-e-jwt","title":"O que \u00e9 JWT?","text":"<p>O JWT \u00e9 um padr\u00e3o que define uma maneira segura de gerar tokens que podem ser usados para autentica\u00e7\u00e3o. Essa gera\u00e7\u00e3o utiliza princ\u00edpios de criptografia, o que garante que o token n\u00e3o possa ser forjado. Assim, o cliente precisa enviar suas informa\u00e7\u00f5es de autentica\u00e7\u00e3o (usu\u00e1rio e senha) apenas uma vez, e a partir da\u00ed, ele pode usar o token para acessar os dados protegidos.</p>"},{"location":"aulas/autenticacao/#backend","title":"Backend","text":"<p>O backend \u00e9 respons\u00e1vel por gerar o token e envi\u00e1-lo para o cliente. Para isso, ele precisa de um segredo (secret) que ser\u00e1 usado para assinar o token. Esse segredo deve ser mantido em seguran\u00e7a, pois qualquer um que tenha acesso a ele pode gerar tokens v\u00e1lidos. O backend tamb\u00e9m deve ter uma rota de login, onde o cliente envia suas credenciais (usu\u00e1rio e senha) e recebe o token em resposta. Esse token deve ser enviado em todas as requisi\u00e7\u00f5es subsequentes para acessar os dados protegidos.</p> <p>Para implementar o JWT na nossa API Flask, precisamos de algumas bibliotecas: <pre><code>pip install flask flask-cors flask-jwt-extended flask-bcrypt\n</code></pre> As bibliotecas flask e flask-cors j\u00e1 conhecemos. A biblioteca flask-jwt-extended \u00e9 a respons\u00e1vel por implementar o JWT na nossa API, e a flask-bcrypt \u00e9 usada para criptografar as senhas dos usu\u00e1rios, garantindo que elas n\u00e3o sejam armazenadas de maneira insegura no banco de dados. </p> <p>Veja um exemplo de implementa\u00e7\u00e3o do JWT em uma API Flask:</p> <pre><code>from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom flask_jwt_extended import (\n    JWTManager, create_access_token, jwt_required, get_jwt_identity\n)\nfrom flask_bcrypt import Bcrypt\nfrom pymongo import MongoClient\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napp = Flask(__name__)\nCORS(app)\nbcrypt = Bcrypt(app)\napp.config[\"JWT_SECRET_KEY\"] = os.getenv(\"JWT_SECRET_KEY\")\njwt = JWTManager(app)\n\nclient = MongoClient(os.getenv(\"MONGO_URI\"))\ndb = client[\"login_db\"]\nusuarios_col = db[\"usuarios\"]\nnotas_col = db[\"notas\"]\n\n@app.route(\"/cadastro\", methods=[\"POST\"])\ndef register():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    if usuarios_col.find_one({\"username\": username}):\n        return jsonify({\"msg\": \"Usu\u00e1rio j\u00e1 existe\"}), 400\n\n    hashed = bcrypt.generate_password_hash(password).decode(\"utf-8\")\n    usuarios_col.insert_one({\"username\": username, \"password\": hashed})\n    return jsonify({\"msg\": \"Usu\u00e1rio cadastrado com sucesso\"}), 201\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    user = usuarios_col.find_one({\"username\": username})\n    if not user or not bcrypt.check_password_hash(user[\"password\"], password):\n        return jsonify({\"msg\": \"Usu\u00e1rio ou senha inv\u00e1lidos\"}), 401\n\n    token = create_access_token(identity=username)\n    return jsonify(access_token=token)\n\n@app.route(\"/notas\", methods=[\"GET\"])\n@jwt_required()\ndef get_notas():\n    username = get_jwt_identity()\n    notas = list(notas_col.find({\"username\": username}, {}))\n    return jsonify(notas)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>Nesse c\u00f3digo temos v\u00e1rios comandos novos. Vamos ver o que cada um deles faz: - <code>from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity</code>: Importa as fun\u00e7\u00f5es e classes necess\u00e1rias para trabalhar com JWT. Mais especificamente:     - JWTManager: inicializa o JWT     - create_access_token: gera um token para o usu\u00e1rio     - jwt_required: protege rotas que exigem login     - get_jwt_identity: recupera quem est\u00e1 autenticado</p> <ul> <li> <p><code>from flask_bcrypt import Bcrypt</code>: Importa a biblioteca Bcrypt, que \u00e9 usada para criptografar senhas.</p> </li> <li> <p><code>app.config[\"JWT_SECRET_KEY\"] = \"...\"</code>: Define a chave secreta que ser\u00e1 usada para assinar os tokens. Essa chave deve ser mantida em segredo e n\u00e3o deve ser exposta no c\u00f3digo-fonte. Para isso, usamos a biblioteca dotenv, que carrega vari\u00e1veis de ambiente de um arquivo <code>.env</code>. O arquivo <code>.env</code> deve conter a vari\u00e1vel <code>JWT_SECRET_KEY</code> com o valor da chave secreta.</p> </li> <li> <p><code>jwt = JWTManager(app)</code>: Inicializa o JWTManager com a aplica\u00e7\u00e3o Flask.</p> </li> <li> <p><code>@jwt_required()</code>: Um decorator que protege a rota, exigindo que o usu\u00e1rio esteja autenticado para acess\u00e1-la. Se o usu\u00e1rio n\u00e3o estiver autenticado, ele receber\u00e1 um erro 401 (n\u00e3o autorizado).</p> </li> <li> <p><code>get_jwt_identity()</code>: Recupera a identidade do usu\u00e1rio autenticado. Essa identidade \u00e9 o que foi passado como <code>identity</code> na hora de criar o token, que no nosso caso \u00e9 o nome de usu\u00e1rio.</p> </li> <li> <p><code>bcrypt.generate_password_hash(password).decode(\"utf-8\")</code>: Criptografa a senha do usu\u00e1rio antes de armazen\u00e1-la no banco de dados. O m\u00e9todo <code>generate_password_hash</code> retorna um objeto bytes, ent\u00e3o usamos o m\u00e9todo <code>decode</code> para convert\u00ea-lo em uma string.</p> </li> <li> <p><code>bcrypt.check_password_hash(user[\"password\"], password)</code>: Verifica se a senha informada pelo usu\u00e1rio \u00e9 igual \u00e0 senha armazenada no banco de dados. Essa verifica\u00e7\u00e3o \u00e9 feita comparando o hash da senha informada com o hash armazenado no banco de dados. N\u00e3o \u00e9 poss\u00edvel reverter o hash para obter a senha original, ent\u00e3o essa verifica\u00e7\u00e3o \u00e9 feita de forma segura.</p> </li> <li> <p><code>create_access_token(identity=username)</code>: Cria um token de acesso para o usu\u00e1rio, usando o nome de usu\u00e1rio como identidade. Esse token ser\u00e1 enviado para o cliente e deve ser inclu\u00eddo em todas as requisi\u00e7\u00f5es subsequentes para acessar rotas protegidas.</p> </li> </ul>"},{"location":"aulas/autenticacao/#frontend","title":"Frontend","text":"<p>No frontend, precisamos fazer algumas altera\u00e7\u00f5es para lidar com o token de autentica\u00e7\u00e3o. Quando o usu\u00e1rio fizer login, devemos armazenar o token em algum lugar e inclu\u00ed-lo em todas as requisi\u00e7\u00f5es subsequentes para acessar rotas protegidas. Os navegadores oferecem v\u00e1rias op\u00e7\u00f5es para armazenar dados, como cookies, localStorage e sessionStorage. A escolha de qual usar depende do caso de uso. Veja algumas considera\u00e7\u00f5es:</p> <ul> <li>Cookies: S\u00e3o enviados automaticamente pelo navegador em todas as requisi\u00e7\u00f5es para o mesmo dom\u00ednio. Isso pode ser \u00fatil para autentica\u00e7\u00e3o, mas tamb\u00e9m pode ser um problema de seguran\u00e7a se n\u00e3o forem configurados corretamente. \u00c9 importante usar a flag <code>HttpOnly</code> para evitar que o JavaScript acesse o cookie, e a flag <code>Secure</code> para garantir que o cookie s\u00f3 seja enviado em conex\u00f5es HTTPS.</li> <li>localStorage: \u00c9 uma op\u00e7\u00e3o mais simples, mas os dados armazenados no localStorage podem ser acessados pelo JavaScript, o que pode ser um problema de seguran\u00e7a. Al\u00e9m disso, os dados no localStorage persistem mesmo ap\u00f3s o fechamento do navegador, o que pode n\u00e3o ser desej\u00e1vel em alguns casos.</li> <li>sessionStorage: Funciona de maneira semelhante ao localStorage, mas os dados armazenados no sessionStorage s\u00e3o removidos quando o navegador \u00e9 fechado. Isso pode ser \u00fatil para autentica\u00e7\u00e3o, pois os dados n\u00e3o persistem entre sess\u00f5es.</li> </ul> <p>No nosso caso, vamos usar o localStorage para armazenar o token de autentica\u00e7\u00e3o. Veja como ficaria a implementa\u00e7\u00e3o do login no frontend:</p> <p>No componente de login, vamos fazer uma requisi\u00e7\u00e3o para a rota de login da API e armazenar o token no localStorage: <pre><code>import { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function Login({ onLogin }) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = async (e) =&gt; {\n    e.preventDefault();\n    try {\n      const res = await axios.post(\"http://127.0.0.1:5000/login\", {\n        username,\n        password,\n      });\n      const token = res.data.access_token;\n      localStorage.setItem(\"token\", token);\n      onLogin(token);\n    } catch (err) {\n      alert(\"Login falhou\");\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;input value={username} onChange={e =&gt; setUsername(e.target.value)} placeholder=\"Usu\u00e1rio\" /&gt;\n      &lt;input value={password} type=\"password\" onChange={e =&gt; setPassword(e.target.value)} placeholder=\"Senha\" /&gt;\n      &lt;button type=\"submit\"&gt;Entrar&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre></p> <p>Nesse c\u00f3digo, usamos o <code>localStorage</code> para armazenar o token de autentica\u00e7\u00e3o. Quando o usu\u00e1rio faz login, o token \u00e9 salvo no localStorage e passado para a fun\u00e7\u00e3o <code>onLogin</code>, que pode ser usada para atualizar o estado do aplicativo e permitir que o usu\u00e1rio acesse as rotas protegidas. Essa fun\u00e7\u00e3o <code>onLogin</code> deve ser implementada no componente pai, que deve passar o token para os componentes que precisam dele. Veja um exemplo de como isso pode ser feito no arquivo <code>App.js</code>:</p> <pre><code>// src/App.js\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Login from \"./Login\";\n\nfunction App() {\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const [notas, setNotas] = useState([]);\n\n  const handleLogin = (newToken) =&gt; {\n    setToken(newToken);\n  };\n\n  const handleLogout = () =&gt; {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n  };\n\n  useEffect(() =&gt; {\n    if (token) {\n      axios\n        .get(\"http://127.0.0.1:5000/notas\", {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((res) =&gt; setNotas(res.data))\n        .catch((err) =&gt; {\n          console.error(err);\n          handleLogout(); // token inv\u00e1lido ou expirado\n        });\n    }\n  }, [token]);\n\n  if (!token) {\n    return &lt;Login onLogin={handleLogin} /&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Bem-vindo!&lt;/h2&gt;\n      &lt;button onClick={handleLogout}&gt;Sair&lt;/button&gt;\n      &lt;h3&gt;Suas Notas:&lt;/h3&gt;\n      &lt;ul&gt;\n        {notas.map((nota, i) =&gt; (\n          &lt;li key={i}&gt;{nota.texto || JSON.stringify(nota)}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Nesse c\u00f3digo, usamos o <code>useEffect</code> para fazer uma requisi\u00e7\u00e3o para a rota de notas da API sempre que o token mudar. Se o token for inv\u00e1lido ou expirado, chamamos a fun\u00e7\u00e3o <code>handleLogout</code>, que remove o token do localStorage e atualiza o estado do aplicativo. Isso faz com que o componente de login seja exibido novamente. Perceba tamb\u00e9m que para fazer a requisi\u00e7\u00e3o das notas, foi necess\u00e1rio passar o token de autentica\u00e7\u00e3o exatamente como fizemos no servidor JS. <pre><code>axios\n  .get(\"http://127.0.0.1:5000/notas\", {\n    headers: { Authorization: `Bearer ${token}` },\n  })\n</code></pre> Nesse caso, o token \u00e9 passado no cabe\u00e7alho da requisi\u00e7\u00e3o, no campo <code>Authorization</code>, com o prefixo <code>Bearer</code>. Esse prefixo \u00e9 uma conven\u00e7\u00e3o do padr\u00e3o JWT e indica que o token \u00e9 um token de acesso. O servidor deve verificar esse cabe\u00e7alho e validar o token antes de permitir o acesso aos dados protegidos.</p>"},{"location":"aulas/autenticacao/#seguranca","title":"Seguran\u00e7a","text":"<p>O JWT \u00e9 uma forma segura de autentica\u00e7\u00e3o, mas existem algumas maneiras de deixar a implementa\u00e7\u00e3o ainda mais segura. Aqui est\u00e3o algumas dicas:</p> <ul> <li>Armazenamento do token: O token deve ser armazenado de forma segura, para evitar que ele seja acessado por scripts maliciosos. O uso de cookies com a flag <code>HttpOnly</code> \u00e9 uma boa pr\u00e1tica nesse caso.</li> <li>Validade do token: O token deve ter um tempo de expira\u00e7\u00e3o definido, para evitar que ele seja usado indefinidamente. O JWT permite definir um tempo de expira\u00e7\u00e3o ao criar o token, e o servidor deve verificar esse tempo ao validar o token.</li> <li>Revoga\u00e7\u00e3o do token: O servidor deve ter uma forma de revogar o token, caso o usu\u00e1rio fa\u00e7a logout ou o token seja comprometido. Uma forma de fazer isso \u00e9 armazenar os tokens revogados em um banco de dados e verificar se o token est\u00e1 na lista de revogados ao validar o token.</li> <li>HTTPS: O uso de HTTPS \u00e9 essencial para garantir a seguran\u00e7a da comunica\u00e7\u00e3o entre o cliente e o servidor. O HTTPS criptografa os dados transmitidos, evitando que eles sejam interceptados por terceiros.</li> <li>CORS: O CORS (Cross-Origin Resource Sharing) \u00e9 um mecanismo de seguran\u00e7a que impede que scripts de um dom\u00ednio acessem recursos de outro dom\u00ednio. O uso do CORS \u00e9 importante para evitar ataques de CSRF (Cross-Site Request Forgery), onde um script malicioso tenta fazer requisi\u00e7\u00f5es para o servidor em nome do usu\u00e1rio. A biblioteca <code>flask-cors</code> j\u00e1 est\u00e1 configurada no c\u00f3digo acima, mas \u00e9 importante revisar as configura\u00e7\u00f5es para garantir que apenas os dom\u00ednios autorizados possam acessar a API.</li> <li>Deploy fechado: Se a nossa API for exclusiva para o nosso aplicativo, podemos fech\u00e1-la para o mundo externo, permitindo apenas requisi\u00e7\u00f5es do nosso dom\u00ednio ou do IP do servidor onde est\u00e1 o Frontend. Isso pode ser feito configurando o firewall do servidor ou usando um proxy reverso, como o Nginx, para filtrar as requisi\u00e7\u00f5es.</li> </ul>"},{"location":"aulas/mongo/certi/","title":"SSL Handshake - Como consertar o erro do PyMongo (MacOS)","text":"<p>Respons\u00e1vel: Andre Pereira</p> <p>O seguinte erro pode ocorrer quando voc\u00ea estiver usando flask + flask_pymongo, principalmente em sistemas Mac:</p> <pre><code>pymongo.errors.ServerSelectionTimeoutError: SSL handshake failed: backendstore.documents.azure.com:10255: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)\n</code></pre> <p>Basta instalar pelo pip dentro da sua \"venv\u201d a biblioteca <code>certifi</code> e gerar o seguinte c\u00f3digo na sua aplica\u00e7\u00e3o:</p> <pre><code>import certifi\nca = certifi.where()\n</code></pre> <p>E na hora de se conectar com o mongo passar na inst\u00e2ncia do PyMongo o certificado pelo par\u00e2metro <code>tlsCAFile</code> a vari\u00e1vel <code>ca</code> que foi criada anteriormente</p> <pre><code>from flask_pymongo import PyMongo, ObjectId\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\napp.config[\"MONGO_URI\"] = f\"SUA_URL_DE_CONEXAO\"\ndb = PyMongo(app, tlsCAFile=ca)\n</code></pre>"},{"location":"aulas/mongo/certi/#referencias","title":"REFER\u00caNCIAS:","text":"<p>https://stackoverflow.com/questions/54484890/ssl-handshake-issue-with-pymongo-on-python3</p>"},{"location":"aulas/mongo/conceitos/","title":"Mongo Data Base: Conceitos B\u00e1sicos","text":"<p>Respons\u00e1vel: Sarti</p> <p>Com o MySQL, interagimos com bancos de dados relacionais, e o MongoDB ser\u00e1 nossa abordagem para bancos de dados n\u00e3o relacionais.</p>"},{"location":"aulas/mongo/conceitos/#tipos-de-bancos-de-dados","title":"Tipos de Bancos de Dados","text":"<p>Existem m\u00faltiplos tipos de bancos de dados, cada um trazendo suas vantagens e desvantagens, sendo ideal para um ou outro uso. Dentre esses v\u00e1rios tipos de bancos, j\u00e1 trabalhamos com o MySQL, que \u00e9 uma abordagem de bancos de dados relacionais (SQL), na qual os bancos de dados consistentes de tabelas. Podemos salvar o que quisermos em nosso banco de dados, por\u00e9m devemos salv\u00e1r como uma tabela, semelhante ao Excel em sua estrutura.</p> <p>O MongoDB, por sua vez, \u00e9 a abordagem mais popular de banco de dados n\u00e3o relacionais (NoSQL), que \u00e9 basicamente um banco de dados consistente de documentos, e n\u00e3o de tabelas.</p>"},{"location":"aulas/mongo/conceitos/#como-assim-consistente-de-documentos","title":"Como assim \u201cConsistente de documentos?","text":"<p>Quando falamos que o MongoDB \u00e9 consistente de documentos, queremos dizer que o banco de dados, ao inv\u00e9s de armazenar tabelas, ele armazena documentos em formato de arquivos de texto. No caso do MongoDB, em formato JSON. Sim, o mesmo JSON que utilizamos para toda requisi\u00e7\u00e3o REST e que \u00e9 extremamente similar a um dicion\u00e1rio do Python.</p>"},{"location":"aulas/mongo/conceitos/#vantagens-de-um-banco-de-dados-nao-relacional","title":"Vantagens de um Banco de Dados n\u00e3o relacional:","text":"<p>Por armazenarmos documentos JSON, que para facilitar a compreens\u00e3o irei me referir como \"dicion\u00e1rios\" (apesar de incorreto), n\u00f3s temos muito mais facilidade de ler e armazenar dados conforme necess\u00e1rio, pois tratando-se de um dicion\u00e1rio, n\u00e3o precisamos declarar os campos de antem\u00e3o como em uma tabela, onde precisamos declarar as colunas.</p> <p>Queremos salvar uma informa\u00e7\u00e3o X? Salve. Quer que um usu\u00e1rio n\u00e3o tenha email e os outros tenham? Pois crie o usu\u00e1rio sem. Quer um dicion\u00e1rio de dicion\u00e1rios? Perfeito.</p> <p>Esta \u00e9 a maior vantagem do MongoDB: simplicidade. Salvamos o que quisermos, como quisermos, quando quisermos, no maior \"freestyle\" poss\u00edvel, da maneira que acharmos melhor. Isso inclusive \u00e9 demonstrado nas queries do MongoDB, que s\u00e3o muito mais simples do que as queries de SQL.</p>"},{"location":"aulas/mongo/conceitos/#desvantagens-de-um-banco-de-dados-nao-relacional","title":"Desvantagens de um Banco de Dados n\u00e3o relacional:","text":"<p>Apesar de parecer, e realmente ser, uma maravilha desenvolver um projeto com MongoDB devido \u00e0 sua simplicidade, isso tamb\u00e9m \u00e9 revertido em sua maior desvantagem. \u00c9 muito f\u00e1cil criarmos bagun\u00e7a e desorganiza\u00e7\u00e3o no banco de dados, por isso, simplicidade n\u00e3o significa que devemos parar de nos preocupar com a estrutura de dados do nosso sistema.</p> <p></p> <p>Exemplo de dicionario (arquivo JSON) armazenado pelo Mongo.</p>"},{"location":"aulas/mongo/conceitos/#estrutura-do-mongo","title":"Estrutura do Mongo","text":"<p>O MongoDB \u00e9 dedicado a armazenar documentos, e isto \u00e9 feito por meio de uma hierarquia de intera\u00e7\u00f5es dentro de um mesmo cluster (projeto). A estrutura do MongoDB que configuramos em nosso MongoDB Atlas consiste de:</p> <ul> <li>Cluster: O nosso projeto, um agrupado de todos os bancos de dados do projeto.</li> <li>Databases: O banco de dados que armazena as collections do projeto.</li> <li>Collections: Como se fossem pastas de arquivos no nosso computador, que armazenam os dicionarios.</li> <li>Json/Arquivos (dicionarios): As informa\u00e7\u00f5es armazenadas no banco de dados.</li> </ul> <p></p> <p>Imagem do Cluster0, com suas databases e as collections da database \u201cdatabase_goal\u201d.</p>"},{"location":"aulas/mongo/configuracao/","title":"Mongo Database: Configura\u00e7\u00e3o","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"aulas/mongo/configuracao/#criacao-de-conta","title":"Cria\u00e7\u00e3o de Conta","text":"<p>O MongoDB \u00e9 um tipo de banco de dados que pode ser utilizado localmente ou via nuvem, assim como o MySQL, e por isso estaremos utilizando a sua abordagem em nuvem gratuita, por meio do MongoDB Atlas. Para criarmos nosso banco de dados, primeiro acessem o link do Atlas (https://www.mongodb.com/cloud/atlas/register) e crie sua conta.</p> <p></p> <p>(O email utilizado \u00e9 de um gerador, substitua todas as informa\u00e7\u00f5es por informa\u00e7\u00f5es validas)</p>"},{"location":"aulas/mongo/configuracao/#criando-nosso-banco-de-dados","title":"Criando Nosso Banco de Dados","text":"<p>Ap\u00f3s criar a conta e verificar seu e-mail, ser\u00e1 pedido para preencher um formul\u00e1rio. As informa\u00e7\u00f5es fornecidas n\u00e3o devem influenciar nas etapas seguintes do processo, mas para refer\u00eancia, segue como sugiro que o formul\u00e1rio seja preenchido:</p> <p></p> <p>Ap\u00f3s preencher o formul\u00e1rio, voc\u00ea ser\u00e1 redirecionado para a p\u00e1gina de cria\u00e7\u00e3o de clusters, que \u00e9, resumidamente, nosso banco de dados. Selecione a op\u00e7\u00e3o M0 (gratuita), servidor S\u00e3o Paulo e provedor AWS. O nome fica a sua escolha. Ap\u00f3s isso, clique em \"Create Deployment\".</p> <p>Ap\u00f3s isso, ser\u00e1 pedido para criarmos um usu\u00e1rio de administra\u00e7\u00e3o para nossa base de dados. Utilize qualquer informa\u00e7\u00e3o desejada. Eu utilizo \"admin\" como usu\u00e1rio e \"admin\" como senha. Clique em \"Choose connection method\" e selecione Compass (voltaremos aqui mais tarde) e copie a Connection String fornecida. Salve-a para uso posterior.</p> <p></p>"},{"location":"aulas/mongo/configuracao/#liberando-acesso","title":"Liberando Acesso","text":"<p>Antes de prosseguirmos para o MongoDB Compass, utilize a barra lateral para acessar a aba \"Network Access\". Nesta aba, clique em \"Add IP Address\" e selecione \"Allow Access From Anywhere\". Por padr\u00e3o, nosso cluster s\u00f3 \u00e9 acess\u00edvel por IPs restritos (importante para aplica\u00e7\u00f5es comerciais), mas para n\u00f3s isso apenas atrapalha, ent\u00e3o liberamos o acesso por qualquer IP.</p> <p></p>"},{"location":"aulas/mongo/configuracao/#mongo-compass","title":"Mongo Compass","text":""},{"location":"aulas/mongo/configuracao/#baixando-o-compass","title":"Baixando o Compass","text":"<p>Para acessarmos nosso banco de dados no Atlas, utilizamos uma ferramenta chamada MongoDB Compass (podemos fazer um paralelo no MySQL com o MySQL Workbench). Para baixar, basta acessar o link da p\u00e1gina de download e baixar a vers\u00e3o que mais se adequar ao seu caso (https://www.mongodb.com/try/download/compass).</p> <p>Observa\u00e7\u00e3o: A vers\u00e3o pode variar dependendo do sistema operacional e de qual vers\u00e3o voc\u00ea deseja utilizar, mas via de regra utilizaremos a op\u00e7\u00e3o \"MongoDB Compass GUI\". Tente baix\u00e1-la e, se por algum motivo n\u00e3o conseguir, chame um professor ou especialista.</p>"},{"location":"aulas/mongo/configuracao/#conectando-ao-compass","title":"Conectando ao Compass","text":"<p>Ao baixar e abrir o compass, ser\u00e1 pedido para fazer a conex\u00e3o a alguma base de dados. Para isso, basta inserir o link de conex\u00e3o copiado anteriormente e se connectar:</p> <p></p> <p>Pronto, ap\u00f3s isso voc\u00ea j\u00e1 estar\u00e1 connectado ao seu cluster, com acesso \u00e0 todas as Databases e Collections.</p> <p></p>"},{"location":"aulas/mongo/pythonmongo/","title":"Migra\u00e7\u00e3o de MySQL para MongoDB com Flask e PyMongo","text":""},{"location":"aulas/mongo/pythonmongo/#principais-mudancas","title":"Principais Mudan\u00e7as","text":"Aspecto MySQL MongoDB (com PyMongo) Biblioteca de acesso <code>mysql.connector</code> <code>pymongo</code> Conex\u00e3o Config dict com host, user, etc. URI (<code>mongodb://...</code>) Consulta de dados <code>cursor.execute</code> + <code>fetchall()</code> <code>collection.find()</code> Tabelas vs. Cole\u00e7\u00f5es <code>tbl_alunos</code> (tabela) <code>alunos</code> (cole\u00e7\u00e3o) Formato de retorno Tuplas Documentos/dicion\u00e1rios Esquema r\u00edgido Sim N\u00e3o (flex\u00edvel) <p>Para fazer a migra\u00e7\u00e3o de um projeto de MySQL para MongoDB, \u00e9 necess\u00e1rio adaptar o c\u00f3digo para usar a biblioteca <code>pymongo</code> e ajustar as consultas e opera\u00e7\u00f5es de banco de dados. Abaixo est\u00e1 o mesmo exemplo que utilizamos para o MySQL, mas agora utilizando o MongoDB com a biblioteca <code>pymongo</code>.</p>"},{"location":"aulas/mongo/pythonmongo/#exemplo-de-codigo","title":"Exemplo de C\u00f3digo","text":"<pre><code>from flask import Flask, request\nimport os\nfrom pymongo import MongoClient\nfrom dotenv import load_dotenv\n\nload_dotenv('.cred')\n\nmongo_uri = os.getenv('MONGO_URI', 'mongodb://localhost:27017/')\ndb_name = os.getenv('DB_NAME', 'db_escola')\n\ndef connect_db():\n    try:\n        client = MongoClient(mongo_uri)\n        db = client[db_name]\n        return db\n    except Exception as e:\n        print(f\"Erro ao conectar ao MongoDB: {e}\")\n        return None\n\napp = Flask(__name__)\n\n@app.route('/alunos', methods=['GET'])\ndef get_alunos():\n    db = connect_db()\n    if db is None:\n        return {\"erro\": \"Erro ao conectar ao banco de dados\"}, 500\n\n    try:\n        collection = db['alunos']\n        alunos_cursor = collection.find({}, {\"_id\": 0})  # Remove o campo _id da resposta\n        alunos = list(alunos_cursor)\n\n        if not alunos:\n            return {\"erro\": \"Nenhum aluno encontrado\"}, 404\n        return {\"alunos\": alunos}, 200\n    except Exception as e:\n        return {\"erro\": f\"Erro ao consultar alunos: {str(e)}\"}, 500\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"aulas/mongo/pythonmongo/#exemplo-de-testes","title":"Exemplo de testes","text":"<p>Assim como no MySQL, podemos criar testes automatizados para verificar se a API est\u00e1 funcionando corretamente. Abaixo est\u00e3o um exemplo de teste utilizando a biblioteca <code>pytest</code>.</p> <pre><code>import pytest\nfrom unittest.mock import patch, MagicMock\nfrom api import app\n\n@pytest.fixture\ndef client():\n    app.config[\"TESTING\"] = True\n    with app.test_client() as client:\n        yield client\n\n@patch(\"api.connect_db\")\ndef test_get_alunos(mock_connect_db, client):\n    mock_collection = MagicMock()\n    mock_collection.find.return_value = [\n        {\"id\": 1, \"nome\": \"Alice\", \"email\": \"alice@email.com\"},\n        {\"id\": 2, \"nome\": \"Bob\", \"email\": \"bob@email.com\"},\n    ]\n\n    mock_db = MagicMock()\n    mock_db.__getitem__.return_value = mock_collection\n    mock_connect_db.return_value = mock_db\n\n    response = client.get(\"/alunos\")\n\n    assert response.status_code == 200\n    assert response.get_json() == {\n        \"alunos\": [\n            {\"id\": 1, \"nome\": \"Alice\", \"email\": \"alice@email.com\"},\n            {\"id\": 2, \"nome\": \"Bob\", \"email\": \"bob@email.com\"},\n        ]\n    }\n</code></pre>"},{"location":"aulas/mongo/relacoes/","title":"Como modelar rela\u00e7\u00f5es entre documentos no MongoDB usando Embeddings","text":""},{"location":"aulas/mongo/relacoes/#o-que-sao-relacoes-em-bancos-de-dados","title":"O que s\u00e3o rela\u00e7\u00f5es em bancos de dados?","text":"<p>Em qualquer banco de dados, seja relacional (como MySQL) ou n\u00e3o relacional (como MongoDB), relacionar dados significa ligar informa\u00e7\u00f5es de diferentes entidades.</p> <p>Por exemplo: - Um usu\u00e1rio pode ter um endere\u00e7o. - Um pedido pode ter uma lista de produtos. - Um aluno pode estar matriculado em v\u00e1rias disciplinas.</p> <p>Essas rela\u00e7\u00f5es entre entidades s\u00e3o essenciais para organizar, consultar e manter os dados de forma eficiente.</p>"},{"location":"aulas/mongo/relacoes/#formas-de-representar-relacoes-no-mongodb","title":"Formas de representar rela\u00e7\u00f5es no MongoDB","text":"<p>O MongoDB oferece duas abordagens principais para representar rela\u00e7\u00f5es entre documentos:</p> <ol> <li>Refer\u00eancias: armazenar o <code>id</code> de um documento dentro de outro (semelhante a uma foreign key).</li> <li>Embeddings (documentos embutidos): inserir um documento dentro de outro.</li> </ol> <p>Embedding \u00e9 a t\u00e9cnica de armazenar um documento inteiro como um campo dentro de outro documento. Ou seja, em vez de manter os dados separados em cole\u00e7\u00f5es diferentes (como tabelas), voc\u00ea aninha um documento dentro de outro para mant\u00ea-los juntos no mesmo registro. Da mesma forma como faz\u00edamos dicion\u00e1rios contendo outros dicion\u00e1rios.</p> <p>A pr\u00f3pria documenta\u00e7\u00e3o do MongoDB recomenda:</p> <p>\u201cWhat you use together, store together.\u201d Se voc\u00ea sempre acessa duas entidades juntas, considere embutir os dados!</p>"},{"location":"aulas/mongo/relacoes/#quando-usar-embeddings","title":"Quando usar embeddings?","text":"<p>Use embeddings quando: - A rela\u00e7\u00e3o for do tipo um-para-um (1:1) ou um-para-poucos (1:N). - Os dados embutidos n\u00e3o forem compartilhados com outros documentos. - Voc\u00ea acessa essas informa\u00e7\u00f5es juntas com frequ\u00eancia.</p>"},{"location":"aulas/mongo/relacoes/#exemplo-pratico-relacao-11","title":"Exemplo pr\u00e1tico: rela\u00e7\u00e3o 1:1","text":"<p>Imagine que voc\u00ea tem um sistema de biblioteca. Cada leitor possui um endere\u00e7o. Essa \u00e9 uma rela\u00e7\u00e3o um-para-um: cada leitor tem exatamente um endere\u00e7o.</p>"},{"location":"aulas/mongo/relacoes/#sem-embedding-documentos-separados","title":"Sem embedding (documentos separados):","text":"<pre><code>// Documento da cole\u00e7\u00e3o \"leitores\"\n{\n   _id: \"joe\",\n   name: \"Joe Bookreader\"\n}\n\n// Documento da cole\u00e7\u00e3o \"enderecos\"\n{\n   patron_id: \"joe\",\n   street: \"123 Fake Street\",\n   city: \"Faketon\",\n   state: \"MA\",\n   zip: \"12345\"\n}\n</code></pre> <p>Nesse caso, para buscar o endere\u00e7o de Joe, seria necess\u00e1rio juntar manualmente(join manual) os dados de duas cole\u00e7\u00f5es. Isso \u00e9 poss\u00edvel, mas menos perform\u00e1tico.</p>"},{"location":"aulas/mongo/relacoes/#com-embedding-documento-unico","title":"Com embedding (documento \u00fanico):","text":"<pre><code>// Documento da cole\u00e7\u00e3o \"leitores\"\n{\n   _id: \"joe\",\n   name: \"Joe Bookreader\",\n   address: {\n      street: \"123 Fake Street\",\n      city: \"Faketon\",\n      state: \"MA\",\n      zip: \"12345\"\n   }\n}\n</code></pre> <p>Agora, todos os dados do leitor est\u00e3o juntos em um \u00fanico documento, como um dicion\u00e1rio de dicion\u00e1rios. Isso torna a leitura de dados muito mais r\u00e1pida e simples!</p>"},{"location":"aulas/mongo/relacoes/#beneficios-do-uso-de-embeddings","title":"Benef\u00edcios do uso de embeddings","text":"<ul> <li>Mais performance em leitura (menos buscas no banco)</li> <li>Estrutura de dados mais natural e compacta</li> <li>Ideal para dados que pertencem fortemente ao \u201cdono\u201d (como o endere\u00e7o de um usu\u00e1rio)</li> </ul>"},{"location":"aulas/mongo/relacoes/#quando-nao-usar-embeddings","title":"Quando n\u00e3o usar embeddings?","text":"<p>Evite embeddings se:</p> <ul> <li>O dado embutido cresce demais (ex: milhares de coment\u00e1rios em um post).</li> <li>O dado embutido precisa ser acessado independentemente ou em massa.</li> <li>Voc\u00ea precisa atualizar os dados embutidos com muita frequ\u00eancia.</li> </ul>"},{"location":"aulas/mongo/relacoes/#referencias","title":"Referencias:","text":"<ul> <li> <p>Relacionamentos um para um</p> </li> <li> <p>Relacionamentos um para muitos</p> </li> <li> <p>Relacionamentos muitos para muitos</p> </li> </ul>"},{"location":"aulas/react/parte-00-react-vite/","title":"React","text":"<p>O objetivo deste handout \u00e9 que voc\u00ea tenha um primeiro contato com o React. Ao final do handout voc\u00ea ter\u00e1 alguma ideia de qual \u00e9 a \"cara\" de um app React. Para saber mais sobre React veja o tutorial oficial do React ou o tutorial disponibilizado pelo Mozilla Tutorial React by Mozilla.</p> <p>Github Classroom</p> <p>Crie o reposit\u00f3rio do Github Classroom para fazer o envio deste handout. Link para o Github Classroom.</p> <p>Importante</p> <p>Nem todo c\u00f3digo deste handout \u00e9 JavaScript puro. Algumas (muitas) coisas s\u00e3o espec\u00edficas do React e n\u00e3o funcionar\u00e3o fora desse contexto.</p> <p>Importante 2</p> <p>Quando voc\u00ea for pesquisar no Google sobre React, voc\u00ea vai encontrar muito material utilizando classes. Essa \u00e9 a uma maneira alternativa de se utilizar o React. O uso de componentes funcionais (que veremos neste handout) tem se tornado cada vez mais utilizado, mas \u00e9 importante saber que existem essas duas alternativas para n\u00e3o utilizar solu\u00e7\u00f5es que n\u00e3o funcionar\u00e3o para o seu caso.</p>"},{"location":"aulas/react/parte-00-react-vite/#setup-do-react","title":"Setup do React","text":"<ol> <li>Garanta que voc\u00ea possui uma vers\u00e3o recente do Node.js. Se voc\u00ea fez o servidor de exerc\u00edcios JS voc\u00ea j\u00e1 deve ter uma vers\u00e3o recente do Node.js.</li> <li> <p>Existem diversas formas de criar um projeto React. Neste handout vamos utilizar o Vite, para isso, abra um terminal e navegue at\u00e9 a pasta onde voc\u00ea deseja criar o projeto. N\u00e3o \u00e9 necess\u00e1rio criar uma pasta para o projeto, pois o comando a seguir j\u00e1 cria uma pasta com o nome do projeto.      Rode o comando abaixo:     <pre><code>npm create vite@latest notes-frontend -- --template react\n</code></pre>     Nada deveria ser perguntado, mas se voc\u00ea tiver que escolher op\u00e7\u00f5es, escolha as op\u00e7\u00f5es <code>React</code> e <code>JavaScript</code>.</p> </li> <li> <p>A estrutura de arquivos dentro do projeto ser\u00e1:</p> <pre><code>notes-frontend\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 public\n\u2502   \u2514\u2500\u2500 vite.svg\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 assets\n\u2502   \u2502   \u2514\u2500\u2500 react.svg\n\u2502   \u251c\u2500\u2500 App.css\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 index.css\n\u2502   \u2514\u2500\u2500 main.jsx\n\u251c\u2500\u2500 .eslintrc.cjs\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 vite.config.js\n</code></pre> Breve descri\u00e7\u00e3o das pastas e arquivos <ul> <li><code>node_modules</code>: pasta com as depend\u00eancias do projeto;</li> <li><code>public</code>: pasta com arquivos est\u00e1ticos, como imagens e o arquivo <code>index.html</code>;</li> <li><code>src</code>: pasta com os arquivos do projeto;</li> <li><code>App.css</code>: arquivo de estilos do componente principal;</li> <li><code>App.jsx</code>: arquivo do componente principal;</li> <li><code>index.css</code>: arquivo de estilos do arquivo <code>index.html</code>;</li> <li><code>index.jsx</code>: arquivo que renderiza o componente principal;</li> <li><code>.gitignore</code>: arquivo para ignorar arquivos e pastas no git;</li> <li><code>package.json</code>: arquivo com informa\u00e7\u00f5es do projeto e depend\u00eancias;</li> <li><code>package-lock.json</code>: arquivo com informa\u00e7\u00f5es das depend\u00eancias;</li> <li><code>README.md</code>: arquivo com informa\u00e7\u00f5es sobre o projeto;</li> <li><code>vite.config.js</code>: arquivo de configura\u00e7\u00e3o do Vite.</li> </ul> <p>Foram criados v\u00e1rios arquivos e pastas, mas neste momento vamos focar em apenas alguns deles:</p> <p>O projeto possui somente um arquivo HTML, o <code>index.html</code>, que \u00e9 o ponto de entrada da aplica\u00e7\u00e3o. Se olharmos o conte\u00fado desse arquivo, veremos que ele possui uma \u00fanica tag <code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code>. Essa tag \u00e9 o ponto de entrada da aplica\u00e7\u00e3o React. O React ir\u00e1 renderizar os componentes dentro dessa tag.</p> <p>Single Page Applications (SPA) s\u00e3o aplica\u00e7\u00f5es que possuem uma \u00fanica p\u00e1gina HTML e que s\u00e3o atualizadas dinamicamente.</p> <p>O arquivo <code>src/App.jsx</code> \u00e9 o componente principal da aplica\u00e7\u00e3o. Ele \u00e9 o componente que ser\u00e1 renderizado dentro da tag <code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code> do arquivo <code>index.html</code>. O arquivo <code>src/index.jsx</code> \u00e9 o arquivo que renderiza o componente principal. Ele importa o componente principal e o renderiza dentro da tag <code>&lt;div id=\"root\"&gt;&lt;/div&gt;</code>.</p> <p>O arquivo <code>src/App.css</code> \u00e9 o arquivo de estilos do componente principal. Ele \u00e9 importado no arquivo <code>src/App.jsx</code> e \u00e9 aplicado ao componente principal.  </p> </li> <li> <p>Rode os comandos abaixo para entrar na pasta do projeto, instalar as depend\u00eancias e rodar o projeto:     <pre><code>cd notes-frontend\nnpm install\nnpm run dev\n</code></pre></p> <p> P\u00e1gina inicial </p> </li> </ol>"},{"location":"aulas/react/parte-00-react-vite/#criando-componentes","title":"Criando Componentes","text":"<p>Vamos come\u00e7ar criando um componente para o <code>card</code>.</p> <p>Criando Componentes</p>"},{"location":"aulas/react/parte-01-componentes/","title":"Componentes","text":"<p>Vamos come\u00e7ar fazendo altera\u00e7\u00f5es para come\u00e7armos a refazer o Projeto 1 utilizando Flask + React.</p> <p>Componentes s\u00e3o a base do React, a extens\u00e3o <code>.JSX</code> (JavaScript XML, JavaScript Syntax eXtension) \u00e9 uma extens\u00e3o de arquivo usada por arquivos JavaScript que permitem a mistura de HTML e JavaScript. Os componentes s\u00e3o fun\u00e7\u00f5es JavaScript que retornam HTML. </p> <p>Poder\u00edamos escrever o HTML diretamente no arquivo <code>src/App.jsx</code>, mas isso n\u00e3o seria muito pr\u00e1tico. </p> <p>Em nosso projeto, podemos pensar em quebrar a aplica\u00e7\u00e3o em componentes menores. Por exemplo, podemos criar um componente para representar uma <code>card</code>, <code>formulario</code>, <code>appbar</code> e assim por diante.</p> Componentes <p>Vamos criar nosso primeiro componente, o <code>Note</code>. Ele ser\u00e1 respons\u00e1vel por mostrar uma anota\u00e7\u00e3o.</p> <ol> <li> <p>Crie o arquivo <code>src/components/Note/index.jsx</code> (voc\u00ea vai precisar criar algumas pastas) no seu projeto com o seguinte conte\u00fado:</p> <pre><code>export default function Note() {\n  return &lt;div&gt;Ol\u00e1 mundo!&lt;/div&gt;;\n}\n</code></pre> <p>Vamos entender o que aconteceu no c\u00f3digo acima. Come\u00e7ando pelo <code>src/components/Note/index.jsx</code>:</p> <ul> <li>Linha 1: o <code>export default</code> indica que, ao ser importar esse arquivo, o valor a seguir deve ser devolvido (no caso a <code>function Note()</code>). Um exemplo disso pode ser visto no c\u00f3digo abaixo, no arquivo <code>src/App.jsx</code> no qual <code>Note</code> guarda o valor default devolvido pela importa\u00e7\u00e3o de <code>./components/Note</code> (como \u00e9 uma pasta, ele importa por padr\u00e3o o arquivo <code>src/components/Note/index.jsx</code>);</li> <li>Linha 2: o valor de retorno da fun\u00e7\u00e3o \u00e9 uma tag HTML??? Pois \u00e9, na verdade esse arquivo n\u00e3o \u00e9 JavaScript puro e sim uma sintaxe chamada JSX na qual \u00e9 poss\u00edvel misturar tags e c\u00f3digo JS.</li> </ul> </li> <li> <p>Substituia o c\u00f3digo no arquivo <code>src/App.jsx</code> pelo c\u00f3digo abaixo:</p> <pre><code>import Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    &lt;Note /&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Agora, no arquivo <code>src/App.jsx</code> temos:</p> <ul> <li>Linha 1: importa\u00e7\u00e3o do componente <code>Note</code>;</li> <li>Linha 2: quando \u00e9 necess\u00e1rio adicionar algum estilo ao componente n\u00f3s podemos importar arquivos <code>.css</code> para que o estilo definido no arquivo seja aplicado;</li> <li>Linha 4: definindo uma fun\u00e7\u00e3o que ser\u00e1 o componente da nossa aplica\u00e7\u00e3o. Note que ele \u00e9 exportado na linha 10. Isso \u00e9 equivalente ao que fizemos em uma linha no arquivo anterior;</li> <li>Linha 5: o valor de retorno \u00e9 um componente mais complexo; </li> <li>Linha 6: utilizamos o componente criado no outro arquivo. Note como o c\u00f3digo \u00e9 encapsulado. N\u00e3o precisamos saber como uma anota\u00e7\u00e3o \u00e9 representada. Basta sabermos o que esse componente faz, ou seja, ele mostra os dados de uma anota\u00e7\u00e3o. </li> </ul> <p>Criamos um componente como uma fun\u00e7\u00e3o JavaScript que retorna HTML, para usarmos esse componente, ao inv\u00e9s de chamar a fun\u00e7\u00e3o da forma como estamos acostumados <code>Note()</code>, chamamos o componente como se fosse uma tag HTML <code>&lt;Note /&gt;</code>.</p> <p>Programa\u00e7\u00e3o Orientada a Objetos?</p> <p>Uma das grandes vantagens do uso de componentes no React \u00e9 bastante semelhante \u00e0s vantagens de usar classes. Podemos encapsular comportamentos de forma a facilitar modifica\u00e7\u00f5es, debug e testes de unidade. E j\u00e1 que tocamos no assunto, sim, d\u00e1 pra fazer testes de unidade de componentes React!</p> <p>O <code>src/App.jsx</code></p> <p>O arquivo <code>src/App.jsx</code> tamb\u00e9m define um componente! A \u00fanica diferen\u00e7a \u00e9 que esse componente ser\u00e1 pai de todos os outros componentes. Ou seja, todos os componentes que fizerem parte da aplica\u00e7\u00e3o ser\u00e3o criados a partir do componente <code>App</code>.</p> </li> <li> <p>Recarregue a p\u00e1gina para ver o resultado.</p> </li> </ol>"},{"location":"aulas/react/parte-01-componentes/#aprimorando-o-componente-mostrando-uma-anotacao","title":"Aprimorando o componente: mostrando uma anota\u00e7\u00e3o","text":"<p>Bom, o nosso componente <code>Note</code> n\u00e3o faz muita coisa. Vamos melhor\u00e1-lo.</p> <ol> <li>O projeto j\u00e1 vem com um pouco de estilo CSS. Vamos apag\u00e1-lo. Apague todo o conte\u00fado dos arquivos <code>src/App.css</code> e <code>src/index.css</code>.</li> </ol> <p>Modifique o <code>src/components/Note/index.jsx</code>:</p> <pre><code>import \"./index.css\";\n\nexport default function Note() {\n  return (\n    &lt;div className=\"card\"&gt;\n      &lt;h3 className=\"card-title\"&gt;Receita de miojo&lt;/h3&gt;\n      &lt;div className=\"card-content\"&gt;\n        &lt;p&gt;\n          Bata com um martelo antes de abrir o pacote. Misture o tempero,\n          coloque em uma vasilha e aproveite seu snack :)\n        &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Crie tamb\u00e9m o arquivo <code>src/components/Note/index.css</code>  e adicione as classes CSS <code>.card</code>, <code>.card-title</code> e <code>.card-content</code> abaixo:</p> <pre><code>.card{\n    width: 13%;\n    /* height: 110px; */\n    padding: 10px;\n    margin-bottom: 30px;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    align-content: space-between;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n\n.card-title{\n    font-family: 'Permanent Marker', cursive;\n    font-size: large;\n    font-weight: bold;\n}\n\n.card-content{\n    font-family: 'Permanent Marker', cursive;\n    color: #4c4c4c;\n    font-size: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    padding-top: 10px;\n}\n</code></pre> <p>Recarregue a p\u00e1gina para ver o resultado.</p> Componente Note <p>Encapsulamento (de novo)</p> <p>Voc\u00ea se lembra que comentamos l\u00e1 em cima que os componentes ajudam a encapsular o c\u00f3digo? O <code>index.css</code> e o <code>index.jsx</code>, que definem o estilo e a l\u00f3gica do componente est\u00e3o ambos na mesma pasta. Assim, se eu quiser reaproveitar esse componente em outra aplica\u00e7\u00e3o, basta copiar essa pasta. Da mesma forma, se eu n\u00e3o for mais precisar desse componente, basta apagar a pasta.</p> <p>Existem diversas bibliotecas de componentes prontos para serem utilizados. O seu uso facilita muito o desenvolvimento de interfaces, mas \u00e9 importante tomar cuidado ao decidir usar uma biblioteca. Verifique se ela est\u00e1 ativamente em desenvolvimento, se possui suporte, boa documenta\u00e7\u00e3o e uma comunidade ativa.</p>"},{"location":"aulas/react/parte-01-componentes/#importando-as-fontes","title":"Importando as fontes","text":"<p>Precisamos importar os arquivos de fonte de texto. Para isso, abra o arquivo <code>index.html</code> e adicione as seguintes tags dentro do <code>&lt;head&gt;</code>, antes do <code>&lt;title&gt;</code>, por exemplo:</p> <pre><code>&lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css\"\n  integrity=\"sha512-NmLkDIU1C/C88wi324HBc+S2kLhi08PN5GDeUVVVC/BVt/9Izdsc9SVeVfA1UZbY3sHUlDSyRXhCzHfr6hmPPw==\"\n  crossorigin=\"anonymous\"\n/&gt;\n&lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" /&gt;\n&lt;link\n  href=\"https://fonts.googleapis.com/css2?family=Roboto&amp;family=Permanent+Marker&amp;display=swap\"\n  rel=\"stylesheet\"\n/&gt;\n</code></pre>"},{"location":"aulas/react/parte-01-componentes/#customizando-o-componente","title":"Customizando o componente","text":"<p>O nosso componente n\u00e3o \u00e9 muito \u00fatil. Se utilizarmos m\u00faltiplos <code>&lt;Note&gt;</code> teremos o mesmo cart\u00e3o, com o mesmo conte\u00fado, repetido v\u00e1rias vezes. Para definir par\u00e2metros para o nosso componente utilizaremos as props.</p> <p>Queremos utilizar o componente da seguinte maneira. Modifique o seu <code>src/Apps.jsx</code>:</p> <pre><code>import Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Note title=\"Receita de miojo\"&gt;\n        Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque\n        em uma vasilha e aproveite seu snack :)\n      &lt;/Note&gt;\n      &lt;Note title=\"Sorvete de banana\"&gt;\n        Coloque a banana no congelador e espere.\n      &lt;/Note&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> Fragmento &lt; &gt;&lt; / &gt; <p>O <code>&lt;&gt;</code> \u00e9 uma forma de criar um fragmento. Um fragmento \u00e9 uma forma de retornar m\u00faltiplos elementos sem precisar de um elemento pai. No c\u00f3digo acima, se n\u00e3o utiliz\u00e1ssemos o fragmento, o c\u00f3digo n\u00e3o funcionaria, pois o React n\u00e3o permite que um componente retorne mais de um elemento.</p> <p>Ou seja, queremos definir atributos, como no HTML, para o t\u00edtulo e adicionar o conte\u00fado como filho desse componente. Chamamos de filho todos os componentes colocados entre a abertura e fechamento da tag.</p> <p>O React passa todas essas informa\u00e7\u00f5es para o seu componente em um \u00fanico argumento chamado props. Ele \u00e9 um objeto JavaScript a partir do qual podemos acessar cada propriedade separadamente (lembrando que objetos podem ser utilizados como dicion\u00e1rios). Modifique o <code>src/components/Note/index.jsx</code>:</p> <pre><code>import \"./index.css\";\n\nexport default function Note(props) {\n  return (\n    &lt;div className=\"card\"&gt;\n      &lt;h3 className=\"card-title\"&gt;{props.title}&lt;/h3&gt;\n      &lt;div className=\"card-content\"&gt;{props.children}&lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Note que <code>title</code> \u00e9 o nome do atributo que utilizamos no componente no outro arquivo. J\u00e1 o <code>children</code> \u00e9 sempre enviado com esse mesmo nome para o componente e \u00e9 uma lista dos seus filhos.</p> <p>Outro detalhe importante \u00e9 que o <code>props.title</code> e <code>props.children</code> est\u00e3o entre chaves. Esse \u00e9 um recurso do JSX que permite que adicionemos valores do JavaScript nas tags.</p>"},{"location":"aulas/react/parte-01-componentes/#renderizando-multiplos-componentes-a-partir-de-um-array","title":"Renderizando m\u00faltiplos componentes a partir de um array","text":"<p>Vamos avan\u00e7ar mais um passo na nossa interface. Atualmente temos duas anota\u00e7\u00f5es, mas sabemos que essa quantidade \u00e9 vari\u00e1vel. Vamos assumir que temos os dados das anota\u00e7\u00f5es em um array (equivalente a uma lista em python). Para renderizar m\u00faltiplos componentes podemos utilizar o m\u00e9todo <code>map</code>. Altere o seu <code>src/App.jsx</code> para o seguinte:</p> <pre><code>import Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  const notes = [\n    {\n      title: \"Receita de miojo\",\n      content:\n        \"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\",\n    },\n    {\n      title: \"Sorvete de banana\",\n      content: \"Coloque a banana no congelador e espere.\",\n    },\n  ];\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note title={note.title}&gt;{note.content}&lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>A vers\u00e3o acima deve funcionar, mas o console do navegador vai apresentar uma mensagem parecida com essa: <code>index.js:1 Warning: Each child in a list should have a unique \"key\" prop.</code></p> Warning <p>Quando utilizamos o map, o resultado devolvido \u00e9 um array contendo os resultados de cada execu\u00e7\u00e3o da fun\u00e7\u00e3o. Para o React realizar as otimiza\u00e7\u00f5es de renderiza\u00e7\u00e3o \u00e9 necess\u00e1rio que cada elemento desse array possua um atributo <code>key</code> com um valor \u00fanico. Adicione ent\u00e3o o <code>key</code> no componente <code>Note</code>:</p> <pre><code>import Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  const notes = [\n    {\n      id: 1,\n      title: \"Receita de miojo\",\n      content:\n        \"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\",\n    },\n    {\n      id: 2,\n      title: \"Sorvete de banana\",\n      content: \"Coloque a banana no congelador e espere.\",\n    },\n  ];\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Voc\u00ea poderia utilizar qualquer string, desde que fosse \u00fanica. Vamos utilizar o padr\u00e3o <code>\"note__1\"</code>, <code>\"note__2\"</code>, <code>\"note__3\"</code>, etc.</p>"},{"location":"aulas/react/parte-01-componentes/#recebendo-dados-de-uma-api","title":"Recebendo dados de uma API","text":"<p>Para continuar v\u00e1 para a pr\u00f3xima se\u00e7\u00e3o:</p> <p>Recebendo dados</p>"},{"location":"aulas/react/parte-02-recebendo-dados/","title":"Recebendo Dados","text":"<p>Os dados ainda est\u00e3o fixos. No mundo real, os dados s\u00e3o din\u00e2micos e mudam com frequ\u00eancia. Para isso, precisamos de um servidor que forne\u00e7a os dados. Nas aulas anteriores, aprendemos como criar APIs REST com Flask. Agora, vamos entender como conectar nossa aplica\u00e7\u00e3o React a um servidor REST.</p> <p>Primeiro, fa\u00e7a o download do servidor Flask aqui. Execute o servidor em um terminal e deixe-o rodando. O servidor deve estar rodando na porta 8000.</p> <p>Agora s\u00f3 precisamos implementar o cliente que se conectar\u00e1 com ele. Para isso, vamos utilizar o axios. Comece instalando o axios no nosso projeto. No terminal, dentro da pasta do projeto (notes-frontend), rode o comando a seguir: <pre><code>    npm i axios\n</code></pre> Agora modifique o seu c\u00f3digo do <code>src/App.js</code> para utilizar o axios para realizar uma requisi\u00e7\u00e3o GET para o servidor REST que acabamos de criar.:</p> <pre><code>import axios from \"axios\";\nimport Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  const notes = [\n    {\n      id: 1,\n      title: \"Receita de miojo\",\n      content:\n        \"Bata com um martelo antes de abrir o pacote. Misture o tempero, coloque em uma vasilha e aproveite seu snack :)\",\n    },\n    {\n      id: 2,\n      title: \"Sorvete de banana\",\n      content: \"Coloque a banana no congelador e espere.\",\n    },\n  ];\n  axios\n    .get(\"http://localhost:8000/api/notes/\")\n    .then((res) =&gt; console.log(res));\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Importante!</p> <p>Antes de testar, lembre-se de colocar o servidor Flask para rodar.</p> <p>Importante!</p> <p>Ao tentar executar o c\u00f3digo acima, um erro semelhante a esse deve aparecer no console do navegador:</p> <p> Erro de CORS </p> <p>Esse erro ocorre porque o navegador est\u00e1 tentando te proteger. Ele n\u00e3o far\u00e1 requisi\u00e7\u00f5es para servidores que n\u00e3o aceitam explicitamente requisi\u00e7\u00f5es de outros endere\u00e7os. O nosso frontend est\u00e1 rodando em <code>localhost:5173</code> e o backend em <code>localhost:8000</code>. Eles s\u00e3o endere\u00e7os diferentes, ent\u00e3o a requisi\u00e7\u00e3o \u00e9 bloqueada.</p> <p>Para esse tipo de requisi\u00e7\u00e3o ser desbloqueada, precisamos adicionar o header CORS, indicando que aceitamos essa requisi\u00e7\u00e3o:</p> <p>No projeto Flask, adicione a biblioteca <code>flask-cors</code>:</p> <pre><code>pip install flask-cors\n</code></pre> <p>Altere o in\u00edcio do arquivo <code>app.py</code> para adicionar as duas linhas abaixo:</p> <pre><code>from flask import Flask, jsonify, request\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n</code></pre> <p>O <code>CORS(app)</code> habilita o CORS para todas as rotas do servidor. Isso significa que qualquer origem pode acessar o servidor. Isso \u00e9 seguro para o nosso projeto, mas n\u00e3o \u00e9 recomendado para produ\u00e7\u00e3o. Para produ\u00e7\u00e3o, voc\u00ea deve configurar o CORS para aceitar apenas requisi\u00e7\u00f5es de endere\u00e7os espec\u00edficos (nosso projeto React, por exemplo).</p> <p>Depois de realizar as adapta\u00e7\u00f5es no servidor, seu c\u00f3digo deve funcionar e a requisi\u00e7\u00e3o devolve a lista de anota\u00e7\u00f5es do servidor.</p>"},{"location":"aulas/react/parte-02-recebendo-dados/#guardando-os-dados","title":"Guardando os dados","text":"<p>O app j\u00e1 \u00e9 capaz de fazer a requisi\u00e7\u00e3o e receber os dados, mas ainda n\u00e3o mostra nada diferente na tela. Poder\u00edamos simplesmente guardar os dados em uma vari\u00e1vel e utiliz\u00e1-la para renderizar os componentes. Pensamos em algo assim:</p> <pre><code>import axios from \"axios\";\nimport Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n\n  const notes = axios.get(\"http://localhost:8000/api/notes/\").then((res) =&gt; setNotes(res.data));\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Erro</p> <p>O c\u00f3digo acima n\u00e3o funciona.  Como a fun\u00e7\u00e3o <code>axios.get</code> \u00e9 ass\u00edncrona, a vari\u00e1vel <code>notes</code> n\u00e3o \u00e9 preenchida com os dados da requisi\u00e7\u00e3o.</p> <p>O problema \u00e9 que a requisi\u00e7\u00e3o \u00e9 feita em uma chamada ass\u00edncrona, assim, n\u00e3o sabemos quando o resultado ser\u00e1 obtido. Como o componente \u00e9 uma fun\u00e7\u00e3o, ele n\u00e3o pode armazenar estado como um objeto. Ela \u00e9 executada para gerar a tela e termina a execu\u00e7\u00e3o.</p> <p>Por isso foram criados os chamados hooks, que permitem o armazenamento de estado em componentes funcionais. Vamos utilizar o <code>useState</code> para armazenar estado. Modifique o arquivo <code>src/App.jsx</code>:</p> <pre><code>import axios from \"axios\";\nimport { useState } from \"react\";\nimport Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]); // Remova o array de notes que existia na vers\u00e3o anterior\n\n  axios.get(\"http://localhost:8000/api/notes/\").then((res) =&gt; setNotes(res.data));\n\n  console.log(notes);\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>O <code>useState</code> devolve o valor do estado atual e uma fun\u00e7\u00e3o que permite modificar o estado. Ele tamb\u00e9m recebe o valor inicial do estado, no caso um array vazio.</p> <p>Ao executar o c\u00f3digo acima, o console do navegador deve mostrar o JSON de anota\u00e7\u00f5es diversas vezes (recomendo que voc\u00ea feche a aba at\u00e9 implementar o resto do c\u00f3digo). </p> Loop infinito <p>O que acontece \u00e9 que toda vez que o estado muda, o componente \u00e9 renderizado novamente, ou seja, a fun\u00e7\u00e3o \u00e9 re-executada. Assim, quando a requisi\u00e7\u00e3o \u00e9 finalizada, os dados s\u00e3o utilizados para atualizar a vari\u00e1vel <code>notes</code> do estado. Quando isso ocorre, o componente \u00e9 renderizado novamente. Isso faz com que uma nova requisi\u00e7\u00e3o ocorra, que por sua vez realizar\u00e1 outra atualiza\u00e7\u00e3o do estado, que  far\u00e1 com que uma nova requisi\u00e7\u00e3o ocorra, que por sua vez... enfim, voc\u00ea acabou de implementar a vers\u00e3o de componentes React de um loop infinito!</p> Loop infinito <p>Queremos realizar a requisi\u00e7\u00e3o apenas uma vez. Para isso, existe um outro hook chamado <code>useEffect</code>, que permite definir algumas condi\u00e7\u00f5es para quando ele deve ser re-executado. Modifique novamente o arquivo <code>src/App.js</code>:</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }, []);\n\n  console.log(notes);\n\n  return (\n    &lt;&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>O primeiro argumento do <code>useEffect</code> \u00e9 uma fun\u00e7\u00e3o. Essa fun\u00e7\u00e3o ser\u00e1 executada quando o conte\u00fado do segundo argumento mudar. Quando utilizamos um array vazio no segundo argumento, a fun\u00e7\u00e3o \u00e9 executada apenas uma vez.</p>"},{"location":"aulas/react/parte-02-recebendo-dados/#carregando-imagens-e-outros-arquivos-estaticos","title":"Carregando imagens e outros arquivos est\u00e1ticos","text":"<p>Para continuar, avance para a pr\u00f3xima se\u00e7\u00e3o: </p> <p>Carregando imagens e arquivos est\u00e1ticos</p>"},{"location":"aulas/react/parte-03-carregando-estaticos/","title":"Carregando imagens e arquivos est\u00e1ticos","text":"<p>Al\u00e9m de JavaScript e CSS, a nossa interface tamb\u00e9m precisa de algumas imagens. Elas podem ser adicionadas \u00e0 pasta <code>public</code>. Fa\u00e7a o download da imagem do logo do Get-it e salve-o na pasta <code>public</code>. Agora a imagem estar\u00e1 dispon\u00edvel na rota <code>/logo-geti.png</code>. </p> <p>Vamos criar um novo componente para o <code>AppBar</code>. Crie o arquivo <code>src/components/AppBar/index.jsx</code> adicione o seguinte conte\u00fado:</p> <pre><code>import \"./index.css\";\n\nexport default function AppBar() {\n    return (\n        &lt;div className=\"appbar\"&gt;\n            &lt;img src=\"/logo-getit.png\" className=\"logo\" /&gt;\n            &lt;span className=\"subtitle\"&gt;Como o Post-it, mas com outro verbo&lt;/span&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>Crie tamb\u00e9m o arquivo <code>src/components/AppBar/index.css</code> e adicione as classes CSS <code>appbar</code>, <code>logo</code> e <code>subtitle</code> abaixo:</p> <pre><code>.appbar {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 0 0 2rem;\n  padding: 10px 5px;\n  background-color: #f7d736;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\n}\n\n.logo {\n  height: 50px;\n  margin-right: 1rem;\n}\n\n.subtitle {\n  color: #2c2c2c;\n}\n</code></pre> <p>Em seguida, modifique o arquivo src/App.jsx e adicione o componente <code>AppBar</code> no <code>App</code>:</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      {notes.map((note) =&gt; (\n        &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n          {note.content}\n        &lt;/Note&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"aulas/react/parte-03-carregando-estaticos/#adicionando-mais-classes-css","title":"Adicionando mais classes CSS","text":"<p>Vamos adicionar a classe <code>card-container</code> para que as notas fiquem organizadas. Al\u00e9m disso, vamos adicionar tamb\u00e9m a classe <code>container</code>.</p> <p>Altere o arquivo <code>src/App.css</code> adicionando as classes CSS <code>container</code> e <code>card-container</code> abaixo:</p> <pre><code>.container {\n  padding: 0 50px;\n}\n\n.card-container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  place-content: space-evenly;\n}\n</code></pre> <p>Al\u00e9m disso, atualize o arquivo <code>src/App.jsx</code>:</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"aulas/react/parte-03-carregando-estaticos/#implementando-a-criacao-de-anotacoes","title":"Implementando a Cria\u00e7\u00e3o de Anota\u00e7\u00f5es","text":"<p>Para continuar, avance para a pr\u00f3xima etapa.</p> <p>Implementando a Cria\u00e7\u00e3o de Anota\u00e7\u00f5es</p>"},{"location":"aulas/react/parte-04-criacao-notas/","title":"Implementando a Cria\u00e7\u00e3o de Anota\u00e7\u00f5es","text":"<p>Vamos criar um componente para o formul\u00e1rio de cria\u00e7\u00e3o.</p> <ol> <li>Crie o arquivo <code>src/components/Formulario/index.jsx</code> com o seguinte conte\u00fado:</li> </ol> <pre><code>import \"./index.css\";\n\nexport default function Formulario() {\n\n    return (\n        &lt;form className=\"form-card\"&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre> <p>Crie o arquivo <code>src/components/Formulario/index.css</code> e coloque o estilo CSS abaixo:</p> <pre><code>.form-card {\n    max-width: 500px;\n    display: flex;\n    flex-direction: column;\n    margin: 2rem auto;\n    padding: 10px;\n    box-shadow: 0 10px 20px rgb(0 0 0 / 19%), 0 6px 6px rgb(0 0 0 / 23%);\n    border-radius: 5px;\n}\n\n.form-card input,\n.form-card textarea {\n    font-family: \"Roboto\", sans-serif;\n    border: none;\n    outline: none;\n    resize: none;\n}\n\n.form-card-title {\n    font-weight: bold;\n    line-height: 1.2;\n    margin-bottom: 1rem;\n    font-size: 1.2rem;\n}\n\n.btn {\n    position: relative;\n    display: block;\n    padding: 10px 15px;\n\n    overflow: hidden;\n\n    border-width: 0;\n    outline: none;\n    border-radius: 2px;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.6);\n\n    background-color: #f7d736;\n\n    transition: background-color 0.3s;\n}\n\n.btn&gt;* {\n    position: relative;\n}\n\n.btn:before {\n    content: \"\";\n\n    position: absolute;\n    top: 50%;\n    left: 50%;\n\n    display: block;\n    width: 0;\n    padding-top: 0;\n\n    border-radius: 100%;\n\n    background-color: rgba(236, 240, 241, 0.3);\n\n    -webkit-transform: translate(-50%, -50%);\n    -moz-transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    -o-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n}\n\n.btn:active:before {\n    width: 120%;\n    padding-top: 120%;\n\n    transition: width 0.2s ease-out, padding-top 0.2s ease-out;\n}\n</code></pre>"},{"location":"aulas/react/parte-04-criacao-notas/#adicionando-componente-formulario-no-app","title":"Adicionando componente Formulario no App","text":"<p>Precisamos adicionar o componente <code>Formulario</code> no <code>src/App.jsx</code>. Podemos pensar no componente como uma fun\u00e7\u00e3o javascript que retorna html. Para utilizar um componente, basta colocar o nome dele entre tags, como se fosse uma tag HTML. Veja o exemplo abaixo:</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport Formulario from \"./components/Formulario\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;Formulario /&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"aulas/react/parte-04-criacao-notas/#armazenado-valor-digitado-pelo-usuario-nos-inputs","title":"Armazenado valor digitado pelo usu\u00e1rio nos Inputs","text":"<p>Vamos armazenar os valores digitados pelo usu\u00e1rio nas vari\u00e1veis <code>titulo</code> e <code>conteudo</code>. Para isso, vamos criar duas vari\u00e1veis utilizando <code>useState</code> do React no arquivo <code>src/components/Formulario/index.jsx</code>.</p> <pre><code>import { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario() {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    return (\n        &lt;form className=\"form-card\" method=\"post\"&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre> <p>As vari\u00e1veis inicialmente come\u00e7am como <code>strings</code> vazias <code>\"\"</code>. Conforme o usu\u00e1rio digita algum valor nos campos inputs, o valor das vari\u00e1veis \u00e9 atualizado. Para isso podemos utilizar o atributo <code>onChange</code> do HTML, veja o exemplo abaixo:</p> <p><pre><code>import { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario() {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    return (\n        &lt;form className=\"form-card\" method=\"post\"&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n                onChange={(event) =&gt; console.log(event.target.value)}\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre> Sempre que o usu\u00e1rio interagir com o campo <code>input</code> o evento <code>onChange</code> chamar\u00e1 a fun\u00e7\u00e3o <code>(event) =&gt; console.log(event.target.value)</code>. O par\u00e2metro <code>event</code> \u00e9 o evento que ocorreu, e <code>event.target.value</code> \u00e9 o valor digitado pelo usu\u00e1rio. Vamos fazer um teste para verificar se o valor digitado est\u00e1 sendo armazenado corretamente. Digite algo no campo <code>input</code> e veja o valor no console do navegador.</p> Valor digitado no console <p>Vamos alterar a fun\u00e7\u00e3o <code>onChange</code> para armazenar o valor digitado pelo usu\u00e1rio na vari\u00e1vel <code>titulo</code>. Para isso, vamos utilizar a fun\u00e7\u00e3o <code>setTitulo</code> passando o valor digitado pelo usu\u00e1rio <code>event.target.value</code>.</p> <pre><code>import { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario() {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    return (\n        &lt;form className=\"form-card\" method=\"post\"&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n                onChange={(event) =&gt; setTitulo(event.target.value)}\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n                onChange={(event) =&gt; setContent(event.target.value)}\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre>"},{"location":"aulas/react/parte-04-criacao-notas/#enviar-os-dados-para-o-servidor","title":"Enviar os dados para o servidor","text":"<p>Agora vamos enviar os dados para o servidor. Para isso, vamos utilizar o atributo <code>onSubmit</code> do HTML. Veja o exemplo abaixo:</p> <p>O comando event.preventDefault() previne que o formul\u00e1rio seja enviado para o servidor. Assim, podemos enviar os dados utilizando o axios.</p> <pre><code>import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario() {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    const criarNote = (event) =&gt; {\n        event.preventDefault();\n\n        const data = {\n            \"title\": titulo,\n            \"content\": content\n        }\n\n        axios\n            .post(\"http://localhost:8000/api/notes/\", data)\n            .catch((error) =&gt; console.log(error));\n    }\n\n    return (\n        &lt;form className=\"form-card\" onSubmit={criarNote}&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n                onChange={(event) =&gt; setTitulo(event.target.value)}\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n                onChange={(event) =&gt; setContent(event.target.value)}\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre> <p>Tente criar uma nova anota\u00e7\u00e3o!  Parece que n\u00e3o est\u00e1 funcionando, certo? Se atualizar a p\u00e1gina, perceber\u00e1 que anota\u00e7\u00e3o foi criada, por\u00e9m a p\u00e1gina n\u00e3o foi atualizada. Vamos resolver isso!</p>"},{"location":"aulas/react/parte-04-criacao-notas/#atualizando-a-lista-de-anotacoes","title":"Atualizando a lista de anota\u00e7\u00f5es","text":"<p>Agora que j\u00e1 enviamos os dados para o servidor, precisamos atualizar a lista de anota\u00e7\u00f5es. Se olharmos o c\u00f3digo do arquivo <code>src/App.jsx</code> queremos executar o c\u00f3digo contido nas linhas marcadas abaixo, pois queremos atualizar a lista de anota\u00e7\u00f5es.</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport Formulario from \"./components/Formulario\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;Formulario /&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Para isso, vamos mover esse trecho de c\u00f3digo para dentro de uma fun\u00e7\u00e3o, para que possamos enviar essa fun\u00e7\u00e3o para o componente <code>Formulario</code>.</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport Formulario from \"./components/Formulario\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  const carregaNotas = () =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }\n\n  useEffect(() =&gt; {\n    carregaNotas();\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;Formulario /&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Vamos enviar a fun\u00e7\u00e3o <code>carregaNotas</code> para o componente <code>Formulario</code> utilizando o nome <code>loadNotes</code>.  Lembra que os componentes s\u00e3o fun\u00e7\u00f5es javascript? Em alguns casos, vamos querer passar um argumento para a fun\u00e7\u00e3o. </p> <p>Em nosso casso, estamos querendo passar a fun\u00e7\u00e3o <code>carregaNotas</code> como argumento para a fun\u00e7\u00e3o/componente <code>Formulario</code>. </p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport Formulario from \"./components/Formulario\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  const carregaNotas = () =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }\n\n  useEffect(() =&gt; {\n    carregaNotas();\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;Formulario loadNotes={carregaNotas}/&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"aulas/react/parte-04-criacao-notas/#chamando-a-funcao-carreganotas-no-componente-formulario","title":"Chamando a fun\u00e7\u00e3o <code>carregaNotas</code> no componente <code>Formulario</code>","text":"<p>O componente <code>Formulario</code> recebe o argumento <code>props</code> que cont\u00e9m todas as informa\u00e7\u00f5es enviadas para o componente. Como enviamos a fun\u00e7\u00e3o <code>carregaNotas</code> com o nome de <code>loadNotes</code>, para chamar a fun\u00e7\u00e3o <code>carregaNotas</code> dentro do componente <code>Formulario</code> utilizamos o comando <code>props.loadNotes()</code>.</p> <pre><code>import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario(props) {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    const criarNote = (event) =&gt; {\n        event.preventDefault();\n\n        const data = {\n            \"title\": titulo,\n            \"content\": content\n        }\n\n        axios\n            .post(\"http://localhost:8000/api/notes/\", data)\n            .then((response) =&gt; props.loadNotes())\n            .catch((error) =&gt; console.log(error));\n    }\n\n    return (\n        &lt;form className=\"form-card\" onSubmit={criarNote}&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n                onChange={(event) =&gt; setTitulo(event.target.value)}\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n                onChange={(event) =&gt; setContent(event.target.value)}\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre>"},{"location":"aulas/react/parte-04-criacao-notas/#limpando-os-valores-dos-campos-do-formulario","title":"Limpando os valores dos campos do Formul\u00e1rio","text":"<p>Ao criar uma nova anota\u00e7\u00e3o, os dados est\u00e3o sendo salvos no banco de dados pela API Django REST e a p\u00e1gina \u00e9 atualizada com a nota anota\u00e7\u00e3o aparecendo na p\u00e1gina. Por\u00e9m, os campos do formul\u00e1rio n\u00e3o est\u00e3o sendo limpos. Para limpar os campos do formul\u00e1rio, basta atualizar as vari\u00e1veis <code>titulo</code> e <code>content</code> com o valor <code>\"\"</code> (string vazia). Al\u00e9m disso, \u00e9 necess\u00e1rio utilizar essas vari\u00e1veis para definir o valor dos campos do formul\u00e1rio. Veja o exemplo abaixo:</p> <pre><code>import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./index.css\";\n\nexport default function Formulario(props) {\n    const [titulo, setTitulo] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n\n    const criarNote = (event) =&gt; {\n        event.preventDefault();\n\n        const data = {\n            \"title\": titulo,\n            \"content\": content\n        }\n\n        axios\n            .post(\"http://localhost:8000/api/notes/\", data)\n            .then((response) =&gt; {\n                props.loadNotes();\n                setTitulo(\"\");\n                setContent(\"\");\n            })\n            .catch((error) =&gt; console.log(error));\n    }\n\n    return (\n        &lt;form className=\"form-card\" onSubmit={criarNote}&gt;\n            &lt;input\n                className=\"form-card-title\"\n                type=\"text\"\n                name=\"titulo\"\n                placeholder=\"T\u00edtulo\"\n                onChange={(event) =&gt; setTitulo(event.target.value)}\n                value={titulo}\n            /&gt;\n            &lt;textarea\n                className=\"autoresize\"\n                name=\"detalhes\"\n                placeholder=\"Digite o conte\u00fado...\"\n                onChange={(event) =&gt; setContent(event.target.value)}\n                value={content}\n            &gt;&lt;/textarea&gt;\n            &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n        &lt;/form&gt;\n    );\n}\n</code></pre> <p>Deletando uma anota\u00e7\u00e3o</p> <p>Implemente a funcionalidade de deletar uma anota\u00e7\u00e3o. Para isso, crie um bot\u00e3o dentro do componente <code>Note</code> que ao ser clicado, envie uma requisi\u00e7\u00e3o para a API Django REST para deletar a anota\u00e7\u00e3o. Ap\u00f3s deletar a anota\u00e7\u00e3o, atualize a lista de anota\u00e7\u00f5es.</p>"},{"location":"aulas/react/parte-04-criacao-notas/#implementando-a-edicao-de-anotacoes","title":"Implementando a Edi\u00e7\u00e3o de Anota\u00e7\u00f5es","text":"<p>Para continuar, avance para a pr\u00f3xima etapa.</p> <p>Implementando a edi\u00e7\u00e3o de Anota\u00e7\u00f5es</p>"},{"location":"aulas/react/parte-05-editando-anotacao/","title":"Implementando a edi\u00e7\u00e3o de Anota\u00e7\u00f5es","text":"<p>Para implementar a funcionalidade de edi\u00e7\u00e3o de anota\u00e7\u00f5es, vamos precisar simular a navega\u00e7\u00e3o entre p\u00e1ginas. Para isso, vamos utilizar o <code>react-router-dom</code>.</p>"},{"location":"aulas/react/parte-05-editando-anotacao/#configuracao-inicial","title":"Configura\u00e7\u00e3o Inicial","text":"<p>Para come\u00e7ar, instale o <code>react-router-dom</code> com o comando a seguir no terminal, dentro das pasta do projeto (notes-frontend):</p> <p><pre><code>npm install react-router-dom\n</code></pre> Vamos utilizar o <code>react-router-dom</code> para criar um sistema de rotas para a nossa aplica\u00e7\u00e3o. Esta biblioteca nos permite definir rotas e renderizar componentes espec\u00edficos para cada rota. Existem v\u00e1rios tipos de roteadores, mas vamos utilizar o <code>BrowserRouter</code> para criar um roteador que utiliza a API de hist\u00f3rico do navegador. </p> <ul> <li>Abra o arquivo <code>src/main.jsx</code> e adicione as seguintes linhas de c\u00f3digo:</li> </ul> <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\nimport App from './App.jsx'\nimport './index.css'\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;App /&gt;,\n  },\n]);\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <p>A princ\u00edpio, estamos definindo que ao acessar a rota <code>/</code>, queremos renderizar o componente <code>App</code>. Nossa aplica\u00e7\u00e3o deve estar funcionando normalmente, sem altera\u00e7\u00f5es vis\u00edveis.</p>"},{"location":"aulas/react/parte-05-editando-anotacao/#criando-um-componente-para-a-edicao-de-anotacoes","title":"Criando um componente para a edi\u00e7\u00e3o de anota\u00e7\u00f5es","text":"<p>Vamos criar um componente novo para a p\u00e1gina de edi\u00e7\u00e3o. Crie um arquivo <code>src/components/Editar/index.jsx</code> com o seguinte conte\u00fado:</p> <pre><code>export default function Editar() {\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;main className=\"container\"&gt;\n                &lt;form className=\"form-card\"&gt;\n                    &lt;input\n                        className=\"form-card-title\"\n                        type=\"text\"\n                        name=\"titulo\"\n                    /&gt;\n                    &lt;textarea\n                        className=\"autoresize\"\n                        name=\"detalhes\"\n                    &gt;&lt;/textarea&gt;\n                    &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/main &gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>O conte\u00fado \u00e9 basicamente o formul\u00e1rio que j\u00e1 t\u00ednhamos na p\u00e1gina principal. Por\u00e9m vamos utiliz\u00e1-lo para editar uma anota\u00e7\u00e3o. Copie o arquivo de estilo <code>src/components/Formulario/index.css</code> para <code>src/components/Editar/index.css</code>.</p>"},{"location":"aulas/react/parte-05-editando-anotacao/#definindo-uma-nova-rota","title":"Definindo uma nova rota","text":"<p>Agora vamos definir uma nova rota para a p\u00e1gina de edi\u00e7\u00e3o. Queremos definir a rota <code>/edit/:noteId</code> para que possamos editar uma anota\u00e7\u00e3o espec\u00edfica. Para isso, vamos atualizar o arquivo <code>src/main.jsx</code>:</p> <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\nimport App from './App.jsx'\nimport Editar from './components/Editar'\nimport './index.css'\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;App /&gt;,\n  },\n  {\n    path: \"edit/:noteId\",\n    element: &lt;Editar /&gt;,\n  },\n]);\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre>"},{"location":"aulas/react/parte-05-editando-anotacao/#navegando-para-a-pagina-de-edicao","title":"Navegando para a p\u00e1gina de edi\u00e7\u00e3o","text":"<p>Vamos criar um link para navegar para a p\u00e1gina de edi\u00e7\u00e3o. N\u00e3o vamos utilizar a tag html <code>&lt;a&gt;</code>, pois ao utilizar o elemento <code>a</code> o navegador ir\u00e1 recarregar a p\u00e1gina. N\u00f3s n\u00e3o queremos isso, queremos apenas navegar entre as p\u00e1ginas utilizando os recursos do React. Para isso, vamos utilizar o componente <code>Link</code> do <code>react-router-dom</code>. </p> <p>Vamos atualizar o arquivo <code>src/components/Note/index.jsx</code>:</p> <p><pre><code>import { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nexport default function Note(props) {\n    return (\n        &lt;div className=\"card\"&gt;\n            &lt;h3 className=\"card-title\"&gt;{props.title}&lt;/h3&gt;\n            &lt;Link to={`edit/${props.id}`}&gt;\u270f\ufe0f&lt;/Link&gt;\n            &lt;div className=\"card-content\"&gt;{props.children}&lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> Agora, ao clicar no bot\u00e3o de editar, vamos navegar para a p\u00e1gina de edi\u00e7\u00e3o atrav\u00e9s da rota <code>edit/noteID</code>.</p>"},{"location":"aulas/react/parte-05-editando-anotacao/#envindo-o-id-da-anotacao-para-a-pagina-de-edicao","title":"Envindo o ID da anota\u00e7\u00e3o para a p\u00e1gina de edi\u00e7\u00e3o","text":"<p>Vamos voltar para o arquivo <code>src/App.jsx</code> e adicionar um novo atributo <code>id</code> no componente <code>Note</code>:</p> <pre><code>import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport AppBar from \"./components/AppBar\";\nimport Formulario from \"./components/Formulario\";\nimport \"./App.css\";\n\nfunction App() {\n  const [notes, setNotes] = useState([]);\n\n  const carregaNotas = () =&gt; {\n    axios\n      .get(\"http://localhost:8000/api/notes/\")\n      .then((res) =&gt; setNotes(res.data));\n  }\n\n  useEffect(() =&gt; {\n    carregaNotas();\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;AppBar /&gt;\n      &lt;main className=\"container\"&gt;\n        &lt;Formulario loadNotes={carregaNotas} /&gt;\n        &lt;div className=\"card-container\"&gt;\n          {notes.map((note) =&gt; (\n            &lt;Note key={`note__${note.id}`} id={note.id} title={note.title}&gt;\n              {note.content}\n            &lt;/Note&gt;\n          ))}\n        &lt;/div&gt;\n      &lt;/main&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"aulas/react/parte-05-editando-anotacao/#obtendo-o-id-da-anotacao","title":"Obtendo o ID da anota\u00e7\u00e3o","text":"<p>Ao acessar a p\u00e1gina de edi\u00e7\u00e3o, precisamos obter o ID da anota\u00e7\u00e3o da rota e fazer uma requisi\u00e7\u00e3o para obter os dados da anota\u00e7\u00e3o. O react-router-dom nos fornece uma ferramenta chamada loader que nos permite acessar os par\u00e2metros da rota e carregar os dados necess\u00e1rios. </p> <p>Para isso, vamos importar o hook <code>useLoaderData</code> do <code>react-router-dom</code> e implementar uma fun\u00e7\u00e3o que receber\u00e1 o ID da anota\u00e7\u00e3o informado na rota e far\u00e1 uma requisi\u00e7\u00e3o para obter os dados da anota\u00e7\u00e3o.</p> <p>Na linha 13</p> <pre><code>import axios from \"axios\";\nimport { useLoaderData } from \"react-router-dom\";\nimport AppBar from \"../AppBar\";\n\nexport async function loader({ params }) {\n    const note = await axios\n                        .get(`http://localhost:8000/api/notes/${params.noteId}/`)\n                        .then((response) =&gt; response.data)\n    return { note };\n}\n\nexport default function Editar() {\n\n    return (\n        &lt;&gt;\n        &lt;AppBar /&gt;\n        &lt;main className=\"container\"&gt;\n            &lt;form className=\"form-card\"&gt;\n                &lt;input\n                    className=\"form-card-title\"\n                    type=\"text\"\n                    name=\"titulo\"\n                /&gt;\n                &lt;textarea\n                    className=\"autoresize\"\n                    name=\"detalhes\"\n                &gt;&lt;/textarea&gt;\n                &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/main&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"aulas/react/parte-05-editando-anotacao/#usando-a-funcao-loader","title":"Usando a fun\u00e7\u00e3o loader","text":"<p>Definimos a fun\u00e7\u00e3o <code>loader</code>, mas precisamos realizar uma configura\u00e7\u00e3o para que ao acessar a rota <code>/edit/:noteId</code>, a fun\u00e7\u00e3o loader seja executada. Para isso, vamos atualizar o arquivo <code>src/main.jsx</code>:</p> <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\nimport App from './App.jsx'\nimport Editar, { loader as noteLoader} from './components/Editar'\nimport './index.css'\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;App /&gt;,\n  },\n  {\n    path: \"edit/:noteId\",\n    element: &lt;Editar /&gt;,\n    loader: noteLoader,\n  },\n]);\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  &lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n  &lt;/React.StrictMode&gt;,\n)\n</code></pre> <p>Estamos importando a fun\u00e7\u00e3o <code>loader</code> do arquivo <code>Editar</code> e definindo que ela deve ser executada ao acessar a rota <code>edit/:noteId</code>.</p> <p>Voltando ao arquivo <code>src/components/Editar/index.jsx</code>, vamos utilizar o hook <code>useLoaderData</code> que chamar\u00e1 a fun\u00e7\u00e3o <code>loader</code> e vamos armazenar o retorno da fun\u00e7\u00e3o em uma vari\u00e1vel <code>note</code>.</p> <pre><code>import axios from \"axios\";\nimport { useLoaderData } from \"react-router-dom\";\nimport AppBar from \"../AppBar\";\n\nexport async function loader({ params }) {\n    const note = await axios\n                        .get(`http://localhost:8000/api/notes/${params.noteId}/`)\n                        .then((response) =&gt; response.data)\n    return { note };\n}\n\nexport default function Editar() {\n    const { note } = useLoaderData();\n    return (\n        &lt;&gt;\n        &lt;AppBar /&gt;\n        &lt;main className=\"container\"&gt;\n            &lt;form className=\"form-card\"&gt;\n                &lt;input\n                    className=\"form-card-title\"\n                    type=\"text\"\n                    name=\"titulo\"\n                /&gt;\n                &lt;textarea\n                    className=\"autoresize\"\n                    name=\"detalhes\"\n                &gt;&lt;/textarea&gt;\n                &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/main&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"aulas/react/parte-05-editando-anotacao/#preenchendo-o-formulario-com-os-dados-da-anotacao","title":"Preenchendo o formul\u00e1rio com os dados da anota\u00e7\u00e3o","text":"<p>Agora que temos realizamos a requisi\u00e7\u00e3o e armazenamos os dados da anota\u00e7\u00e3o na vari\u00e1vel <code>note</code>, vamos preencher o formul\u00e1rio com os dados da anota\u00e7\u00e3o. </p> <pre><code>import axios from \"axios\";\nimport { useLoaderData } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport AppBar from \"../AppBar\";\n\nexport async function loader({ params }) {\n    const note = await axios\n                        .get(`http://localhost:8000/api/notes/${params.noteId}/`)\n                        .then((response) =&gt; response.data)\n    return { note };\n}\n\nexport default function Editar() {\n    const { note } = useLoaderData();\n    const [title, setTitle] = useState(note.title);\n    const [content, setContent] = useState(note.content);\n\n    return (\n        &lt;&gt;\n        &lt;AppBar /&gt;\n        &lt;main className=\"container\"&gt;\n            &lt;form className=\"form-card\" onSubmit={salvarNota}&gt;\n                &lt;input\n                    className=\"form-card-title\"\n                    type=\"text\"\n                    name=\"titulo\"\n                    value={title}\n                /&gt;\n                &lt;textarea\n                    className=\"autoresize\"\n                    name=\"detalhes\"\n                    value={content}\n                &gt;&lt;/textarea&gt;\n                &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/main&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> <p>Ao acessar a p\u00e1gina de edi\u00e7\u00e3o, o formul\u00e1rio ser\u00e1 preenchido com os dados da anota\u00e7\u00e3o.</p> <p>Exerc\u00edcio</p> <p>Assim como fizemos na p\u00e1gina de cria\u00e7\u00e3o, vamos implementar a fun\u00e7\u00e3o <code>salvarNota</code> que ser\u00e1 respons\u00e1vel por enviar os dados da anota\u00e7\u00e3o para a API.</p> <p>Agora fica por sua conta, implemente as etapas a seguir:</p> <ul> <li>Quando os campos do formul\u00e1rio forem alterados, os estados <code>title</code> e <code>content</code> devem ser atualizados.</li> <li>Implemente a fun\u00e7\u00e3o <code>salvarNota</code> que ser\u00e1 respons\u00e1vel por enviar os dados da anota\u00e7\u00e3o para a API.</li> <li>Ao clicar no bot\u00e3o de salvar, a fun\u00e7\u00e3o <code>salvarNota</code> deve ser chamada.</li> <li>Ap\u00f3s salvar a anota\u00e7\u00e3o, o usu\u00e1rio deve ser redirecionado para a p\u00e1gina inicial. Para esta etapa, continue lendo a pr\u00f3xima se\u00e7\u00e3o.</li> </ul>"},{"location":"aulas/react/parte-05-editando-anotacao/#redirecionando-para-a-pagina-inicial","title":"Redirecionando para a p\u00e1gina inicial","text":"<p>Ao finalizar a edi\u00e7\u00e3o da anota\u00e7\u00e3o, a nota deve estar sendo salva, por\u00e9m o usu\u00e1rio n\u00e3o \u00e9 redirecionado para a p\u00e1gina inicial. Para isso, vamos utilizar a ferramenta <code>useNavigate</code> do <code>react-router-dom</code>, este recurso nos permite navegar entre as p\u00e1ginas da aplica\u00e7\u00e3o.</p> <p>No arquivo <code>src/components/Editar/index.jsx</code>: </p> <ul> <li>Importe o hook <code>useNavigate</code>;</li> <li>Crie uma vari\u00e1vel <code>navigate</code> utilizando o hook <code>useNavigate</code>;</li> <li>O comando <code>navigate(\"/\");</code> deve ser chamado ap\u00f3s a atualiza\u00e7\u00e3o da anota\u00e7\u00e3o ser bem sucessida. Esta etapa voc\u00ea deve descobrir onde implementar.</li> </ul> <pre><code>import axios from \"axios\";\nimport { useLoaderData, useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport AppBar from \"../AppBar\";\n\nexport async function loader({ params }) {\n    const note = await axios\n                        .get(`http://localhost:8000/api/notes/${params.noteId}/`)\n                        .then((response) =&gt; response.data)\n    return { note };\n}\n\nexport default function Editar() {\n    const navigate = useNavigate();\n    const { note } = useLoaderData();\n    const [title, setTitle] = useState(note.title);\n    const [content, setContent] = useState(note.content);\n\n  // O Restante do seu c\u00f3digo\n</code></pre>"},{"location":"aulas/react/parte-05-editando-anotacao/#bonus-implementando-a-rotacao-dos-cartoes","title":"B\u00f4nus: implementando a rota\u00e7\u00e3o dos cart\u00f5es","text":"<p>Para continuar, avance para a pr\u00f3xima etapa.</p> <p>B\u00f4nus: implementando a rota\u00e7\u00e3o dos cart\u00f5es</p>"},{"location":"aulas/react/parte-06-bonus/","title":"B\u00f4nus: implementando a rota\u00e7\u00e3o dos cart\u00f5es","text":"<p>Para implementar a rota\u00e7\u00e3o dos cart\u00f5es vamos utilizar novamente o <code>useEffect</code> e o <code>useState</code>. Modifique o <code>src/componentes/Note/index.jsx</code>:</p> <pre><code>import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\nfunction randomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default function Note(props) {\n  const [rotation, setRotation] = useState(0);\n  useEffect(() =&gt; {\n    setRotation(randomInt(-5, 5));\n  }, []);\n\n  const style = { transform: `rotate(${rotation}deg)` };\n\n  return (\n      &lt;div className=\"card\" style={style}&gt;\n          &lt;h3 className=\"card-title\"&gt;{props.title}&lt;/h3&gt;\n          &lt;Link to={`edit/${props.id}`}&gt;\u270f\ufe0f&lt;/Link&gt;\n          &lt;div className=\"card-content\"&gt;{props.children}&lt;/div&gt;\n      &lt;/div&gt;\n    );\n}\n</code></pre> <p>No exemplo acima, a fun\u00e7\u00e3o <code>randomInt</code> gera um n\u00famero aleat\u00f3rio entre -5 e 5. A fun\u00e7\u00e3o <code>useEffect</code> \u00e9 utilizada para definir o estado inicial de <code>rotation</code> com um valor aleat\u00f3rio.</p> <p>Ao acessar a aplica\u00e7\u00e3o, os cart\u00f5es devem estar rotacionados de forma aleat\u00f3ria.</p>"},{"location":"aulas/react/parte-06-bonus/#adicionando-as-cores","title":"Adicionando as cores","text":"<p>Vamos utilizar a mesma ideia adotada na etapa anterior, para isso:</p> <ul> <li> <p>Crie um array com as poss\u00edveis cores para os cart\u00f5es. </p> <ul> <li><code>[\"#ead3a7\", \"#9de0f5\", \"#ef89ba\", \"#fae890\", \"#abe9c1\"]</code></li> </ul> </li> <li> <p>Crie um estado para armazenar a cor do cart\u00e3o.</p> </li> <li>Utilize o <code>useEffect</code> para sortear uma cor aleat\u00f3ria para o cart\u00e3o e atualize o estado com essa cor.</li> <li>Adicione uma chave <code>\"background-color\"</code> no objeto <code>style</code> para aplicar a cor ao cart\u00e3o.</li> </ul> <p>Ap\u00f3s realizar essas altera\u00e7\u00f5es, as cores devem ser aplicadas aos cart\u00f5es de forma aleat\u00f3ria.  </p>"},{"location":"aulas/react/parte2/","title":"Continua\u00e7\u00e3o","text":""},{"location":"aulas/react/parte2/#implementando-a-edicao-de-anotacoes","title":"Implementando a edi\u00e7\u00e3o de anota\u00e7\u00f5es","text":"<p>Para a edi\u00e7\u00e3o de anota\u00e7\u00f5es precisamos implementar uma p\u00e1gina nova. Para isso, vamos utilizar o componente <code>Route</code> do <code>react-router-dom</code>. Para instalar o <code>react-router-dom</code> execute o comando:</p> <pre><code>    npm install react-router-dom\n</code></pre> <p>Para mais detalhes visite: https://reactrouter.com/en/main/start/overview</p>"},{"location":"aulas/react/parte2/#configuracao-inicial","title":"Configura\u00e7\u00e3o Inicial","text":"<p>Fa\u00e7a as seguintes atualiza\u00e7\u00f5es no arquivo <code>src/index.js</code>:</p> <p>Vamos utilizar o React Router para definir qual componente devemos renderizar dependendo da rota.</p> <p>A princ\u00edpio estamos definindo que ao acessar a rota <code>/</code> queremos renderizar o componente <code>App</code>.</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;App /&gt;,\n  }\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"aulas/react/parte2/#criando-a-pagina-de-edicao","title":"Criando a p\u00e1gina de edi\u00e7\u00e3o","text":"<p>Vamos criar um componente novo para a p\u00e1gina de edi\u00e7\u00e3o. Crie um arquivo <code>src/components/Edit/index.js</code> com o seguinte conte\u00fado:</p> <pre><code>export default function Edit() {\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;main className=\"container\"&gt;\n                &lt;form className=\"form-card\" method=\"post\"&gt;\n                    &lt;input\n                        className=\"form-card-title\"\n                        type=\"text\"\n                        name=\"titulo\"\n                        placeholder=\"T\u00edtulo\"\n                    /&gt;\n                    &lt;textarea\n                        className=\"autoresize\"\n                        name=\"detalhes\"\n                        placeholder=\"Digite o conte\u00fado...\"\n                    &gt;&lt;/textarea&gt;\n                    &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/main &gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>O conte\u00fado \u00e9 basicamente o formul\u00e1rio que j\u00e1 t\u00ednhamos na p\u00e1gina principal. Por\u00e9m vamos utiliz\u00e1-lo para editar uma anota\u00e7\u00e3o.</p>"},{"location":"aulas/react/parte2/#definindo-uma-nova-rota","title":"Definindo uma nova rota","text":"<p>Agora vamos definir uma nova rota para a p\u00e1gina de edi\u00e7\u00e3o. Queremos definir a rota <code>/edit/:noteId</code> para que possamos editar uma anota\u00e7\u00e3o espec\u00edfica. Para isso, vamos atualizar o arquivo <code>src/index.js</code>:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport Edit from './components/Edit';\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: &lt;App /&gt;,\n  },\n  {\n    path: \"edit/:noteId\",\n    element: &lt;Edit /&gt;,\n  }\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  &lt;React.StrictMode&gt;\n    &lt;RouterProvider router={router} /&gt;\n  &lt;/React.StrictMode&gt;\n);\n</code></pre>"},{"location":"aulas/react/parte2/#navegando-para-a-pagina-de-edicao","title":"Navegando para a p\u00e1gina de edi\u00e7\u00e3o","text":"<p>Vamos criar um link para navegar para a p\u00e1gina de edi\u00e7\u00e3o. N\u00e3o vamos utilizar a tag html <code>#!html&lt;a&gt;</code>, vamos utilizar o componente <code>Link</code> do <code>react-router-dom</code>. </p> <p>Para isso, vamos atualizar o arquivo <code>src/components/Note/index.js</code>:</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nfunction randomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomColor(){\n    const cores = [\"#ead3a7\", \"#9de0f5\", \"#ef89ba\", \"#fae890\", \"#abe9c1\"]\n    const indice = randomInt(0, cores.length - 1);\n    return cores[indice];\n}\n\nexport default function Note(props) {\n    const [rotation, setRotation] = useState(0);\n    useEffect(() =&gt; {\n        setRotation(randomInt(-5, 5));\n    }, []);\n\n    const style = { transform: `rotate(${rotation}deg)`, backgroundColor: randomColor() };\n\n    return (\n        &lt;div className=\"card\" style={style}&gt;\n            &lt;div className=\"card-action\"&gt;\n                &lt;h3 className=\"card-title\"&gt;{props.title}&lt;/h3&gt;\n                &lt;div className=\"icons\"&gt;\n                    &lt;div&gt;\n                        &lt;Link to={`edit/${props.id}`}&gt;\n                            &lt;i className=\"fas fa-edit\"&gt;&lt;/i&gt;\n                        &lt;/Link&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div className=\"card-content\"&gt;{props.children}&lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>    ![Imagem de um card](../09-react/card.png)  <p>Para utilizar um \u00edcone de excluir foi utilizado o Font Awesome. Adicione o c\u00f3digo abaixo dentro da tag <code>&lt;head&gt;</code> do arquivo <code>public/index.html</code>:</p> <pre><code>&lt;script src=\"https://kit.fontawesome.com/7ae3e92237.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre> <p>Adicione tamb\u00e9m o seguinte estilo no arquivo <code>src/components/Note/index.css</code>:</p> <pre><code>.card-action {\n    display: flex;\n    justify-content: space-between;\n}\n\n.icons {\n    display: flex;\n}\n</code></pre> <p>Agora, ao clicar no bot\u00e3o de editar, vamos navegar para a p\u00e1gina de edi\u00e7\u00e3o atrav\u00e9s da rota <code>edit/noteID</code>.</p>"},{"location":"aulas/react/parte2/#obtendo-o-id-da-anotacao","title":"Obtendo o ID da anota\u00e7\u00e3o","text":"<p>Para obter o ID da anota\u00e7\u00e3o, vamos utilizar o <code>useParams</code> do <code>react-router-dom</code>. Para isso, vamos atualizar o arquivo <code>src/components/Edit/index.js</code>:</p> <pre><code>import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nexport default function Edit() {\n    const { noteId } = useParams();\n\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;main className=\"container\"&gt;\n                &lt;form className=\"form-card\" method=\"post\"&gt;\n                    &lt;input\n                        className=\"form-card-title\"\n                        type=\"text\"\n                        name=\"titulo\"\n                        placeholder=\"T\u00edtulo\"\n                    /&gt;\n                    &lt;textarea\n                        className=\"autoresize\"\n                        name=\"detalhes\"\n                        placeholder=\"Digite o conte\u00fado...\"\n                    &gt;&lt;/textarea&gt;\n                    &lt;button className=\"btn\" type=\"submit\"&gt;Criar&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/main &gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> <p>Exerc\u00edcio</p> <p>Tente implementar o restante do componente para finalizar a edi\u00e7\u00e3o de anota\u00e7\u00f5es. </p>"},{"location":"auxiliar/coautores/","title":"Commit com coautores","text":"<p>Respons\u00e1vel: Licia Sales</p> <p>Commits com coautores permitem atribuir cr\u00e9dito a mais de uma pessoa por uma mudan\u00e7a feita em um reposit\u00f3rio Git. Essa funcionalidade \u00e9 \u00fatil em trabalhos em grupo.</p> <p>No hist\u00f3rico do commit, cada coautor \u00e9 listado, garantindo a visibilidade e reconhecimento \u00e0s pessoas envolvidas.</p>"},{"location":"auxiliar/coautores/#por-que-usar-commits-com-coautores","title":"Por que usar Commits com Coautores?","text":"<ol> <li>Reconhecimento: Mostra o envolvimento de cada membro na colabora\u00e7\u00e3o.</li> <li>Rastreamento: Facilita identificar quem contribuiu com ideias ou mudan\u00e7as espec\u00edficas.</li> <li>Documenta\u00e7\u00e3o: Melhora o hist\u00f3rico de commits, refletindo de forma clara a colabora\u00e7\u00e3o.</li> <li>Transpar\u00eancia: Garante que os contribuidores sejam creditados adequadamente.</li> </ol>"},{"location":"auxiliar/coautores/#como-criar-um-commit-com-coautores-no-git","title":"Como Criar um Commit com Coautores no Git?","text":"<ol> <li>Pelo terminal<ul> <li>Adicione uma linha para cada coautor na mensagem do commit com o seguinte formato:</li> </ul> </li> </ol> <pre><code>git commit -m \"Corrigindo bug cr\u00edtico no sistema\n\nCo-authored-by: Maria Silva &lt;maria@example.com&gt;\nCo-authored-by: Jo\u00e3o Santos &lt;joao@example.com&gt;\"\n</code></pre>"},{"location":"auxiliar/coautores/#usar-coautores-no-vscode","title":"Usar Coautores no VSCode","text":"<p>Quando estiver pronto para realizar o commit, v\u00e1 para o menu lateral de controle de fonte no VSCode (\u00edcone de ramifica\u00e7\u00e3o).</p> <p></p> <p>Digite a mensagem do commit no campo fornecido.</p> <p></p> <p>Adicione os coautores no seguinte formato:</p> <pre><code>Corre\u00e7\u00e3o de erros no processamento de dados.\n\nCo-authored-by: Alice Martins &lt;alice@example.com&gt;\nCo-authored-by: Rafael Costa &lt;rafael@example.com&gt;\n</code></pre> <p>Clique no bot\u00e3o para confirmar o commit, assim, o commit ser\u00e1 criado com os coautores especificados.</p>"},{"location":"auxiliar/coautores/#dicas-extras","title":"Dicas Extras","text":"<p>Estude a documenta\u00e7\u00e3o para realizar personaliza\u00e7\u00f5es para facilitar essa funcionalidade:</p> <p>https://code.visualstudio.com/docs/sourcecontrol/github</p> <p>https://docs.github.com/pt/pull-requests/</p>"},{"location":"auxiliar/git/","title":"Ferramentas B\u00e1sicas: Git","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"auxiliar/git/#git-ou-github","title":"Git ou GitHub:","text":"<p>Voc\u00eas j\u00e1 tiveram contato com o GitHub no primeiro semestre, mas agora iremos realmente explorar o Git, uma ferramenta do cotidiano de todo desenvolvedor. E uma informa\u00e7\u00e3o importante, Git e GitHub N\u00c3O s\u00e3o a mesma coisa. Por conta do primeiro semestre e da superficialidade com a qual o tema \u00e9 abordado, ambos podem se confundir, mas Git \u00e9 a ferramenta de controle de vers\u00e3o, enquanto GitHub \u00e9 apenas um portal de compartilhamento de reposit\u00f3rios Gits, pertencente \u00e0 Microsoft. O mais famoso de todos, mas apenas mais um portal, tendo m\u00faltiplos outros concorrentes, como por exemplo o projeto open source GitLab.</p>"},{"location":"auxiliar/git/#como-baixar-o-git","title":"Como baixar o Git:","text":"<p>Se voc\u00ea por algum motivo n\u00e3o possui o git instalado, no site do Git (https://git-scm.com/) clique em downloads e siga os passos para seu sistema operacional. Este pode variar um pouco de um sistema para outro, mas em todos deve ser um processo simples e intuitivo, pela popularidade da ferramenta.</p> <p></p>"},{"location":"auxiliar/git/#qual-a-funcao-do-git-e-por-que-usa-lo","title":"Qual a fun\u00e7\u00e3o do Git e por que us\u00e1-lo?:","text":"<p>O Git \u00e9 uma ferramenta de controle de vers\u00e3o, ou seja, ela serve para salvar seu c\u00f3digo ao longo do desenvolvimento em, idealmente, toda vers\u00e3o est\u00e1vel do projeto. Isso permite que, caso algum erro ou bug venha a aparecer em seu c\u00f3digo, a rastreabilidade do erro se torne mais f\u00e1cil, al\u00e9m de possibilitar o retorno do c\u00f3digo para uma vers\u00e3o est\u00e1vel, caso necess\u00e1rio. Outra vantagem do Git \u00e9 facilitar o compartilhamento e trabalho conjunto em um c\u00f3digo, pois podemos garantir que todos os envolvidos ter\u00e3o exatamente o mesmo c\u00f3digo com as exatas mesmas altera\u00e7\u00f5es.</p>"},{"location":"auxiliar/git/#o-lado-obscuro-do-git","title":"O lado obscuro do Git:","text":"<p>Apesar de no papel o Git ser uma ferramenta fenomenal, maravilhosa e milagrosa, ela est\u00e1 mais pr\u00f3xima de \"A melhor solu\u00e7\u00e3o ruim para um problema\" do que realmente \"Uma \u00f3tima solu\u00e7\u00e3o de um problema\". Uma frase bem comum, principalmente para quem est\u00e1 aprendendo Git, \u00e9 \"Git \u00e9 ruim, s\u00f3 n\u00e3o temos uma solu\u00e7\u00e3o melhor\". Isso se deve \u00e0 grande complexidade de entender o Git completamente e todos os problemas que surgem quando muitas pessoas tentam mexer em um mesmo sistema ao mesmo tempo. Desde conflitos de Merge com coisas simples at\u00e9 Rebases de c\u00f3digo e fetch/fast-forwards imposs\u00edveis, iremos nos atrapalhar com o Git enquanto n\u00e3o tivermos entendido muito bem o que est\u00e1 acontecendo. Para evitar esses problemas, sigam algumas regras ao trabalhar com Git:</p> <ul> <li>Nunca editar o mesmo arquivo ou fun\u00e7\u00e3o do colega, at\u00e9 que o mesmo d\u00ea merge.</li> <li>Commits e merges constantes, seja em algum branch Auxiliar ou na Main.</li> <li>Utilizar branches. Apesar de confuso no come\u00e7o e parecer s\u00f3 atrapalhar, a ideia de \"codar todo mundo direto no main\" s\u00f3 \u00e9 boa at\u00e9 4 pessoas diferentes darem push commit ao mesmo tempo no mesmo branch com v\u00e1rias edi\u00e7\u00f5es importantes no mesmo arquivo. \u00c9 comum as coisas darem errado no c\u00f3digo ou no merge, ent\u00e3o \u00e9 melhor que deem errado no seu branch pessoal do que na main do projeto inteiro.</li> <li>Nunca deixe para dar \"pull main\" mais tarde, caso haja uma atualiza\u00e7\u00e3o em um arquivo que voc\u00ea est\u00e1 utilizando. Fa\u00e7a quest\u00e3o de sempre manter o Main o mais atualizado poss\u00edvel, mesmo que isso implique em comitar um c\u00f3digo incompleto em SEU branch apenas para dar pull e continuar seu c\u00f3digo.</li> </ul>"},{"location":"auxiliar/git/#o-maior-problema-do-git","title":"O maior problema do Git:","text":"<p>Como p\u00f4de ser visto no t\u00f3pico anterior, o Git pode ser bem traum\u00e1tico para quem est\u00e1 aprendendo, principalmente quando voc\u00ea precisa entregar um trabalho \u00e0s 23:59, mas um conflito de merge desconhecido envolvendo 200 linhas de c\u00f3digo aparece do nada \u00e0s 23:20, pois algu\u00e9m deu um commit na main sem avisar o grupo... Caso ainda n\u00e3o tenham percebido, o Git \u00e9 uma ferramenta muito boa, mas tem um grande problema que pode transformar todas as suas qualidades em dores de cabe\u00e7a: o trabalho em equipe e o erro humano. Sem uma boa comunica\u00e7\u00e3o, trabalho em equipe e constante transfer\u00eancias de c\u00f3digo, problemas come\u00e7am a aparecer, principalmente quando muitas pessoas trabalham ao mesmo tempo. Ent\u00e3o lembrem-se: sempre se comuniquem e estejam com seu c\u00f3digo atualizado.</p>"},{"location":"auxiliar/git/#merge-conflict","title":"Merge Conflict:","text":"<p>Este \u00e9 o erro mais comum e cansativo de corrigir que encontrar\u00e3o, principalmente quando o grupo n\u00e3o tem uma boa comunica\u00e7\u00e3o. Para resolver isso, ou o branch que est\u00e1 causando conflito \u00e9 abandonado e as mudan\u00e7as s\u00e3o refeitas a partir do commit mais recente da branch main, ou algum membro do grupo dever\u00e1 resolver o conflito de merge. Para resolver o conflito, sugiro o uso da extens\u00e3o do VSCode para resolver conflitos. Ao clicar no arquivo com conflito, o VSCode ir\u00e1 mostrar as duas vers\u00f5es do c\u00f3digo e a vers\u00e3o final, e voc\u00ea poder\u00e1 escolher qual vers\u00e3o manter e qual deletar. Ap\u00f3s isso, basta salvar o arquivo e dar commit.</p>"},{"location":"auxiliar/git/#comandos-git-terminal","title":"Comandos Git: Terminal","text":"<p>Apesar de ter uma interface com o VSCode, o git foi constru\u00eddo para ser usado via terminal. Entender como o Git funciona via terminal \u00e9 fundamental pois a interface do VSCode n\u00e3o \u00e9 t\u00e3o completa quanto a do terminal e n\u00e3o possui todos os comandos do Git.</p> <p>Os comandos mais importantes do git s\u00e3o: </p> <ul> <li><code>git init</code>: Cria uma pasta <code>.git</code> que cont\u00e9m aquivos respons\u00e1veis por monitorar as pastas e arquivos, iniciando um novo reposit\u00f3rio.</li> <li><code>git clone REP</code>: Substitua o REP pela chave do reposit\u00f3rio, seja ela SSH ou HTTPS. Clona um reposit\u00f3rio do GitHub ou concorrentes para sua m\u00e1quina local.</li> <li> <p><code>git add ELEMENTO</code>: Adiciona mudan\u00e7as no reposit\u00f3rio para serem salvas (staged changes). Troque ELEMENTO pelo que deseja salvar, seja um arquivo, pasta, ou qualquer coisa que foi alterada.</p> <p>obs: Utilize \u201c.\u201d no lugar de elemento para adicionar todas as mudan\u00e7as existentes no reposit\u00f3rio.</p> </li> <li> <p><code>git commit -m \"MENSAGEM\"</code>: Faz o commit LOCAL de todas as mudan\u00e7as marcadas para commit (staged changes). Ap\u00f3s isso o commit ficara salvo localmente e dever\u00e1 ser enviado para o remote.</p> </li> <li> <p><code>git pull/push origin BRANCH</code>: Os comandos fundamentais do Git, substitua BRANCH pelo branch em quest\u00e3o (normalmente ser\u00e1 main). Push envia o seu \u00faltimo commit para o origin(remote) do branch apontado, e Pull puxa o \u00faltimo commit dele.</p> <p>obs: Remote/origin refere-se ao reposit\u00f3rio nuvem de origem. Basicamente este \u00e9 o nosso reposit\u00f3rio do GitHub.</p> </li> </ul> <p>Existem muitos outros comandos Git para utilizar, mas estes voc\u00eas podem pesquisar caso necess\u00e1rio. Assim como o terminal, sua documenta\u00e7\u00e3o \u00e9 bem farta e extensa para resumir tudo aqui. </p>"},{"location":"auxiliar/git/#video-introdutorio-de-git","title":"Video Introdut\u00f3rio de Git:","text":"<p>\u00c9 importante que todos entendam o conceito de Git Trees e o funcionamento do Git para seu uso adequado. Os v\u00eddeos a seguir talvez tenham uma abordagem mais amig\u00e1vel:</p>"},{"location":"auxiliar/git/#videos-curtos","title":"V\u00eddeos curtos:","text":"<p>https://www.youtube.com/watch?v=hwP7WQkmECE</p> <p>https://www.youtube.com/watch?v=e9lnsKot_SQ</p>"},{"location":"auxiliar/git/#video-longo","title":"V\u00eddeo longo:","text":"<p>https://www.youtube.com/watch?v=mJ-qvsxPHpY</p>"},{"location":"auxiliar/terminal/","title":"Ferramentas B\u00e1sicas: Terminal","text":"<p>Respons\u00e1vel: Sarti</p>"},{"location":"auxiliar/terminal/#introducao","title":"Introdu\u00e7\u00e3o:","text":"<p>Ao longo do segundo semestre do curso de Programa\u00e7\u00e3o Eficaz, iremos come\u00e7ar nosso contato com v\u00e1rias ferramentas do cotidiano de todo desenvolvedor. Uma delas, que pode parecer in\u00fatil ou at\u00e9 mesmo assustadora \u00e0 primeira vista, \u00e9 o Terminal do seu sistema operacional. Este guia serve para auxiliar no seu contato inicial com a ferramenta, al\u00e9m de fornecer alguns comandos e usos b\u00e1sicos di\u00e1rios do terminal.</p>"},{"location":"auxiliar/terminal/#instalacao","title":"Instala\u00e7\u00e3o:","text":"<p>O terminal \u00e9 uma ferramenta que, por padr\u00e3o, j\u00e1 vem instalada em qualquer computador, independentemente de seu sistema operacional. Para utiliz\u00e1-lo, \u00e9 necess\u00e1rio aprender os comandos que devem ser digitados nele. Um problema \u00e9 que esses comandos podem variar dependendo do sistema operacional. Os sistemas Linux e MacOS compartilham todos os comandos b\u00e1sicos, enquanto o Windows possui comandos diferentes. Um fato muito relevante \u00e9 que hoje a enorme maioria dos servidores utilizam sistemas Linux. Isso significa que mesmo que voc\u00ea n\u00e3o use Linux no seu dia a dia, \u00e9 muito importante aprender a usar seus comandos de terminal, pois eles ser\u00e3o muito \u00fateis no futuro pr\u00f3ximo.</p> <p>Se voc\u00ea possui um computador com Windows e j\u00e1 est\u00e1 ficando preocupado em ter que aprender dois conjuntos diferentes de comandos, n\u00e3o se preocupe. Existem emuladores de terminal que permitem que voc\u00ea utilize os comandos do Linux no Windows. Um dos mais populares \u00e9 o Git Bash, que \u00e9 instalado junto com o Git. Com ele, voc\u00ea pode utilizar os comandos do Linux no Windows e n\u00e3o ter\u00e1 que se preocupar em aprender dois conjuntos de comandos.</p>"},{"location":"auxiliar/terminal/#por-que-usar-o-terminal","title":"Por que usar o terminal:","text":"<p>O uso do terminal costuma ser malvisto por aqueles que s\u00e3o obrigados a aprender, afinal, por que usar o terminal se temos interfaces visuais? Por que usar 5 linhas de c\u00f3digo para criar um arquivo se posso clicar com o bot\u00e3o direito e selecionar \u201cNovo arquivo\u201d?</p> <p>Bom, este modo de pensar vem, de maneira geral, de um desconhecimento do funcionamento do terminal. As coisas n\u00e3o s\u00e3o t\u00e3o complicadas quanto parecem a primeira vista. Pelo contr\u00e1rio, ap\u00f3s se habituar com o terminal, conseguimos gerenciar arquivos e projetos com uma velocidade muito maior, al\u00e9m de termos muito mais controle sobre nossos arquivos e comandos.</p> <p>Al\u00e9m disso, o terminal \u00e9 uma ferramenta muito poderosa que nos permite executar muitos comandos que n\u00e3o possuem interface visual, como a execu\u00e7\u00e3o de comandos Python, Git, Curl e muito mais.</p>"},{"location":"auxiliar/terminal/#o-terminal-requer-paciencia","title":"O terminal requer PACI\u00caNCIA!","text":"<p>N\u00e3o se preocupe se achar ele confuso ou contraintuitivo no come\u00e7o. Ele vai te acompanhar na sua jornada por muitos anos, e se tornar proficiente no uso do terminal vir\u00e1 com o tempo. No come\u00e7o, vamos perder um pouco de tempo tentando us\u00e1-lo agora, para ganhar tempo no futuro.</p>"},{"location":"auxiliar/terminal/#comandos-basicos-do-terminal","title":"Comandos Basicos do Terminal:","text":"<p>O n\u00famero de comandos nativos do terminal \u00e9 imenso, e se incluirmos pacotes com mais comandos (como npm), esse n\u00famero se torna quase infinito. Ent\u00e3o, por enquanto, vamos focar em aprender os comandos mais b\u00e1sicos do terminal e de uso cotidiano, e conforme necess\u00e1rio vamos pesquisando e usando novos comandos.</p> <ul> <li> <p><code>cd nome_da_pasta</code>: O comando \u201ccd\u201d \u00e9 provavelmente o comando mais utilizado no terminal. Vindo do termo \u201cChange Directory\u201d, sua fun\u00e7\u00e3o \u00e9 justamente a de mudar o diret\u00f3rio (pasta) na sua m\u00e1quina, o que vamos utilizar para entrar e sair de pastas e arquivos.</p> <p>Dica: Nas primeiras aulas, abram o gerenciador de arquivos de sua m\u00e1quina junto com o terminal e naveguem em paralelo nos dois. Assim, podemos ligar uma interface visual ao nosso terminal, o que pode ajudar a entender o in\u00edcio conturbado.</p> <p></p> </li> <li> <p><code>ls</code>: Vem de \u201clist\u201d. Serve para listar todas as pastas e arquivos em um diret\u00f3rio(pasta) da sua m\u00e1quina, especificamente da pasta onde o seu terminal estiver localizado, que podemos ver no texto ao lado do cursor no terminal.</p> <p></p> </li> <li> <p><code>clear</code>: Simplesmente limpa o terminal, que pode ficar cheio de texto facilmente.</p> </li> <li><code>touch X</code>: Cria um arquivo vazio com o nome e extens\u00e3o de X, por exemplo <code>touch example.py</code> iria criar um arquivo vazio chamado <code>example.py</code>.</li> <li><code>mkdir X</code>: Cria um diret\u00f3rio(pasta) com o nome de X</li> <li>Tab: Este n\u00e3o \u00e9 um comando, mas sim um atalho, pressionar tab 1 vez preenche o texto que voc\u00ea est\u00e1 escrevendo, e caso haja mais de 1 possibilidade, pressionar 2 vezes lista todas as possibilidades, como o comando ls faz.</li> <li><code>.</code> e <code>..</code>: Novamente n\u00e3o s\u00e3o comandos, mas sim caminhos. Quando mexemos em diret\u00f3rios do terminal, utilizamos <code>.</code> ou \u201csource\u201d para indicar \u201co diret\u00f3rio ATUAL\u201d, ou seja, onde nosso terminal se encontra. E \u201c..\u201d refere-se ao diret\u00f3rio superior ou pai do atual, ou seja, \u201cvoltar um para tr\u00e1s\u201d.</li> <li>Admin/Sudo: Alguns comandos podem necessitar permiss\u00f5es de administrador para serem executados. Em caso de Windows, basta iniciar o terminal como administrador, para quem usa Mac e Linux \u00e9 necess\u00e1rio utilizar o comando Sudo como prefixo do comando que requer administra\u00e7\u00e3o.</li> </ul>"},{"location":"auxiliar/terminal/#um-pequeno-exercicio","title":"Um pequeno exercicio:","text":"<p>Para praticar um pouco, segue um exerc\u00edcio bem simples, apenas para testar os comandos. </p> <p>Abra o seu terminal e seu gerenciador de arquivos, e deixe eles na mesma pasta (por exemplo, eu deixarei na pasta \u201cHome\u201d, que no meu computador \u00e9 o diret\u00f3rio padr\u00e3o de ambos).</p> <p></p> <p>Daqui, utilizando apenas o terminal, crie uma pasta e navegue para ela. Dentro desta pasta crie outra pasta e dentro desta crie um arquivo, ap\u00f3s isso volte ao estado inicial do terminal. Depois reproduza os passos no seu navegador de arquivos, para assimilar o que \u00e9 feito visualmente e o que \u00e9 feito pelo terminal. </p>"},{"location":"auxiliar/terminal/#materiais-externos","title":"Materiais externos:","text":"<p>Seguem alguns materiais externos para ajudar no primeiro contato com o terminal. Para aqueles que preferirem, temos conte\u00fados em v\u00eddeo e uma documenta\u00e7\u00e3o dos comandos terminal. </p> <p>Video longo contendo um resum\u00e3o de comandos:</p> <p>obs: Neste video varios comandos n\u00e3o essenciais inicialmente s\u00e3o abordados</p> <p>Playlist com videos sobre cada comando:</p> <p>https://www.youtube.com/playlist?list=PLS1QulWo1RIb9WVQGJ_vh-RQusbZgO_As</p> <p>Introdu\u00e7\u00e3o do Ubuntu:</p> <p>https://ubuntu.com/tutorials/command-line-for-beginners#1-overview</p> <p>Cheat Sheet:</p> <p>https://cheatography.com/davechild/cheat-sheets/linux-command-line/</p>"},{"location":"auxiliar/venv/","title":"Ambientes virtuais em Python (<code>venv</code>)","text":"<p>O gerenciamento de configura\u00e7\u00e3o \u00e9 uma pr\u00e1tica essencial para desenvolvedores, que consiste em identificar, organizar e controlar as mudan\u00e7as nos componentes de um projeto ao longo do tempo. Isso garante que todas as partes do sistema estejam alinhadas, reduzindo problemas de incompatibilidade e facilitando a manuten\u00e7\u00e3o. No contexto do desenvolvimento em Python, isso inclui definir a vers\u00e3o do Python utilizada, os pacotes instalados e suas respectivas vers\u00f5es.</p> <p></p> <p>Considere o seguinte cen\u00e1rio: quando voc\u00ea come\u00e7ou a usar Python, a vers\u00e3o mais recente talvez fosse o Python 3.11 ou 3.12. Atualmente, estamos no Python 3.13, e o lan\u00e7amento do Python 3.14 j\u00e1 est\u00e1 programado. Qual o problema disso? Do ponto de vista do avan\u00e7o da tecnologia isso parece \u00f3timo! Mas pense nos seus projetos antigos. O que acontecer\u00e1 com eles quando voc\u00ea atualizar a vers\u00e3o do Python no seu computador para uma vers\u00e3o mais recente que muda um comportamento ou remove uma fun\u00e7\u00e3o que voc\u00ea utilizava no projeto?</p> <p>O exemplo da vers\u00e3o do Python \u00e9 um pouco mais dr\u00e1stico, mas e quanto \u00e0s in\u00fameras bibliotecas/pacotes que voc\u00ea utiliza em cada projeto? Durante a gradua\u00e7\u00e3o, os projetos s\u00e3o, na grande maioria, abandonados assim que voc\u00ea acaba o semestre. No mercado de trabalho voc\u00ea n\u00e3o poder\u00e1 se dar a esse luxo: projetos antigos s\u00e3o em geral mantidos por bastante tempo.</p> <p>Para resolver esse (e outros) problema, foram criados os ambientes virtuais (<code>venv</code>) do Python. Ele cria uma \"nova instala\u00e7\u00e3o\" do Python exclusiva para o seu projeto e os pacotes s\u00e3o instalados apenas nesse ambiente. Ou seja, quando voc\u00ea muda de projeto, basta mudar de ambiente virtual para usar uma instala\u00e7\u00e3o diferente, com um conjunto diferente de pacotes.</p> <p>Outras linguagens de programa\u00e7\u00e3o</p> <p>Todas as grandes linguagens de programa\u00e7\u00e3o atuais possuem algum tipo de ferramenta desse tipo (algumas melhores, algumas piores). Por exemplo, o NodeJS, que utilizaremos em um futuro pr\u00f3ximo, n\u00e3o apenas faz o controle dos pacotes espec\u00edficos de cada projeto, mas tamb\u00e9m avisa o desenvolvedor quando existe uma vers\u00e3o mais recente desses pacotes e sugere a atualiza\u00e7\u00e3o.</p>"},{"location":"auxiliar/venv/#criando-um-ambiente-virtual","title":"Criando um ambiente virtual","text":"<p>Para criar um ambiente virtual (<code>venv</code>), utilizaremos um comando similar a este:</p> Windows /Linux MacOS  <pre><code>python -m venv NOME_DA_PASTA_DO_VENV\n</code></pre> <pre><code>python3 -m venv NOME_DA_PASTA_DO_VENV\n</code></pre> <p>\u00c9 comum utilizarmos nomes como <code>env</code> ou <code>.env</code> para o <code>NOME_DA_PASTA_DO_VENV</code>. Para Programa\u00e7\u00e3o Eficaz, vamos padronizar o uso do nome <code>env</code>. Assim, o comando que vamos utilizar \u00e9:</p> Windows /Linux MacOS  <pre><code>python -m venv env\n</code></pre> <pre><code>python3 -m venv env\n</code></pre> <p>Esse comando vai criar uma pasta chamada <code>env</code> dentro da pasta onde ele foi executado. Todos os arquivos necess\u00e1rios estar\u00e3o dentro da pasta <code>env</code>.</p> <p>Apagando um <code>venv</code></p> <p>Se voc\u00ea n\u00e3o precisar mais do seu ambiente virtual (ou tiver criado no lugar errado), basta apagar a pasta <code>env</code>.</p>"},{"location":"auxiliar/venv/#ativando-um-ambiente-virtual","title":"Ativando um ambiente virtual","text":"<p>Ser\u00e1 necess\u00e1rio ativar o ambiente virtual toda vez que voc\u00ea for trabalhar com ele. No come\u00e7o isso pode parecer um pouco ma\u00e7ante, mas \u00e9 apenas um comando e voc\u00ea logo vai se acostumar:</p> Windows PowerShellWindows Prompt de ComandoLinux/MacOS <pre><code>env\\Scripts\\Activate.ps1\n</code></pre> <pre><code>env\\Scripts\\activate.bat\n</code></pre> <pre><code>source env/bin/activate\n</code></pre> <p>Importante</p> <p>Se voc\u00ea utilizar um nome diferente de <code>env</code> para o seu ambiente virtual, lembre-se de substitu\u00ed-lo no comando acima. Por exemplo: se o seu ambiente virtual se chama <code>meu-ambiente</code>, o comando ser\u00e1 <code>source meu-ambiente/bin/activate</code> (ou <code>meu-ambiente\\Scripts\\activate.bat</code>, no Windows).</p> <p>Pronto! Agora quando voc\u00ea utilizar o Python nesse terminal, ser\u00e1 utilizada a vers\u00e3o do ambiente virtual.</p> <p>Importante</p> <p>Para saber se o ambiente virtual foi ativado com sucesso, basta verificar se no terminal aparece o nome do ambiente virtual no come\u00e7o da linha.</p> <p> Ambiente Virtual ativo </p> <p>Importante</p> <p>Os comandos acima ativam o ambiente virtual para aquela inst\u00e2ncia do terminal. Ou seja, se voc\u00ea abrir outro terminal, mesmo que seja na mesma pasta, voc\u00ea estar\u00e1 utilizando o Python do sistema.</p>"},{"location":"entregas/01-ELI5/","title":"Explain Like I'm 5 (ELI5)","text":"<p>Data de entrega: 09/02</p> <p>Elabore uma explica\u00e7\u00e3o para os termos abaixo que at\u00e9 uma crian\u00e7a de 5 anos entenderia.</p> <ul> <li>URL</li> <li>Navegador (browser)</li> <li>DNS</li> <li>IPv4</li> <li>IPv6</li> <li>HTTP</li> <li>Verbos HTTP</li> <li>Roteador</li> <li>Servidor</li> <li>Requisi\u00e7\u00e3o (request)</li> <li>Resposta (response)</li> <li>POST</li> <li>GET</li> </ul> <p>Voc\u00ea n\u00e3o precisa (e provavelmente n\u00e3o deve) seguir esta ordem, mas tente manter o texto conciso.</p> <p>Alguns exemplos de ELI5: https://www.reddit.com/r/explainlikeimfive/</p>"},{"location":"entregas/01-ELI5/#rubrica","title":"Rubrica","text":"<p>A nota desta atividade ser\u00e1 calculada considerando tr\u00eas aspectos:</p> <ol> <li>Qualidade da resposta (boas analogias, conceitos corretamente explicados, etc.);</li> <li>Qualidade do texto (texto bem escrito \u00e9 diferente de texto longo);</li> <li>Quantidade de termos apresentados.</li> </ol> <p>A qualidade da resposta e do texto limitam o conceito final do trabalho:</p> <ul> <li>Erros (conceituais ou textuais) pontuais limitam a B+;</li> <li>Erros frequentes ou graves limitam a C.</li> </ul> <p>Al\u00e9m disso, respostas bem escritas e com boas analogias podem receber um b\u00f4nus de 0,5 conceito (limitado a A+).</p> <ul> <li>Cada termo explicado vale 1 ponto (limitado a 10 pontos).</li> </ul>"},{"location":"entregas/01-ELI5/#entrega","title":"Entrega","text":"<p>A resposta deve ser entregue no Blackboard como texto simples no formato pdf.</p>"},{"location":"projetos/aps1/","title":"APS 1","text":"<p>Entrega</p> <p> 29/08 (sexta-feira)</p> <p> at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via  Blackboard.</p>"},{"location":"projetos/aps1/#para-que-preciso-aprender-isso","title":"Para que preciso aprender isso?","text":"<p>Como comentado na aula, o banco de dados \u00e9 uma parte muito importante nas diferentes arquiteturas de software, necessitando cuidados especiais na sua cria\u00e7\u00e3o e manipula\u00e7\u00e3o. Vamos nesta APS praticar comandos da linguagem SQL com o objetivo de: - Reconhecer a linguagem SQL para o envio de instru\u00e7\u00f5es para um banco de dados. - Identificar os comandos de cria\u00e7\u00e3o de tabelas e manipula\u00e7\u00e3o de dados, incuindo os principais par\u00e2metros.</p>"},{"location":"projetos/aps1/#nao-sei-nada-sobre-sql-por-onde-comeco","title":"N\u00e3o sei nada sobre SQL! Por onde come\u00e7o?","text":"<p>Uma das compet\u00eancias importantes para o cientista da computa\u00e7\u00e3o \u00e9 exercitar o aprender a aprender e portanto voc\u00eas podem buscar os conhecimentos que precisam em boas fontes de dados. Hoje existe algumas fontes na Internet que pode ajudar muito, tais como:</p> <ul> <li>W3 Schools (https://www.w3schools.com/): uma plataforma mantida na Noruega com tutoriais de aprendizado e experimenta\u00e7\u00e3o para v\u00e1rias linguagens, inclusive o SQL. Voc\u00ea pode encontrar tudo o que precisa l\u00e1!</li> <li>SQLite Tutorial (https://www.sqlitetutorial.net/): como iremos trabalhar nesta APS com o SQLite, este tutorial pode tamb\u00e9m te auxiliar no desenvolvimento dos exerc\u00edcios.</li> </ul>"},{"location":"projetos/aps1/#o-que-voce-precisa-saber-e-fazer-antes-de-iniciar-os-exercicios","title":"O que voc\u00ea precisa saber e fazer antes de iniciar os exerc\u00edcios","text":"<ul> <li>Voc\u00ea n\u00e3o precisa (neste momento) utilizar o SQLite instalado em seu computador para trabalhar com esta APS mas n\u00e3o impedimos caso queira desenvolver os exerc\u00edcios em uma inst\u00e2ncia local.</li> <li>Sugerimos o uso de um sandbox executado 100% no navegador, acessando pela URL https://www.convertcsv.com/sqlite-online.htm</li> <li>Fa\u00e7a o download da base de dados imoveis.db</li> <li>Fa\u00e7a a carga do banco de dados clicando no bot\u00e3o <code>Load an SQLite database</code> e selecionando o arquivo acima. Depois de executado com sucesso, a tabela <code>imoveis</code> estar\u00e1 carregada no banco de dados e voc\u00ea pode iniciar a resolu\u00e7\u00e3o dos exerc\u00edcios.</li> <li>A entrega dos exerc\u00edcios deve ser feita atrav\u00e9s do Prairie Learn com corre\u00e7\u00e3o e feedback autom\u00e1ticos.</li> </ul> <p>Refor\u00e7amos que n\u00e3o ser\u00e3o aceitos exerc\u00edcios entregues fora do prazo e que na entrega n\u00e3o realizada ser\u00e1 atribu\u00eddo conceito I</p>"},{"location":"projetos/aps1/#exercicios","title":"Exerc\u00edcios","text":"<ol> <li>Selecione todos os campos de todos os im\u00f3veis.</li> <li>Selecione o logradouro, bairro e cidade de todos os apartamentos.</li> <li>Selecione o campo valor dos im\u00f3veis, renomeando o mesmo para \"Pre\u00e7o\", e mostre apenas os im\u00f3veis do tipo <code>casa em condominio</code>.</li> <li>Conte quantos terrenos est\u00e3o registrados na tabela.</li> <li>Selecione todos os campos dos im\u00f3veis na cidade <code>Danielmouth</code>, ordenados pelo valor de forma decrescente.</li> <li>Selecione os bairros e valores dos im\u00f3veis cujo valor esteja entre 300.000 e 500.000.</li> <li>Conte quantos im\u00f3veis existem em cada bairro e exiba os resultados em ordem crescente de quantidade.</li> <li>Selecione o maior e o menor valor de im\u00f3veis do tipo <code>casa</code>.</li> <li>Selecione todos os campos dos im\u00f3veis cujo logradouro contenha a palavra <code>Court</code>.</li> <li>Selecione os logradouros e tipos dos im\u00f3veis, ordenando primeiro por tipo de forma ascendente e depois por logradouro de forma descendente.</li> <li>Suponha que todos os im\u00f3veis do tipo <code>apartamento</code> tiveram uma valoriza\u00e7\u00e3o de 10% devido a melhorias na infraestrutura local. Atualize o valor desses im\u00f3veis, aumentando-os em 10%.</li> <li>Foi identificado um erro nos registros de todos os im\u00f3veis localizados no bairro <code>South Nicholas</code>, onde os CEPs foram cadastrados incorretamente. Atualize o CEP de todos os im\u00f3veis do bairro <code>South Nicholas</code> para o valor <code>123987</code>.</li> <li>Suponha que a imobili\u00e1ria decidiu remover do seu cat\u00e1logo todos os im\u00f3veis adquiridos antes de \\(1^o\\) de janeiro de 2010, pois eles consideram esses im\u00f3veis muito antigos para as necessidades atuais do mercado. Escreva um comando SQL que exclua todos os im\u00f3veis da tabela <code>imoveis</code> que foram adquiridos antes dessa data.</li> <li>A imobili\u00e1ria percebeu que os terrenos na cidade de <code>East Nicholas</code> n\u00e3o est\u00e3o tendo a sa\u00edda esperada e decidiu remov\u00ea-los de sua lista de ofertas. Crie um comando SQL para excluir todos os registros de terrenos localizados em <code>East Nicholas</code>.</li> </ol>"},{"location":"projetos/aps2/","title":"APS 2 - Servidor de desafios Javascript","text":"<p>Entrega</p> <p>  10/10 (sexta-feira)</p> <p> Individual</p> <p> Entrega via Blackboard.</p> <p> Para mais informa\u00e7\u00f5es, veja o link a seguir: Servidor JS</p>"},{"location":"projetos/aps3/","title":"APS 3","text":"<p>Entrega</p> <p> 25/04 (sexta-feira)</p> <p> at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via  Blackboard.</p> <p>Para completar esta APS os seguintes links ser\u00e3o bastante \u00fateis:</p> <ul> <li>W3 Schools (https://www.w3schools.com/mongodb/)</li> <li>Cheat Sheet do MongoDB (https://www.mongodb.com/developer/products/mongodb/cheat-sheet/)</li> <li>Documenta\u00e7\u00e3o do MongoDB (https://www.mongodb.com/pt-br/docs/manual/reference/operator/query/)</li> </ul>"},{"location":"projetos/aps3/#o-que-voce-precisa-saber-e-fazer-antes-de-iniciar-os-exercicios","title":"O que voc\u00ea precisa saber e fazer antes de iniciar os exerc\u00edcios","text":"<ul> <li> <p>A entrega dos exerc\u00edcios deve ser enviada em PDF pelo Blackboard com texto gerado em LaTeX, usando o template dispon\u00edvel em https://www.overleaf.com/read/zgybjvrygnfw#19e451</p> </li> <li> <p>Fa\u00e7a o download dos arquivos <code>livros.json</code> e <code>usuarios.json</code>. Esses arquivos cont\u00e9m dados completamente inventados e n\u00e3o validos, apenas para fins de teste.</p> </li> <li> <p>Crie um banco de dados no MongoDB Atlas como instru\u00eddo aqui.</p> </li> <li> <p>Se conecte ao banco de dados utilizando o MongoDB Compass.</p> </li> <li> <p>Crie um banco de dados chamado <code>biblioteca</code>. Para isso:</p> <ul> <li>Clique em <code>+ Create Database</code></li> <li>No campo <code>Database Name</code> coloque <code>biblioteca</code></li> <li>No campo <code>Collection Name</code> coloque <code>livros</code></li> </ul> </li> <li> <p>Importe os livros:</p> <ul> <li>Acesse o banco <code>biblioteca</code>.</li> <li>Clique na cole\u00e7\u00e3o <code>livros</code>.</li> <li>Clique em <code>Add Data</code> e depois em <code>Import JSON</code>.</li> <li>Escolha o arquivo <code>livros.json</code>.</li> <li>Clique em <code>Import</code>.</li> </ul> </li> <li> <p>Importe os usu\u00e1rios:</p> <ul> <li>Clique no bot\u00e3o <code>+</code> ao lado do nome do banco de dados <code>biblioteca</code> e crie uma nova cole\u00e7\u00e3o chamada <code>usuarios</code>.</li> <li>Clique na cole\u00e7\u00e3o <code>usuarios</code>.</li> <li>Clique em <code>Add Data</code> e depois em <code>Import JSON</code>.</li> <li>Escolha o arquivo <code>usuarios.json</code>.</li> <li>Clique em <code>Import</code>.</li> </ul> </li> <li> <p>Clique no bot\u00e3o <code>Open MongoDB shell</code> no canto superior direito para abrir o terminal do MongoDB.</p> </li> <li>Execute o seguinte comando para verificar se os dados foram importados corretamente:</li> </ul> <pre><code>use biblioteca\ndb.usuarios.find().pretty()\n</code></pre> <p>Caso o comando acima retorne os dados dos usu\u00e1rios, a importa\u00e7\u00e3o foi realizada com sucesso.</p>"},{"location":"projetos/aps3/#como-sera-a-avaliacao","title":"Como ser\u00e1 a avalia\u00e7\u00e3o?","text":"<p>O feedback referente a esta atividade ser\u00e1 disponibilizado a todos os alunos, indicando as quest\u00f5es corretas e incorretas incluindo as sugest\u00f5es para melhoria. O conceito na atividade ser\u00e1 atribu\u00eddo pelo n\u00famero de quest\u00f5es corretas, como segue a Tabela abaixo:</p> Conceito N\u00famero de Acertos I 0 D 2 C 4 C+ 6 B 8 B+ 9 A 10 A+ 11 <p>Refor\u00e7amos que n\u00e3o ser\u00e3o aceitos exerc\u00edcios entregues fora do prazo e que na entrega n\u00e3o realizada ser\u00e1 atribu\u00eddo conceito I</p>"},{"location":"projetos/aps3/#exercicios","title":"Exerc\u00edcios","text":"<p>Os exerc\u00edcios consistem em realizar consultas no banco de dados <code>biblioteca</code> que voc\u00ea criou e importou os dados em formato <code>MongoDB Shell Syntax</code>. Para isso, teste as consultas utilizando o shell do MongoDB Compass.</p> <ol> <li>Liste todos os livros dispon\u00edveis.</li> <li>Busque todos os livros do autor \"Machado de Assis\".</li> <li>Atualizar a disponibilidade de \"Poemas para um Mundo Novo 5\" para <code>false</code>.</li> <li>Apague da cole\u00e7\u00e3o <code>livros</code> todos os livros publicados antes de 1900.</li> <li>Insira um novo livro na cole\u00e7\u00e3o <code>livros</code> com os seguintes dados:<ul> <li>T\u00edtulo: \"O Pequeno Pr\u00edncipe\"</li> <li>Autor: \"Antoine de Saint-Exup\u00e9ry\"</li> <li>Ano de Publica\u00e7\u00e3o: 1943</li> <li>Disponibilidade: <code>true</code></li> </ul> </li> <li>Insira com um \u00fanico comando tr\u00eas novos livros na cole\u00e7\u00e3o <code>livros</code> com os seguintes dados:<ul> <li>Livro 1:<ul> <li>T\u00edtulo: \"1984\"</li> <li>Autor: \"George Orwell\"</li> <li>Ano de Publica\u00e7\u00e3o: 1949</li> <li>Disponibilidade: <code>true</code></li> </ul> </li> <li>Livro 2:<ul> <li>T\u00edtulo: \"A Revolu\u00e7\u00e3o dos Bichos\"</li> <li>Autor: \"George Orwell\"</li> <li>Ano de Publica\u00e7\u00e3o: 1945</li> <li>Disponibilidade: <code>true</code></li> </ul> </li> <li>Livro 3:<ul> <li>T\u00edtulo: \"O Senhor dos An\u00e9is\"</li> <li>Autor: \"J.R.R. Tolkien\"</li> <li>Ano de Publica\u00e7\u00e3o: 1954</li> <li>Disponibilidade: <code>true</code></li> </ul> </li> </ul> </li> <li>Adicione o empr\u00e9stimo do livro \"A Revolu\u00e7\u00e3o dos Bichos\" para a usu\u00e1ria \"Ana\".</li> <li>Liste os usu\u00e1rios que t\u00eam pelo menos um livro emprestado.</li> <li> <p>Busque a usu\u00e1ria \"Ana\" e mostre seu nome e o t\u00edtulo dos livros que ela possui emprestados. A resposta deve ser como a abaixo:</p> <pre><code>{\n    nome: 'Ana',\n    livros_emprestados: [\n        {\n            titulo: 'Poemas para um Mundo Novo 11'\n        },\n        {\n            titulo: 'Mist\u00e9rios de Pedra 1'\n        },\n        {\n            titulo: 'O Vento e as Estrelas 9'\n        },\n        {\n            titulo: 'A Revolu\u00e7\u00e3o dos Bichos'\n        }\n    ]\n}\n</code></pre> </li> <li> <p>Liste os usu\u00e1rios que tenham pego emprestado o livro \"Mist\u00e9rios de Pedra 1\".</p> </li> <li>Liste o t\u00edtulo de todos os livros que j\u00e1 foram emprestados sem repeti\u00e7\u00e3o.</li> </ol>"},{"location":"projetos/projeto1/","title":"Projeto 1","text":"<p>Entrega</p> <p> 29/08 (sexta-feira)</p> <p> Commits at\u00e9 as 23:59</p> <p> Individual</p> <p> Entrega via  GitHub Classroom</p>"},{"location":"projetos/projeto1/#objetivos","title":"Objetivos","text":"<p>Durante o primeiro handout n\u00f3s desenvolvemos o Get-it com as funcionalidades de listagem e cria\u00e7\u00e3o de anota\u00e7\u00f5es. Na primeira APS, voc\u00ea aprendeu a armazenar e recuperar dados de um banco de dados relacional. Agora, no Projeto 1, o seu objetivo \u00e9 aplicar o que aprendeu nos handouts e na APS para adicionar as seguintes funcionalidades ao sistema:</p> <ol> <li>Estilo da p\u00e1gina (utilizando o CSS que voc\u00ea j\u00e1 fez ou adicionando um novo estilo);</li> <li>Armazenamento em banco de dados SQLite ao inv\u00e9s de um arquivo texto;</li> <li>Apagar anota\u00e7\u00f5es;</li> <li>Editar anota\u00e7\u00f5es;</li> <li>Marcar anota\u00e7\u00f5es como favoritas.</li> </ol>"},{"location":"projetos/projeto1/#rubrica","title":"Rubrica","text":"<p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto 1:</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D Entregou o resultado do handout 01 funcionando mas o teste autom\u00e1tico n\u00e3o passa ou n\u00e3o \u00e9 mostrado na p\u00e1gina do github C O teste autom\u00e1tico do handout 01 passa e o resultado aparece na p\u00e1gina do github C+ Entregou o handout 01 e 1 das 4 tarefas passando no teste B Entregou o handout 01 e 2 das 4 tarefas passando no teste B+ Entregou o handout 01 e 3 das 4 tarefas passando no teste A Entregou o handout 01 e as 4 tarefas passando no teste A+ Entregou o handout 01, as 4 tarefas e a funcionalidade de favoritar passando no teste"},{"location":"projetos/projeto1/#configuracao-da-correcao-automatica","title":"Configura\u00e7\u00e3o da Corre\u00e7\u00e3o Autom\u00e1tica","text":"<ul> <li>Para configurar a corre\u00e7\u00e3o autom\u00e1tica, voc\u00ea deve fazer algumas configura\u00e7\u00f5es no seu reposit\u00f3rio do GitHub Classroom. Siga as instru\u00e7\u00f5es presentes no Guia de Configura\u00e7\u00e3o da Corre\u00e7\u00e3o Autom\u00e1tica.</li> </ul>"},{"location":"projetos/projeto1/#detalhes-das-tarefas","title":"Detalhes das Tarefas","text":"<ul> <li>Veja mais descri\u00e7\u00f5es das tarefas que devem ser entregues no projeto  Clique aqui para ver os detalhes das tarefas.</li> </ul>"},{"location":"projetos/projeto1/guia-corr-aut/","title":"Configura\u00e7\u00e3o da Corre\u00e7\u00e3o Autom\u00e1tica","text":"<ol> <li> <p>Acesse a p\u00e1gina do reposit\u00f3rio do projeto no GitHub e clique na aba <code>Settings</code>/<code>Configura\u00e7\u00f5es</code>.</p> <p> Configura\u00e7\u00f5es do reposit\u00f3rio </p> </li> <li> <p>No menu lateral, clique em <code>Webhooks</code></p> <p> Menu Webhooks </p> </li> <li> <p>Clique no bot\u00e3o <code>Add webhook</code>/<code>Adicionar webhook</code>.</p> <p> Adicionar Webhook </p> </li> <li> <p>Preencha os campos conforme a seguir:</p> <ul> <li>Payload URL:      <pre><code>http://3.130.178.228/progeficaz/Projeto1\n</code></pre></li> <li>Content type: <code>application/json</code></li> <li>Secret: <code>progeficaz20252</code></li> </ul> <ul> <li> <p>Which events would you like to trigger this webhook?: <code>Let me select individual events</code></p> <ul> <li>Deixe APENAS a op\u00e7\u00e3o <code>Releases</code> selecionada.</li> </ul> <ul> <li>DESMARQUE a op\u00e7\u00e3o <code>Pushes</code> caso esteja selecionada.</li> </ul> <p> </p> </li> <li> <p>E por fim, deixe a op\u00e7\u00e3o <code>Active</code> selecionada e clique no bot\u00e3o <code>Add webhook</code>/<code>Adicionar webhook</code>.      </p> </li> </ul> </li> <li> <p>Clone o seu reposit\u00f3rio do Github.</p> <p>Altere o arquivo <code>README.md</code> e adicione o nome do seu reposit\u00f3rio no GitHub, conforme o exemplo abaixo:</p> Conte\u00fado do README.md<pre><code>## Status da Entrega\n&lt;img \n    src=\"http://3.130.178.228/progeficaz/Projeto1/svg/insper-classroom/NOME DO SEU REPOSITORIO\" \n    alt=\"svg\" \n    width=\"100%\" \n    height=\"300px\"\n/&gt;\n</code></pre> <p> Nome do Reposit\u00f3rio </p> <p>O valor do atributo <code>src</code> deve ser alterado com o nome do seu reposit\u00f3rio.</p> </li> <li> <p>Fa\u00e7a o commit e o push do arquivo <code>README.md</code> para o reposit\u00f3rio do Github.</p> </li> </ol> <p>Fazendo submiss\u00f5es</p>"},{"location":"projetos/projeto1/submetendo/","title":"Realizando uma submiss\u00e3o","text":"<p>Depois de configurar o WebHook do seu reposit\u00f3rio Github vamos adicionar os arquivos referentes ao Handout 1.</p> <p>Caso n\u00e3o tenha feito a configura\u00e7\u00e3o do WebHook, clique aqui para configurar.</p>"},{"location":"projetos/projeto1/submetendo/#estrutura-de-diretorios","title":"Estrutura de diret\u00f3rios","text":"<p>Copie os arquivos referentes ao Handout. O reposit\u00f3rio do projeto deve seguir a seguinte estrutura de diret\u00f3rios e nomenclatura de arquivos:</p> Organiza\u00e7\u00e3o do Reposit\u00f3rio <p>Importante</p> <p>Como o projeto ser\u00e1 corrigido automaticamente, \u00e9 importante que voc\u00ea siga a estrutura de diret\u00f3rios apresentada no handout.</p> <p>Al\u00e9m disso, o arquivo principal do projeto deve se chamar <code>servidor.py</code>.</p>"},{"location":"projetos/projeto1/submetendo/#arquivo-gitignore","title":"Arquivo .gitignore","text":"<p>Existem arquivos que n\u00e3o devem ser versionados no reposit\u00f3rio. Um exemplo \u00e9 a pasta <code>__pycache__</code> que \u00e9 criado pelo Python. Se voc\u00ea procurar em seu reposit\u00f3rio Github criado para o handout 1 ver\u00e1 que este pasta est\u00e1 l\u00e1.</p> <p>Essa pasta \u00e9 desnecess\u00e1ria para o reposit\u00f3rio, pois \u00e9 criada automaticamente pelo Python. Para evitar que ela seja versionada, deve existir um arquivo chamado <code>.gitignore</code> na raiz do seu reposit\u00f3rio. Verifique se o arquivo <code>.gitignore</code> existe. Caso n\u00e3o exista, crie um arquivo chamado <code>.gitignore</code> na raiz do seu reposit\u00f3rio e adicione o seguinte conte\u00fado:</p> <pre><code>__pycache__/\nenv/\n</code></pre>"},{"location":"projetos/projeto1/submetendo/#criando-um-release","title":"Criando um release","text":"<p>Para que o corretor autom\u00e1tico possa corrigir o seu projeto, \u00e9 necess\u00e1rio criar um release no Github. Para isso, siga os passos a seguir:</p> <ol> <li> <p>Acesse o reposit\u00f3rio do seu projeto no Github. Procure o menu <code>Releases</code> e clique em <code>Create a new release</code>.</p> <p> Releases </p> </li> <li> <p>Clique no bot\u00e3o <code>Choose a tag</code> Releases </p> </li> <li> <p>Crie uma tag para o seu release. A tag deve ser <code>v1.0</code>.</p> <p>Sempre que for criar um release, crie uma nova tag utilizando o padr\u00e3o v1.0, v1.1, v1.2, etc. Caso a release seja referente a uma nova funcionalidade implementada, incremente o primeiro n\u00famero da tag. Por exemplo, se a release atual \u00e9 v1.0 e voc\u00ea implementou uma nova funcionalidade, a tag da nova release deve ser v2.0. Caso a release seja referente a uma corre\u00e7\u00e3o de bug, incremente o segundo n\u00famero da tag. Por exemplo, se a release atual \u00e9 v1.0 e voc\u00ea corrigiu um bug, a tag da nova release deve ser v1.1.</p> <p> Releases </p> <p>Digite o nome da tag e clique <code>+ Create new tag: v1.0</code>.</p> </li> <li> <p>Preencha o campo <code>Release title</code> com o mesmo nome da tag <code>v1.0</code>, adicione uma descri\u00e7\u00e3o e clique em <code>Publish release</code>.</p> <p> Releases </p> </li> </ol> <p>Pronto! Agora os testes v\u00e3o rodar. (Pode levar alguns minutos para que os testes sejam executados).</p> <p>Sempre que algum teste n\u00e3o passar com sucesso, uma <code>issue</code> ser\u00e1 aberta no seu reposit\u00f3rio indicando o que est\u00e1 errado. Como n\u00e3o implementamos todas as funcionalidades do projeto, uma issue ser\u00e1 aberta indicando quais itens faltam implementar.</p> Issue <p>Se tudo estiver correto, uma imagem aparecer\u00e1 no README do seu reposit\u00f3rio indicando que os testes para o handout 01 passaram.</p> Testes handout 01 ok <p>Importante</p> <p>Sempre que gerar uma issue no reposit\u00f3rio, para atualizar a imagem no README \u00e9 recomendado que fa\u00e7a um hard refresh no navegador.</p> <p>Hard Refresh/Hard Reload s\u00e3o atalhos para for\u00e7ar o navegador a carregar a vers\u00e3o mais recente de uma p\u00e1gina. </p> <ul> <li>No Windows  e Linux , pressione <code>Ctrl + F5</code>. </li> <li>No MacOS , pressione <code>Cmd + Shift + R</code>. </li> <li>Caso esses atalhos n\u00e3o funcionem, voc\u00ea pode pesquisar o atalho espec\u00edfico para o seu navegador.</li> </ul> <p>Importante</p> <p>O servidor dever\u00e1 utilizar a porta <code>5000</code></p> <p>Agora podemos come\u00e7ar a tabalhar nas tarefas do Projeto 1.</p> <p>Tarefas do Projeto 1</p>"},{"location":"projetos/projeto1/tarefas-projeto1/","title":"Tarefas do Projeto 1A","text":"<p>No handout 01 v\u00e1rios trechos de c\u00f3digo pronto foram apresentados e explica\u00e7\u00f5es foram dadas sobre como cada trecho funciona. Neste projeto ser\u00e1 necess\u00e1rio que voc\u00ea implemente funcionalidades novas ao c\u00f3digo base para verificar que compreendeu o funcionamento do c\u00f3digo.</p> <p>Para este projeto, voc\u00easdeve implementar as 4 funcionalidades a seguir:</p>"},{"location":"projetos/projeto1/tarefas-projeto1/#1-estilo-da-pagina","title":"1. Estilo da p\u00e1gina","text":"<ul> <li>O estilo css j\u00e1 foi implementado semestre passado. Se voc\u00ea n\u00e3o guardou o arquivo, ser\u00e1 um bom momento para relembrar os coonceitos de CSS.</li> </ul> <p>Para isso, ser\u00e1 necess\u00e1rio:</p> <ul> <li> <p>Adicionar os arquivos <code>getit.css</code> e <code>getit.js</code> (se houver) na pasta do reposit\u00f3rio do projeto mantendo a estrutura de pastas coerente.</p> </li> <li> <p>Alterar os arquivos <code>index.html</code> e <code>notes.html</code> para adicionar essas novas informa\u00e7\u00f5es. Esta etapa deve ser realizada com cuidado pois simplesmente copiar o HTML do semestre passado n\u00e3o vai funcionar.</p> </li> </ul> <p>Realize alguns testes para inserir novas notas para verificar se as funcionalidades do Handout 01 continuam funcionando.</p> <p>Ao finalizar esta etapa, a p\u00e1gina deve estar com o estilo CSS e com as funcionalidades do Handout 01.</p>"},{"location":"projetos/projeto1/tarefas-projeto1/#2-persistencia-de-dados","title":"2. Persist\u00eancia de dados","text":"<p>Nesta etapa, voc\u00ea dever\u00e1 implementar a persist\u00eancia dos dados com SQLite utilizando os comandos aprendidos na APS 1.</p> <p>Dica </p> <ul> <li> <p>Nesta etapa, as altera\u00e7\u00f5es podem ser feitas no arquivo <code>utils.py</code>. Procure todos os trechos de c\u00f3digo que realizam leitura e escrita do arquivo <code>notes.json</code> e altere para que estas opera\u00e7\u00f5es sejam realizadas no banco de dados.</p> <ul> <li>Dica Fa\u00e7a as altera\u00e7\u00f5es aos poucos e teste! Evite fazer muitas altera\u00e7\u00f5es de uma vez s\u00f3. Por exemplo, altere a fun\u00e7\u00e3o que l\u00ea o arquivo <code>notes.json</code> para que ela leia do banco de dados e verifique se a aplica\u00e7\u00e3o continua funcionando. Muito provavelmente, voc\u00ea perceber\u00e1 que esqueceu de alterar alguma coisa e ter\u00e1 que consertar o c\u00f3digo.</li> </ul> <p>Somente prossiga para a pr\u00f3xima altera\u00e7\u00e3o quando tiver certeza que a altera\u00e7\u00e3o anterior est\u00e1 funcionando corretamente.</p> </li> <li> <p>Ao finalizar esta etapa, caso n\u00e3o utilize mais o arquivo <code>notes.json</code>, apague o arquivo do reposit\u00f3rio.</p> </li> <li> <p>Importante: O nome do banco de dados deve ser <code>banco.db</code> e ele deve estar na raiz do reposit\u00f3rio. </p> </li> <li> <p>O nome da tabela deve ser <code>notes</code> e ela deve conter pelo menos as colunas <code>id</code>, <code>title</code> e <code>content</code>. A coluna <code>id</code> deve ser uma chave prim\u00e1ria e autoincrementada. Perceba que o nome da tabela e das colunas est\u00e1 em ingl\u00eas, pois \u00e9 uma conven\u00e7\u00e3o comum em bancos de dados relacionais. No entanto, o nome dos componentes da interface do usu\u00e1rio devem permanecer em portugu\u00eas, como no handout.</p> </li> <li> <p>Material de apoio: https://docs.python.org/3/library/sqlite3.html</p> </li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#3-apagar-anotacoes","title":"3. Apagar anota\u00e7\u00f5es","text":"<p>Permitir que o usu\u00e1rio apague uma anota\u00e7\u00e3o;</p> <ul> <li>Adicione um bot\u00e3o/link no <code>card</code> de cada nota existente para excluir esta nota.</li> <li>Um bot\u00e3o/link gera uma requisi\u00e7\u00e3o quando o usu\u00e1rio clica nele. Quando adicinar um bot\u00e3o/link, fa\u00e7a um teste para ver a requisic\u00e3o que \u00e9 gerada.</li> <li>Dica: Trabalhar com link (elemento html &lt;a&gt;) pode ser mais f\u00e1cil do que trabalhar com bot\u00f5es (elemento html &lt;\\button&gt;). Pesquise sobre a tag <code>&lt;a&gt;</code>.</li> <li>Voc\u00ea pode utilizar o m\u00e9todo GET ou POST para esta tarefa.<ul> <li>GET: Caso opte pelo m\u00e9todo GET a requisi\u00e7\u00e3o deve seguir o seguinte formato:     <pre><code>GET /delete/&lt;NOTA_ID&gt; HTTP/1.1\n</code></pre>     (Obs.: A rota pode variar um pouco dependendo da forma como voc\u00ea escolher implementar)</li> <li>POST: Caso opte pelo m\u00e9todo POST a requisi\u00e7\u00e3o deve seguir o seguinte formato:     <pre><code>POST /delete HTTP/1.1\n&lt;HTTP_HEADERS&gt;\n\nid=&lt;NOTA_ID&gt;\n</code></pre>     Para enviar o id no formul\u00e1rio, pesquise por <code>&lt;input type=\"hidden\" /&gt;</code></li> </ul> </li> <li>Importante: O link ou bot\u00e3o deve possuir o atributo <code>name='delete_button'</code> para que o teste de apagar anota\u00e7\u00f5es passe com sucesso.</li> <li>Observa\u00e7\u00e3o: Note que o <code>id</code> da nota n\u00e3o deve aparecer na tela, pois esta informa\u00e7\u00e3o \u00e9 irrelevante para o usu\u00e1rio.</li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#exemplo","title":"Exemplo","text":"Exemplo da funcionalidade de deletar"},{"location":"projetos/projeto1/tarefas-projeto1/#4-editar-anotacoes","title":"4. Editar anota\u00e7\u00f5es","text":"<p>Permitir a edi\u00e7\u00e3o de anota\u00e7\u00f5es existentes;</p> <ul> <li>Adicione um bot\u00e3o/link na nota para a fun\u00e7\u00e3o de editar. Ao clicar no bot\u00e3o de edi\u00e7\u00e3o, o usu\u00e1rio deve ser direcionado para uma p\u00e1gina html nova de edi\u00e7\u00e3o.<ul> <li>Ao clicar no bot\u00e3o/link, o servidor dever\u00e1 receber uma requisi\u00e7\u00e3o no seguinte formato:     <pre><code>GET /update/&lt;NOTA_ID&gt; HTTP/1.1\n</code></pre></li> </ul> </li> <li>Importante: O link ou bot\u00e3o deve possuir o atributo <code>name='edit_button'</code> para que o teste de editar anota\u00e7\u00f5es passe com sucesso.</li> <li>A p\u00e1gina de edi\u00e7\u00e3o deve apresentar um formul\u00e1rio com o <code>t\u00edtulo</code> e <code>conte\u00fado</code> j\u00e1 preenchidos.</li> <li>Voc\u00ea precisar\u00e1 de um m\u00e9todo novo no arquivo <code>utils.py</code> que recebe como argumento o <code>id</code> de uma anota\u00e7\u00e3o e retorna esta anota\u00e7\u00e3o no formato de um objeto do tipo <code>Note</code>. </li> <li>Esta p\u00e1gina deve apresentar dois bot\u00f5es: <code>Salvar</code> e <code>Cancelar</code>. Caso os nomes sejam diferentes o teste de editar anota\u00e7\u00f5es n\u00e3o passar\u00e1 com sucesso.<ul> <li>Ao clicar no bot\u00e3o/link de <code>Cancelar</code> o usu\u00e1rio deve ser direcionado para a p\u00e1gina principal.</li> <li>Ao clicar no bot\u00e3o de <code>Salvar</code> a aplica\u00e7\u00e3o deve receber uma requisi\u00e7\u00e3o no seguinte formato:     <pre><code>POST /update HTTP/1.1\n&lt;HTTP_HEADERS&gt;\n\nid=&lt;NOTA_ID&gt;&amp;titulo=&lt;NOTA_TITULO&gt;&amp;detalhes=&lt;NOTA_DETALHES&gt;\n</code></pre> As altera\u00e7\u00f5es devem ser registradas no banco de dados e em seguida o usu\u00e1rio deve ser direcionado para a p\u00e1gina inicial.</li> </ul> </li> </ul>"},{"location":"projetos/projeto1/tarefas-projeto1/#exemplo_1","title":"Exemplo","text":"Exemplo da funcionalidade de editar"},{"location":"projetos/projeto1/tarefas-projeto1/#conceito-a","title":"Conceito A+","text":"<p>Para receber o conceito A+ voc\u00ea deve implementar a funcionalidade de favoritar anota\u00e7\u00f5es.</p>"},{"location":"projetos/projeto1/tarefas-projeto1/#5-marcar-anotacoes-como-favoritas","title":"5. Marcar anota\u00e7\u00f5es como favoritas","text":"<p>Permitir que o usu\u00e1rio marque uma anota\u00e7\u00e3o como favorita;</p> <ul> <li>Adicione um bot\u00e3o/link no <code>card</code> de cada nota existente para favoritar/desfavoritar esta nota.</li> <li>Cada nota deve ter um <code>class='card'</code> para que seja identificada como um card.</li> <li>Importante: O link ou bot\u00e3o deve possuir o atributo <code>name='favorite_button'</code> para que o teste de favoritar anota\u00e7\u00f5es passe com sucesso.</li> <li>Notas favoritadas devem ser exibidas antes das notas n\u00e3o favoritadas.</li> <li>Esta funcionalidade somente ser\u00e1 considerada caso todos os testes anteriores estejam implementados e funcionando corretamente.</li> <li>Deve ser poss\u00edvel favoritar/desfavoritar uma anota\u00e7\u00e3o. Ou seja, se a anota\u00e7\u00e3o j\u00e1 estiver favoritada, ao clicar no bot\u00e3o/link de favoritar, a anota\u00e7\u00e3o deve ser desfavoritada e vice-versa.</li> <li>Deve haver uma indica\u00e7\u00e3o visual de que a anota\u00e7\u00e3o est\u00e1 favoritada. Por exemplo, voc\u00ea pode utilizar um \u00edcone de estrela preenchida para indicar que a anota\u00e7\u00e3o est\u00e1 favoritada e um \u00edcone de estrela vazia para indicar que a anota\u00e7\u00e3o n\u00e3o est\u00e1 favoritada.</li> </ul>"},{"location":"projetos/projeto2/","title":"Projeto 2","text":"<p>Entrega</p> <p> 17/09/2025 (quarta-feira)</p> <p> Commits at\u00e9 as 23:59</p> <p> Duplas</p> <p> Entrega via  GitHub Classroom</p>"},{"location":"projetos/projeto2/#objetivos","title":"Objetivos","text":"<p>Durante o primeiro projeto, n\u00f3s desenvolvemos um servidor capaz de responder com p\u00e1ginas HTML. No segundo projeto, nosso objetivo \u00e9 desenvolvermos um servidor RESTful que responda com JSON. Para isso, voc\u00ea deve implementar uma API de uma empresa imobili\u00e1ria.</p>"},{"location":"projetos/projeto2/#requisitos","title":"Requisitos","text":"<ol> <li>Devem haver rotas para:<ul> <li>Listar todos os im\u00f3veis com todos os seus atributos;</li> <li>Listar um im\u00f3vel espec\u00edfico pelo seu id com todos os seus atributos;</li> <li>Adicionar um novo im\u00f3vel;</li> <li>Atualizar um im\u00f3vel existente;</li> <li>Remover um im\u00f3vel existente;</li> <li>Listar im\u00f3veis por tipo (casa, apartamento, terreno, etc) com todos os seus atributos;</li> <li>Listar im\u00f3veis por cidade com todos os seus atributos;</li> </ul> </li> <li>Devem haver testes automatizados para todas as rotas.</li> <li>O servidor deve ser desenvolvido utilizando o framework Flask.</li> <li>O servidor deve utilizar o banco de dados MySQL hospedado na plataforma Aiven.</li> <li>O projeto deve utilizar os princ\u00edpios de TDD.</li> <li>O projeto deve ter o deploy feito em um EC2 na AWS.</li> <li>Para gerar o banco de dados, utilize o script dispon\u00edvel aqui</li> </ol>"},{"location":"projetos/projeto2/#rubrica","title":"Rubrica","text":"<p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto 2:</p> <p>Para que a nota seja considerada, \u00e9 necess\u00e1rio possuir contribui\u00e7\u00f5es em seu nome no reposit\u00f3rio do projeto. Caso esteja em dupla, \u00e9 necess\u00e1rio que ambos tenham contribui\u00e7\u00f5es.</p> <p>Se os dois membros da dupla estiverem trabalhando no mesmo c\u00f3digo juntos, fa\u00e7a o commit utilizando o comando de coautores como mostrado aqui.</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D Criou o c\u00f3digo do servidor antes dos testes, ou n\u00e3o foram feitas corretamente as rotas solicitadas. C Criou os testes antes do c\u00f3digo do servidor, mas n\u00e3o utilizou corretamente todos os princ\u00edpios de TDD vistos. Todas as rotas respondem corretamente mas a API n\u00e3o \u00e9 RESTful. C+ No geral aplicou corretamente os princ\u00edpios de TDD e a API \u00e9 RESTful, mas houveram alguns pequenos erros. B Aplicou corretamente os princ\u00edpios de TDD, a API \u00e9 RESTful e se comunica com um banco de dados MySQL hospedado no Aiven. A API est\u00e1 no n\u00edvel 2 da Maturidade de Richardson B+ Atingiu o conceito B e o projeto est\u00e1 hospedado e acess\u00edvel na AWS. H\u00e1 um link para a API no arquivo README do projeto. A Atingiu o conceito B+ e a API retorna os c\u00f3digos HTTP corretos para a a\u00e7\u00e3o executada, como descritos aqui. A+ Atingiu o conceito A e a API est\u00e1 no n\u00edvel 3 da Maturidade de Richardson."},{"location":"projetos/projeto3/","title":"Projeto Final","text":"<p>Entrega</p> <p> 07/05/2025 (quarta-feira)</p> <p> Commits at\u00e9 as 23:59</p> <p> Mesmos grupos de Projeto \u00c1gil + no m\u00e1ximo 1 aluno que n\u00e3o esteja cursando a disciplina.</p> <p> Entrega via  GitHub Classroom.</p>"},{"location":"projetos/projeto3/#objetivos","title":"Objetivos","text":"<p>Neste projeto, o objetivo \u00e9 criar dois softwares que se comuniquem entre si. O primeiro software \u00e9 um servidor RESTful Flask que deve ser capaz de receber requisi\u00e7\u00f5es HTTP e retornar respostas em formato JSON. O segundo software \u00e9 um cliente em React que deve ser capaz de enviar requisi\u00e7\u00f5es HTTP para o servidor e processar as respostas.</p>"},{"location":"projetos/projeto3/#requisitos","title":"Requisitos","text":"<ol> <li>O servidor deve ser desenvolvido utilizando o framework Flask.</li> <li>O servidor deve estar em conformidade com os princ\u00edpios REST estando no n\u00edvel 2 da Maturidade de Richardson.</li> <li>O servidor deve utilizar o banco de dados MongoDB hospedado na plataforma Atlas.</li> <li>O cliente deve ser desenvolvido utilizando o framework React.</li> <li>O cliente deve ser capaz de enviar requisi\u00e7\u00f5es HTTP para o servidor e processar as respostas.</li> <li>O projeto deve ter o deploy feito em um EC2 na AWS.</li> <li>O tema do projeto deve ser escolhido pelo grupo, mas deve ser validado pelo professor.</li> <li>O projeto deve utilizar-se de pelo menos uma API externa.</li> <li>O c\u00f3digo do servidor deve estar no seguinte GitHub Classroom: link.</li> <li>O c\u00f3digo do cliente deve estar no seguinte GitHub Classroom: link.</li> <li>Os arquivos de credenciais n\u00e3o devem ser commitados nos reposit\u00f3rios. Utilize vari\u00e1veis de ambiente para armazenar as credenciais. Os arquivos de credenciais devem ser enviados via Blackboard para permitir a corre\u00e7\u00e3o.</li> </ol>"},{"location":"projetos/projeto3/#avaliacao-do-grupo","title":"Avalia\u00e7\u00e3o do Grupo","text":"<p>A Rubrica do projeto ser\u00e1 utilizada para avaliar o projeto submetido. No entanto, os membros do grupo podem ter sua nota alterada de acordo com o desempenho individual. Alunos que n\u00e3o tiverem quantidades significativas de commits com contribui\u00e7\u00f5es em seu nome, ou que n\u00e3o participarem ativamente do projeto, podem ter sua nota reduzida.</p> <p>Para isso, ser\u00e1 utilizada a avalia\u00e7\u00e3o por pares. Uma vez por semana, os membros do grupo devem preencher o formul\u00e1rio de avalia\u00e7\u00e3o por pares. Neste formul\u00e1rio, cada membro do grupo deve avaliar os outros membros do grupo. Ser\u00e3o 3 submiss\u00f5es do formul\u00e1rio, nos dias 23/04, 30/04 e 07/05. A n\u00e3o entrega de um dos formul\u00e1rios resultar\u00e1 em uma redu\u00e7\u00e3o de meio conceito na nota final do aluno para cada formul\u00e1rio n\u00e3o entregue. </p> <p>No formul\u00e1rio, devem ser avaliadas a produtividade e proatividade de cada membro do grupo em uma escala de 1 a 5 da seguinte forma:</p>"},{"location":"projetos/projeto3/#produtividade","title":"Produtividade","text":"<ol> <li> <p>Produziu muito abaixo do esperado, colocando a entrega em risco e obrigando outro(s) membro(s) a mudar planejamentos pessoais para garanti-la.</p> </li> <li> <p>Produziu abaixo do esperado.</p> </li> <li> <p>Produziu precisamente o esperado. Nem menos, nem mais.</p> </li> <li> <p>Produziu acima do esperado.</p> </li> <li> <p>Produziu muito acima do esperado, mudando planejamentos pessoais para compensar a entrega abaixo do esperado de outro(s) membro(s).</p> </li> </ol> <p>ATEN\u00c7\u00c3O</p> <ul> <li> <p>Se a sprint n\u00e3o foi bem sucedida, \u00e9 obrigat\u00f3rio que pelo menos um dos membros tenha n\u00edvel 1 ou 2. N\u00e3o faz sentido todos terem produzido o esperado e ainda assim a sprint ter sido malsucedida.</p> </li> <li> <p>Se um membro tem n\u00edvel 5, \u00e9 obrigat\u00f3rio, pela descri\u00e7\u00e3o da rubrica, que pelo menos um dos membros tenha n\u00edvel 1 ou pelo menos dois dos membros tenham n\u00edvel 2.</p> </li> <li> <p>Para atingir A, tanto faz atribuir 3 ou 4. Ou seja, n\u00e3o faz muito sentido atribuir 4 por receio de prejudicar o colega. Use esse n\u00edvel para reconhecer desempenhos excepcionais.</p> </li> </ul>"},{"location":"projetos/projeto3/#proatividade","title":"Proatividade","text":"<ol> <li> <p>Nem tentou fazer o que tinha prometido.</p> </li> <li> <p>Tentou fazer o que tinha prometido, mas s\u00f3 porque o grupo ficou cobrando.</p> </li> <li> <p>Tentou fazer o que tinha prometido, sem que o grupo precisasse ficar cobrando.</p> </li> <li> <p>Terminou o que tinha prometido e tentou fazer al\u00e9m, ajudando outro(s) membro(s) que estava(m) tendo dificuldades.</p> </li> <li> <p>Tentou fazer o que outro(s) membro(s) tinha(m) prometido, mesmo sem terminar o que ele pr\u00f3prio tinha prometido e/ou sem ter evid\u00eancia de que esse(s) esse(s) membro(s) estava(m) tendo dificuldades.</p> </li> </ol> Conceito Descri\u00e7\u00e3o Sem desconto N\u00e3o teve nenhuma avalia\u00e7\u00e3o abaixo do esperado. Ou teve uma avalia\u00e7\u00e3o abaixo do esperado, seguida de duas avalia\u00e7\u00f5es acima do esperado. Menos meio conceito Teve avalia\u00e7\u00e3o abaixo do esperado em 1 sprint. Menos um conceito Teve avalia\u00e7\u00e3o abaixo do esperado em 2 sprints. Menos dois conceitos Teve avalia\u00e7\u00e3o de desempenho abaixo do esperado em 3 sprints. Menos tr\u00eas conceitos N\u00e3o respondeu nenhum question\u00e1rio dentro do prazo. Ou n\u00e3o possui nenhum contribui\u00e7\u00e3o significativa no projeto."},{"location":"projetos/projeto3/#rubrica","title":"Rubrica","text":"<p>A rubrica a seguir ser\u00e1 utilizada na corre\u00e7\u00e3o do Projeto Final:</p> <p>Para que a nota seja considerada, \u00e9 necess\u00e1rio possuir contribui\u00e7\u00f5es em seu nome nos reposit\u00f3rios do projeto.</p> <p>Se mais de um membro do grupo estiver trabalhando no mesmo c\u00f3digo, fa\u00e7a o commit utilizando o comando de coautores como mostrado aqui.</p> Conceito Descri\u00e7\u00e3o I N\u00e3o entregou ou o c\u00f3digo n\u00e3o executa D A API n\u00e3o \u00e9 RESTful, ou n\u00e3o se conecta a um banco MongoDB no Atlas ou o cliente React n\u00e3o se conecta corretamente na API. C A API \u00e9 RESTful. O cliente React se conecta com a API. Algumas telas apresentam erro quando utilizadas ou n\u00e3o foi utilizada uma API externa. C+ A API \u00e9 RESTful e se comunica com um banco de dados MongoDB hospedado no Atlas. A API est\u00e1 no n\u00edvel 2 da Maturidade de Richardson. O cliente React se conecta com a API e consegue acessar e manipular corretamente os dados usando todas as rotas dispon\u00edveis. A API se conecta e utiliza os dados vindos de outra API n\u00e3o desenvolvida pelo grupo. B Atingiu o conceito C+ e o servidor est\u00e1 hospedado e acess\u00edvel na AWS. H\u00e1 um link para a API no arquivo README do projeto. B+ Atingiu o conceito B e h\u00e1 testes de unidade para as rotas da API. A Atingiu o conceito B+ e h\u00e1 um sistema de autentica\u00e7\u00e3o implementado tanto no React quanto no Flask. A+ Atingiu o conceito A e a foi feito deploy do cliente React na AWS."}]}